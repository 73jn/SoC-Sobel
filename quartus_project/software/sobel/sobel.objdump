
sobel.elf:     file format elf32-littlenios2
sobel.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00000244

Program Header:
    LOAD off    0x00001000 vaddr 0x00000000 paddr 0x00000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00000020 paddr 0x00000020 align 2**12
         filesz 0x00011b34 memsz 0x00011b34 flags r-x
    LOAD off    0x00012b54 vaddr 0x00011b54 paddr 0x00013640 align 2**12
         filesz 0x00001aec memsz 0x00001aec flags rw-
    LOAD off    0x0001512c vaddr 0x0001512c paddr 0x0001512c align 2**12
         filesz 0x00000000 memsz 0x00000190 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00000000  00000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000224  00000020  00000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         0001119c  00000244  00000244  00001244  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000774  000113e0  000113e0  000123e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001aec  00011b54  00013640  00012b54  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000190  0001512c  0001512c  0001512c  2**2
                  ALLOC, SMALL_DATA
  6 .sdram_ctrl   00000000  000152bc  000152bc  00014640  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  00014640  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00001038  00000000  00000000  00014668  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00024eaa  00000000  00000000  000156a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000993e  00000000  00000000  0003a54a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0000c013  00000000  00000000  00043e88  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00002728  00000000  00000000  0004fe9c  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00003d61  00000000  00000000  000525c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    000178c0  00000000  00000000  00056325  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000050  00000000  00000000  0006dbe8  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000018d8  00000000  00000000  0006dc38  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  00072eb2  2**0
                  CONTENTS, READONLY
 18 .cpu          0000000c  00000000  00000000  00072eb5  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  00072ec1  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  00072ec2  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  00072ec3  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  00072ec7  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  00072ecb  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   00000009  00000000  00000000  00072ecf  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    00000009  00000000  00000000  00072ed8  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   00000009  00000000  00000000  00072ee1  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 0000000b  00000000  00000000  00072eea  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 0000002e  00000000  00000000  00072ef5  2**0
                  CONTENTS, READONLY
 29 .jdi          00005a3e  00000000  00000000  00072f23  2**0
                  CONTENTS, READONLY
 30 .sopcinfo     000723e4  00000000  00000000  00078961  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00000000 l    d  .entry	00000000 .entry
00000020 l    d  .exceptions	00000000 .exceptions
00000244 l    d  .text	00000000 .text
000113e0 l    d  .rodata	00000000 .rodata
00011b54 l    d  .rwdata	00000000 .rwdata
0001512c l    d  .bss	00000000 .bss
000152bc l    d  .sdram_ctrl	00000000 .sdram_ctrl
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../sobel_bsp//obj/HAL/src/crt0.o
0000027c l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 camera.c
00000000 l    df *ABS*	00000000 dipswitch.c
00000000 l    df *ABS*	00000000 grayscale.c
00000000 l    df *ABS*	00000000 i2c.c
00000000 l    df *ABS*	00000000 lcd_simple.c
00000000 l    df *ABS*	00000000 main.c
00000000 l    df *ABS*	00000000 sobel.c
00000000 l    df *ABS*	00000000 vga.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
000118a2 l     O .rodata	00000010 zeroes.4404
00004e80 l     F .text	000000bc __sbprintf
000118b2 l     O .rodata	00000010 blanks.4403
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
00005090 l     F .text	00000200 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
00006bc0 l     F .text	00000008 __fp_unlock
00006bd4 l     F .text	0000019c __sinit.part.1
00006d70 l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
00011f5c l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 locale.c
000123a0 l     O .rwdata	00000020 lc_ctype_charset
00012380 l     O .rwdata	00000020 lc_message_charset
000123c0 l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
000118e4 l     O .rodata	0000000c p05.2768
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 vfprintf.c
0000990c l     F .text	000000fc __sprint_r.part.0
00011a18 l     O .rodata	00000010 blanks.4348
00011a08 l     O .rodata	00000010 zeroes.4349
0000ae98 l     F .text	000000bc __sbprintf
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_close.c
0000e9a0 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
0000eaac l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
0000ead8 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
0000ebc4 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
0000eca4 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
0000ed90 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
0000ef64 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
00013630 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
0000f1e0 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
0000f314 l     F .text	00000034 alt_dev_reg
000125a0 l     O .rwdata	00001060 jtag_uart
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
0000f620 l     F .text	0000020c altera_avalon_jtag_uart_irq
0000f82c l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
0000fe64 l     F .text	00000078 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_avalon_timer_ts.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_vars.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00010314 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
00010788 l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
000108c8 l     F .text	0000003c alt_get_errno
00010904 l     F .text	000000c4 alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
00015190 g     O .bss	00000004 alt_instruction_exception_handler
00008fa4 g     F .text	00000074 _mprec_log10
00009090 g     F .text	0000008c __any_on
0000b434 g     F .text	00000054 _isatty_r
000118f0 g     O .rodata	00000028 __mprec_tinytens
0000eea0 g     F .text	0000007c alt_main
00002aac g     F .text	000000c0 _puts_r
000151bc g     O .bss	00000100 alt_irq
0000b488 g     F .text	00000060 _lseek_r
00011853 g     O .rodata	00000009 gy_array
00013640 g       *ABS*	00000000 __flash_rwdata_start
0000d4cc g     F .text	00000088 .hidden __eqdf2
000152bc g       *ABS*	00000000 __alt_heap_start
00002a70 g     F .text	0000003c printf
0000b6a0 g     F .text	0000009c _wcrtomb_r
000097cc g     F .text	0000005c __sseek
00006f10 g     F .text	00000010 __sinit
0000b548 g     F .text	00000140 __swbuf_r
000079d8 g     F .text	0000007c _setlocale_r
00006d78 g     F .text	00000068 __sfmoreglue
0000ef40 g     F .text	00000024 __malloc_unlock
00000ea4 g     F .text	00000044 LCD_Write_Command
0001513c g     O .bss	00000004 sobel_width
00015180 g     O .bss	00000004 altera_avalon_timer_ts_freq
00007e9c g     F .text	0000015c memmove
00000ee8 g     F .text	00000044 LCD_Write_Data
00006ef8 g     F .text	00000018 _cleanup
00008120 g     F .text	000000a8 _Balloc
0000d554 g     F .text	000000dc .hidden __gtdf2
00010cc0 g     F .text	00000024 altera_nios2_gen2_irq_init
00000000 g     F .entry	0000001c __reset
00000020 g       *ABS*	00000000 __flash_exceptions_start
00000764 g     F .text	0000004c cam_get_xsize
0000b3d8 g     F .text	0000005c _fstat_r
00015160 g     O .bss	00000004 errno
00009748 g     F .text	00000008 __seofread
00015174 g     O .bss	00000004 alt_argv
0001b600 g       *ABS*	00000000 _gp
0000f1b0 g     F .text	00000030 usleep
000008a4 g     F .text	000000a8 cam_set_image_pointer
00012420 g     O .rwdata	00000180 alt_fd_list
00001fec g     F .text	00000034 vga_set_pointer
00010ce4 g     F .text	00000090 alt_find_dev
00007d54 g     F .text	00000148 memcpy
00006bc8 g     F .text	0000000c _cleanup_r
0000e7b8 g     F .text	000000dc .hidden __floatsidf
0001084c g     F .text	0000007c alt_io_redirect
0000d630 g     F .text	000000f4 .hidden __ltdf2
000113e0 g       *ABS*	00000000 __DTOR_END__
00002b6c g     F .text	00000014 puts
00010fb0 g     F .text	0000009c alt_exception_cause_generated_bad_addr
00009680 g     F .text	00000074 __fpclassifyd
00008f00 g     F .text	000000a4 __ratio
0000ae7c g     F .text	0000001c __vfiprintf_internal
0000fa24 g     F .text	0000021c altera_avalon_jtag_uart_read
0000220c g     F .text	00000014 malloc
00002a40 g     F .text	00000030 _printf_r
00000c70 g     F .text	00000020 get_grayscale_picture
00002150 g     F .text	00000064 .hidden __udivsi3
00000280 g     F .text	000004e4 init_camera
00011638 g     O .rodata	00000128 lens_roll_off_tbl
0000ec00 g     F .text	000000a4 isatty
00011940 g     O .rodata	000000c8 __mprec_tens
00007a54 g     F .text	0000000c __locale_charset
00010f20 g     F .text	00000090 alt_icache_flush
0001515c g     O .bss	00000004 __malloc_top_pad
00013610 g     O .rwdata	00000004 __mb_cur_max
00007a84 g     F .text	0000000c _localeconv_r
00001a90 g     F .text	000000c8 sobel_x
0000852c g     F .text	0000003c __i2b
00007394 g     F .text	000004bc __sfvwrite_r
00000f2c g     F .text	00000240 init_LCD
00002b80 g     F .text	00000054 _sbrk_r
000007fc g     F .text	000000a8 cam_get_profiling
0000b4e8 g     F .text	00000060 _read_r
00015140 g     O .bss	00000004 sobel_result
00013628 g     O .rwdata	00000004 alt_max_fd
0000b0cc g     F .text	000000f0 _fclose_r
00006b90 g     F .text	00000030 fflush
00015158 g     O .bss	00000004 __malloc_max_sbrked_mem
00015134 g     O .bss	00000004 grayscale_array
0000c338 g     F .text	000008ac .hidden __adddf3
000007b0 g     F .text	0000004c cam_get_ysize
00008ca8 g     F .text	0000010c __b2d
0000be00 g     F .text	00000538 .hidden __umoddi3
0000edcc g     F .text	000000d4 lseek
00000d80 g     F .text	000000a0 i2c_short_read
00013608 g     O .rwdata	00000004 _global_impure_ptr
0000911c g     F .text	00000564 _realloc_r
000152bc g       *ABS*	00000000 __bss_end
00010698 g     F .text	000000f0 alt_iic_isr_register
00010bb8 g     F .text	00000108 alt_tick
0000b888 g     F .text	00000578 .hidden __udivdi3
0000b334 g     F .text	00000024 _fputwc_r
00011918 g     O .rodata	00000028 __mprec_bigtens
00008310 g     F .text	00000104 __s2b
0000e894 g     F .text	000000a8 .hidden __floatunsidf
000089e8 g     F .text	00000060 __mcmp
00006f30 g     F .text	00000018 __fp_lock_all
0001064c g     F .text	0000004c alt_ic_irq_enabled
00015130 g     O .bss	00000004 grayscape_height
00010b1c g     F .text	0000009c alt_alarm_stop
00015184 g     O .bss	00000004 alt_irq_active
000000fc g     F .exceptions	000000d4 alt_irq_handler
000123f8 g     O .rwdata	00000028 alt_dev_null
00001210 g     F .text	000000c8 transfer_LCD_with_dma
000102f4 g     F .text	00000020 alt_dcache_flush_all
00008414 g     F .text	00000068 __hi0bits
0000e738 g     F .text	00000080 .hidden __fixdfsi
00013640 g       *ABS*	00000000 __ram_rwdata_end
00013620 g     O .rwdata	00000008 alt_dev_list
0000f21c g     F .text	000000f8 write
00010050 g     F .text	00000020 alt_timestamp_freq
00011b54 g       *ABS*	00000000 __ram_rodata_end
0000eb14 g     F .text	000000b0 fstat
0000d630 g     F .text	000000f4 .hidden __ledf2
00008760 g     F .text	00000140 __pow5mult
00009a20 g     F .text	0000145c ___vfiprintf_internal_r
0001516c g     O .bss	00000004 __nlocale_changed
000021b4 g     F .text	00000058 .hidden __umodsi3
00001fac g     F .text	00000020 GetSobel_rgb
000152bc g       *ABS*	00000000 end
00001fcc g     F .text	00000020 GetSobelResult
000009ac g     F .text	00000050 take_picture_blocking
00000a84 g     F .text	00000030 DIPSW_get_value
00001d5c g     F .text	0000013c sobel_y_with_rgb
0000f560 g     F .text	000000c0 altera_avalon_jtag_uart_init
000001d0 g     F .exceptions	00000074 alt_instruction_exception_entry
00000984 g     F .text	00000028 current_image_pointer
000113e0 g       *ABS*	00000000 __CTOR_LIST__
01000000 g       *ABS*	00000000 __alt_stack_pointer
0000fedc g     F .text	0000007c alt_avalon_timer_sc_init
0000e93c g     F .text	00000064 .hidden __clzsi2
0000fc40 g     F .text	00000224 altera_avalon_jtag_uart_write
00006f20 g     F .text	00000004 __sfp_lock_acquire
00007c70 g     F .text	000000e4 memchr
00002c6c g     F .text	000021f8 ___vfprintf_internal_r
00007084 g     F .text	00000310 _free_r
00007a60 g     F .text	00000010 __locale_mb_cur_max
00001c94 g     F .text	000000c8 sobel_y
000114f8 g     O .rodata	00000140 noise_reduction_reg_settings_array
0001122c g     F .text	00000180 __call_exitprocs
00015168 g     O .bss	00000004 __mlocale_changed
00013600 g     O .rwdata	00000004 __malloc_sbrk_base
00000244 g     F .text	0000003c _start
00015188 g     O .bss	00000004 _alt_tick_rate
000088a0 g     F .text	00000148 __lshift
0001518c g     O .bss	00000004 _alt_nticks
0000efa0 g     F .text	000000fc read
0000f380 g     F .text	0000007c alt_sys_init
00001b58 g     F .text	0000013c sobel_x_with_rgb
00011114 g     F .text	00000118 __register_exitproc
00008568 g     F .text	000001f8 __multiply
0000f8cc g     F .text	00000068 altera_avalon_jtag_uart_close
00011b54 g       *ABS*	00000000 __ram_rwdata_start
000113e0 g       *ABS*	00000000 __ram_rodata_start
00015194 g     O .bss	00000028 __malloc_current_mallinfo
00008db4 g     F .text	0000014c __d2b
00015144 g     O .bss	00000004 sobel_height
000009fc g     F .text	00000030 enable_continues_mode
0000f3fc g     F .text	00000060 altera_avalon_jtag_uart_read_fd
0000181c g     F .text	00000170 init_sobel_arrays
00010e7c g     F .text	000000a4 alt_get_fd
0001019c g     F .text	00000158 alt_busy_sleep
00000000 g       *ABS*	00000000 __alt_mem_sdram_ctrl
0000afb4 g     F .text	00000054 _close_r
00011098 g     F .text	0000007c memcmp
0000f4bc g     F .text	00000050 altera_avalon_jtag_uart_close_fd
000152bc g       *ABS*	00000000 __alt_stack_base
0000f50c g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
00004f3c g     F .text	00000154 __swsetup_r
0000cbe4 g     F .text	000008e8 .hidden __divdf3
00006de0 g     F .text	00000118 __sfp
00009018 g     F .text	00000078 __copybits
00011b54 g     O .rwdata	00000408 __malloc_av_
00006f2c g     F .text	00000004 __sinit_lock_release
0000d724 g     F .text	00000718 .hidden __muldf3
000096f4 g     F .text	00000054 __sread
00010d74 g     F .text	00000108 alt_find_file
00010350 g     F .text	000000a4 alt_dev_llist_insert
0000ef1c g     F .text	00000024 __malloc_lock
0000f100 g     F .text	000000b0 sbrk
00006b34 g     F .text	0000005c _fflush_r
0000b008 g     F .text	000000c4 _calloc_r
0001512c g       *ABS*	00000000 __bss_start
00007ff8 g     F .text	00000128 memset
000012d8 g     F .text	00000544 main
00015178 g     O .bss	00000004 alt_envp
00015154 g     O .bss	00000004 __malloc_max_total_mem
00000c30 g     F .text	00000020 get_grayscale_width
0000f45c g     F .text	00000060 altera_avalon_jtag_uart_write_fd
0000b688 g     F .text	00000018 __swbuf
00015148 g     O .bss	00000004 sobel_x_result
00009828 g     F .text	00000008 __sclose
01000000 g       *ABS*	00000000 __alt_heap_limit
0000b1bc g     F .text	00000014 fclose
0000ff58 g     F .text	00000078 alt_timestamp_start
00005290 g     F .text	00001688 _dtoa_r
00002234 g     F .text	0000080c _malloc_r
0000b7fc g     F .text	00000030 __ascii_wctomb
0001362c g     O .rwdata	00000004 alt_errno
00007850 g     F .text	000000c4 _fwalk
00002058 g     F .text	00000084 .hidden __divsi3
00006f60 g     F .text	00000124 _malloc_trim_r
000113e0 g       *ABS*	00000000 __CTOR_END__
0001512c g     O .bss	00000004 grayscale_width
00009830 g     F .text	000000dc strcmp
0000116c g     F .text	000000a4 transfer_LCD_no_dma
000113e0 g       *ABS*	00000000 __flash_rodata_start
000113e0 g       *ABS*	00000000 __DTOR_LIST__
0000d4cc g     F .text	00000088 .hidden __nedf2
000113e0 g     O .rodata	00000118 preview_snapshot_mode_reg_settings_array
0000f348 g     F .text	00000038 alt_irq_init
0000f09c g     F .text	00000064 alt_release_fd
00000ccc g     F .text	000000b4 i2c_auto_detect
00011a28 g     O .rodata	00000100 .hidden __clz_tab
0000094c g     F .text	00000038 current_image_valid
00015164 g     O .bss	00000004 _PathLocale
00000c90 g     F .text	0000003c i2c_busy_wait
0001104c g     F .text	00000014 atexit
0000af54 g     F .text	00000060 _write_r
00007a90 g     F .text	00000018 setlocale
0001360c g     O .rwdata	00000004 _impure_ptr
00015170 g     O .bss	00000004 alt_argc
00006918 g     F .text	0000021c __sflush_r
0001517c g     O .bss	00000004 altera_avalon_timer_ts_base
00010454 g     F .text	00000060 _do_dtors
00007a7c g     F .text	00000008 __locale_cjk_lang
00000020 g       .exceptions	00000000 alt_irq_entry
00008c44 g     F .text	00000064 __ulp
00006f48 g     F .text	00000018 __fp_unlock_all
00013618 g     O .rwdata	00000008 alt_fs_list
0001514c g     O .bss	00000004 sobel_y_result
00000e20 g     F .text	00000084 i2c_short_write
00000020 g       *ABS*	00000000 __ram_exceptions_start
00015138 g     O .bss	00000002 LCD_height
00007aa8 g     F .text	0000000c localeconv
0000ffd0 g     F .text	00000080 alt_timestamp
00002020 g     F .text	00000038 vga_set_swap
000104e8 g     F .text	00000050 alt_ic_isr_register
00001e98 g     F .text	00000114 sobel_threshold
00013640 g       *ABS*	00000000 _edata
000152bc g       *ABS*	00000000 _end
0000b1d0 g     F .text	00000164 __fputwc
00000244 g       *ABS*	00000000 __ram_exceptions_end
0000f934 g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
0001184a g     O .rodata	00000009 gx_array
000105c0 g     F .text	0000008c alt_ic_irq_disable
00009750 g     F .text	0000007c __swrite
00013604 g     O .rwdata	00000004 __malloc_trim_threshold
0001513a g     O .bss	00000002 LCD_width
00000ab4 g     F .text	0000017c conv_grayscale
00007a70 g     F .text	0000000c __locale_msgcharset
00011060 g     F .text	00000038 exit
00007914 g     F .text	000000c4 _fwalk_reent
00008a48 g     F .text	000001fc __mdiff
000020dc g     F .text	00000074 .hidden __modsi3
01000000 g       *ABS*	00000000 __alt_data_end
00000020 g     F .exceptions	00000000 alt_exception
00006f24 g     F .text	00000004 __sfp_lock_release
00000c50 g     F .text	00000020 get_grayscale_height
000113ac g     F .text	00000034 _exit
0000198c g     F .text	00000104 sobel_mac
00010070 g     F .text	0000012c alt_alarm_start
00007ab4 g     F .text	000001bc __smakebuf_r
00015150 g     O .bss	00000004 sobel_rgb565
00002bd4 g     F .text	00000098 strlen
000109c8 g     F .text	00000154 open
0000d554 g     F .text	000000dc .hidden __gedf2
00013614 g     O .rwdata	00000004 __wctomb
00009a08 g     F .text	00000018 __sprint_r
000104b4 g     F .text	00000034 alt_icache_flush_all
00013634 g     O .rwdata	00000004 alt_priority_mask
00010538 g     F .text	00000088 alt_ic_irq_enable
00004e64 g     F .text	0000001c __vfprintf_internal
0000b82c g     F .text	0000005c _wctomb_r
0000de3c g     F .text	000008fc .hidden __subdf3
0000847c g     F .text	000000b0 __lo0bits
00013638 g     O .rwdata	00000008 alt_alarm_list
000103f4 g     F .text	00000060 _do_ctors
0000b73c g     F .text	000000c0 wcrtomb
0000e9dc g     F .text	000000d0 close
0000ed0c g     F .text	00000084 alt_load
0000b358 g     F .text	00000080 fputwc
00002220 g     F .text	00000014 free
00006f28 g     F .text	00000004 __sinit_lock_acquire
000081f0 g     F .text	00000120 __multadd
000081c8 g     F .text	00000028 _Bfree
00000a2c g     F .text	00000058 new_image_available



Disassembly of section .entry:

00000000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && (!defined(ALT_SIM_OPTIMIZE) || defined(NIOS2_ECC_PRESENT))
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
   0:	00840014 	movui	r2,4096
#endif

0:
    initi r2
   4:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
   8:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
   c:	00bffd16 	blt	zero,r2,4 <__reset+0x4>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
  10:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
  14:	08409114 	ori	at,at,580
    jmp r1
  18:	0800683a 	jmp	at
  1c:	00000000 	call	0 <__reset>

Disassembly of section .exceptions:

00000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
  20:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
  24:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
  28:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  2c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  30:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  34:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  38:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  3c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  40:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
  44:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
  48:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  4c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  50:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  54:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  58:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  5c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  60:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  64:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  68:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  6c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  70:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  74:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  78:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  7c:	10000326 	beq	r2,zero,8c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
  80:	20000226 	beq	r4,zero,8c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  84:	00000fc0 	call	fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  88:	00000706 	br	a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
  8c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
  90:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
  94:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
  98:	00001d00 	call	1d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
  9c:	1000021e 	bne	r2,zero,a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
  a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
  d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
  f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
  f8:	ef80083a 	eret

000000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
  fc:	defff904 	addi	sp,sp,-28
 100:	dfc00615 	stw	ra,24(sp)
 104:	df000515 	stw	fp,20(sp)
 108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
 10c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 110:	0005313a 	rdctl	r2,ipending
 114:	e0bffe15 	stw	r2,-8(fp)

  return active;
 118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 11c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
 120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 124:	00800044 	movi	r2,1
 128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 12c:	e0fffb17 	ldw	r3,-20(fp)
 130:	e0bffc17 	ldw	r2,-16(fp)
 134:	1884703a 	and	r2,r3,r2
 138:	10001426 	beq	r2,zero,18c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 13c:	00800074 	movhi	r2,1
 140:	10946f04 	addi	r2,r2,20924
 144:	e0fffd17 	ldw	r3,-12(fp)
 148:	180690fa 	slli	r3,r3,3
 14c:	10c5883a 	add	r2,r2,r3
 150:	10c00017 	ldw	r3,0(r2)
 154:	00800074 	movhi	r2,1
 158:	10946f04 	addi	r2,r2,20924
 15c:	e13ffd17 	ldw	r4,-12(fp)
 160:	200890fa 	slli	r4,r4,3
 164:	1105883a 	add	r2,r2,r4
 168:	10800104 	addi	r2,r2,4
 16c:	10800017 	ldw	r2,0(r2)
 170:	1009883a 	mov	r4,r2
 174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
 178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 17c:	0005313a 	rdctl	r2,ipending
 180:	e0bfff15 	stw	r2,-4(fp)

  return active;
 184:	e0bfff17 	ldw	r2,-4(fp)
 188:	00000706 	br	1a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
 18c:	e0bffc17 	ldw	r2,-16(fp)
 190:	1085883a 	add	r2,r2,r2
 194:	e0bffc15 	stw	r2,-16(fp)
      i++;
 198:	e0bffd17 	ldw	r2,-12(fp)
 19c:	10800044 	addi	r2,r2,1
 1a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 1a4:	003fe106 	br	12c <alt_irq_handler+0x30>

    active = alt_irq_pending ();
 1a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
 1ac:	e0bffb17 	ldw	r2,-20(fp)
 1b0:	103fdb1e 	bne	r2,zero,120 <alt_irq_handler+0x24>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 1b4:	0001883a 	nop
}
 1b8:	0001883a 	nop
 1bc:	e037883a 	mov	sp,fp
 1c0:	dfc00117 	ldw	ra,4(sp)
 1c4:	df000017 	ldw	fp,0(sp)
 1c8:	dec00204 	addi	sp,sp,8
 1cc:	f800283a 	ret

000001d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
 1d0:	defffb04 	addi	sp,sp,-20
 1d4:	dfc00415 	stw	ra,16(sp)
 1d8:	df000315 	stw	fp,12(sp)
 1dc:	df000304 	addi	fp,sp,12
 1e0:	e13fff15 	stw	r4,-4(fp)
 * NIOS2_EXCEPTION_CAUSE_NOT_PRESENT. Your handling routine should
 * check the validity of the cause argument before proceeding.
 */
#ifdef NIOS2_HAS_EXTRA_EXCEPTION_INFO
  /* Get exception cause & "badaddr" */
  NIOS2_READ_EXCEPTION(cause);
 1e4:	000531fa 	rdctl	r2,exception
 1e8:	e0bffd15 	stw	r2,-12(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
 1ec:	e0bffd17 	ldw	r2,-12(fp)
 1f0:	10801f0c 	andi	r2,r2,124
 1f4:	1004d0ba 	srli	r2,r2,2
 1f8:	e0bffd15 	stw	r2,-12(fp)
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
 1fc:	0005333a 	rdctl	r2,badaddr
 200:	e0bffe15 	stw	r2,-8(fp)
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
 204:	d0a6e417 	ldw	r2,-25712(gp)
 208:	10000726 	beq	r2,zero,228 <alt_instruction_exception_entry+0x58>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
 20c:	d0a6e417 	ldw	r2,-25712(gp)
 210:	e0fffd17 	ldw	r3,-12(fp)
 214:	e1bffe17 	ldw	r6,-8(fp)
 218:	e17fff17 	ldw	r5,-4(fp)
 21c:	1809883a 	mov	r4,r3
 220:	103ee83a 	callr	r2
 224:	00000206 	br	230 <alt_instruction_exception_entry+0x60>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
 228:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
 22c:	0005883a 	mov	r2,zero
}
 230:	e037883a 	mov	sp,fp
 234:	dfc00117 	ldw	ra,4(sp)
 238:	df000017 	ldw	fp,0(sp)
 23c:	dec00204 	addi	sp,sp,8
 240:	f800283a 	ret

Disassembly of section .text:

00000244 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
     244:	06c04034 	movhi	sp,256
    ori sp, sp, %lo(__alt_stack_pointer)
     248:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
     24c:	06800074 	movhi	gp,1
    ori gp, gp, %lo(_gp)
     250:	d6ad8014 	ori	gp,gp,46592
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
     254:	00800074 	movhi	r2,1
    ori r2, r2, %lo(__bss_start)
     258:	10944b14 	ori	r2,r2,20780

    movhi r3, %hi(__bss_end)
     25c:	00c00074 	movhi	r3,1
    ori r3, r3, %lo(__bss_end)
     260:	18d4af14 	ori	r3,r3,21180

    beq r2, r3, 1f
     264:	10c00326 	beq	r2,r3,274 <_start+0x30>

0:
    stw zero, (r2)
     268:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
     26c:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
     270:	10fffd36 	bltu	r2,r3,268 <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
     274:	000ed0c0 	call	ed0c <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
     278:	000eea00 	call	eea0 <alt_main>

0000027c <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
     27c:	003fff06 	br	27c <alt_after_alt_main>

00000280 <init_camera>:
#include <stdio.h>
#include "i2c.h"
#include "camera.h"
#include "mt9d112.h"

void init_camera() {
     280:	defffd04 	addi	sp,sp,-12
     284:	dfc00215 	stw	ra,8(sp)
     288:	df000115 	stw	fp,4(sp)
     28c:	df000104 	addi	fp,sp,4
	int i;
	IOWR_8DIRECT(I2C_CTRL_BASE,I2C_PRESCALE_REG,2); // Set prescaler
     290:	00c00084 	movi	r3,2
     294:	00804034 	movhi	r2,256
     298:	10842744 	addi	r2,r2,4253
     29c:	10c00025 	stbio	r3,0(r2)
	IOWR_8DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG,CAM_Reset);
     2a0:	00c00044 	movi	r3,1
     2a4:	00804034 	movhi	r2,256
     2a8:	10841304 	addi	r2,r2,4172
     2ac:	10c00025 	stbio	r3,0(r2)
	for (i=0; i < 1000000 ; i++)
     2b0:	e03fff15 	stw	zero,-4(fp)
     2b4:	00000406 	br	2c8 <init_camera+0x48>
		asm volatile ("nop");
     2b8:	0001883a 	nop

void init_camera() {
	int i;
	IOWR_8DIRECT(I2C_CTRL_BASE,I2C_PRESCALE_REG,2); // Set prescaler
	IOWR_8DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG,CAM_Reset);
	for (i=0; i < 1000000 ; i++)
     2bc:	e0bfff17 	ldw	r2,-4(fp)
     2c0:	10800044 	addi	r2,r2,1
     2c4:	e0bfff15 	stw	r2,-4(fp)
     2c8:	e0ffff17 	ldw	r3,-4(fp)
     2cc:	008003f4 	movhi	r2,15
     2d0:	10908fc4 	addi	r2,r2,16959
     2d4:	10fff80e 	bge	r2,r3,2b8 <init_camera+0x38>
		asm volatile ("nop");
	IOWR_8DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG,0);
     2d8:	0007883a 	mov	r3,zero
     2dc:	00804034 	movhi	r2,256
     2e0:	10841304 	addi	r2,r2,4172
     2e4:	10c00025 	stbio	r3,0(r2)
	for (i=0; i < 1000000 ; i++)
     2e8:	e03fff15 	stw	zero,-4(fp)
     2ec:	00000406 	br	300 <init_camera+0x80>
		asm volatile ("nop");
     2f0:	0001883a 	nop
	IOWR_8DIRECT(I2C_CTRL_BASE,I2C_PRESCALE_REG,2); // Set prescaler
	IOWR_8DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG,CAM_Reset);
	for (i=0; i < 1000000 ; i++)
		asm volatile ("nop");
	IOWR_8DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG,0);
	for (i=0; i < 1000000 ; i++)
     2f4:	e0bfff17 	ldw	r2,-4(fp)
     2f8:	10800044 	addi	r2,r2,1
     2fc:	e0bfff15 	stw	r2,-4(fp)
     300:	e0ffff17 	ldw	r3,-4(fp)
     304:	008003f4 	movhi	r2,15
     308:	10908fc4 	addi	r2,r2,16959
     30c:	10fff80e 	bge	r2,r3,2f0 <init_camera+0x70>
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,REG_MT9D112_MCU_BOOT,0x0001);
     310:	01800044 	movi	r6,1
     314:	014ce184 	movi	r5,13190
     318:	01001e04 	movi	r4,120
     31c:	0000e200 	call	e20 <i2c_short_write>
	i2c_short_write(CAM_I2C_ID,REG_MT9D112_MCU_BOOT,0x0000);
     320:	000d883a 	mov	r6,zero
     324:	014ce184 	movi	r5,13190
     328:	01001e04 	movi	r4,120
     32c:	0000e200 	call	e20 <i2c_short_write>
	for (i=0; i < 1000000 ; i++)
     330:	e03fff15 	stw	zero,-4(fp)
     334:	00000406 	br	348 <init_camera+0xc8>
		asm volatile ("nop");
     338:	0001883a 	nop
	IOWR_8DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG,0);
	for (i=0; i < 1000000 ; i++)
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,REG_MT9D112_MCU_BOOT,0x0001);
	i2c_short_write(CAM_I2C_ID,REG_MT9D112_MCU_BOOT,0x0000);
	for (i=0; i < 1000000 ; i++)
     33c:	e0bfff17 	ldw	r2,-4(fp)
     340:	10800044 	addi	r2,r2,1
     344:	e0bfff15 	stw	r2,-4(fp)
     348:	e0ffff17 	ldw	r3,-4(fp)
     34c:	008003f4 	movhi	r2,15
     350:	10908fc4 	addi	r2,r2,16959
     354:	10fff80e 	bge	r2,r3,338 <init_camera+0xb8>
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,REG_MT9D112_SENSOR_RESET,0x00C4);
     358:	01803104 	movi	r6,196
     35c:	014c0684 	movi	r5,12314
     360:	01001e04 	movi	r4,120
     364:	0000e200 	call	e20 <i2c_short_write>
	i2c_short_write(CAM_I2C_ID,REG_MT9D112_STANDBY_CONTROL,0x0008);
     368:	01800204 	movi	r6,8
     36c:	014c8084 	movi	r5,12802
     370:	01001e04 	movi	r4,120
     374:	0000e200 	call	e20 <i2c_short_write>
	i2c_short_write(CAM_I2C_ID,0x33F4,0x031D);
     378:	0180c744 	movi	r6,797
     37c:	014cfd04 	movi	r5,13300
     380:	01001e04 	movi	r4,120
     384:	0000e200 	call	e20 <i2c_short_write>
	for (i=0; i < 100000 ; i++)
     388:	e03fff15 	stw	zero,-4(fp)
     38c:	00000406 	br	3a0 <init_camera+0x120>
		asm volatile ("nop");
     390:	0001883a 	nop
	for (i=0; i < 1000000 ; i++)
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,REG_MT9D112_SENSOR_RESET,0x00C4);
	i2c_short_write(CAM_I2C_ID,REG_MT9D112_STANDBY_CONTROL,0x0008);
	i2c_short_write(CAM_I2C_ID,0x33F4,0x031D);
	for (i=0; i < 100000 ; i++)
     394:	e0bfff17 	ldw	r2,-4(fp)
     398:	10800044 	addi	r2,r2,1
     39c:	e0bfff15 	stw	r2,-4(fp)
     3a0:	e0ffff17 	ldw	r3,-4(fp)
     3a4:	008000b4 	movhi	r2,2
     3a8:	10a1a7c4 	addi	r2,r2,-31073
     3ac:	10fff80e 	bge	r2,r3,390 <init_camera+0x110>
		asm volatile ("nop");
	/* enable PLL */
	i2c_short_write(CAM_I2C_ID,REG_MT9D112_PLL_CLK_IN_CONTROL,0x8F09);
     3b0:	01a3c254 	movui	r6,36617
     3b4:	014d0784 	movi	r5,13342
     3b8:	01001e04 	movi	r4,120
     3bc:	0000e200 	call	e20 <i2c_short_write>
	i2c_short_write(CAM_I2C_ID,REG_MT9D112_PLL_DIVIDERS_1,0x0150);
     3c0:	01805404 	movi	r6,336
     3c4:	014d0704 	movi	r5,13340
     3c8:	01001e04 	movi	r4,120
     3cc:	0000e200 	call	e20 <i2c_short_write>
	i2c_short_write(CAM_I2C_ID,REG_MT9D112_PLL_CLK_IN_CONTROL,0x8F09);
     3d0:	01a3c254 	movui	r6,36617
     3d4:	014d0784 	movi	r5,13342
     3d8:	01001e04 	movi	r4,120
     3dc:	0000e200 	call	e20 <i2c_short_write>
	for (i=0; i < 100000 ; i++)
     3e0:	e03fff15 	stw	zero,-4(fp)
     3e4:	00000406 	br	3f8 <init_camera+0x178>
		asm volatile ("nop");
     3e8:	0001883a 	nop
		asm volatile ("nop");
	/* enable PLL */
	i2c_short_write(CAM_I2C_ID,REG_MT9D112_PLL_CLK_IN_CONTROL,0x8F09);
	i2c_short_write(CAM_I2C_ID,REG_MT9D112_PLL_DIVIDERS_1,0x0150);
	i2c_short_write(CAM_I2C_ID,REG_MT9D112_PLL_CLK_IN_CONTROL,0x8F09);
	for (i=0; i < 100000 ; i++)
     3ec:	e0bfff17 	ldw	r2,-4(fp)
     3f0:	10800044 	addi	r2,r2,1
     3f4:	e0bfff15 	stw	r2,-4(fp)
     3f8:	e0ffff17 	ldw	r3,-4(fp)
     3fc:	008000b4 	movhi	r2,2
     400:	10a1a7c4 	addi	r2,r2,-31073
     404:	10fff80e 	bge	r2,r3,3e8 <init_camera+0x168>
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,REG_MT9D112_PLL_CLK_IN_CONTROL,0x8F08);
     408:	01a3c214 	movui	r6,36616
     40c:	014d0784 	movi	r5,13342
     410:	01001e04 	movi	r4,120
     414:	0000e200 	call	e20 <i2c_short_write>
	/* Set regs */
	for (i = 0 ; i < (sizeof(preview_snapshot_mode_reg_settings_array)/4); i++) {
     418:	e03fff15 	stw	zero,-4(fp)
     41c:	00001806 	br	480 <init_camera+0x200>
		i2c_short_write(CAM_I2C_ID,
				preview_snapshot_mode_reg_settings_array[i][0],
     420:	00800074 	movhi	r2,1
     424:	1084f804 	addi	r2,r2,5088
     428:	e0ffff17 	ldw	r3,-4(fp)
     42c:	18c7883a 	add	r3,r3,r3
     430:	18c7883a 	add	r3,r3,r3
     434:	10c5883a 	add	r2,r2,r3
     438:	1080000b 	ldhu	r2,0(r2)
	for (i=0; i < 100000 ; i++)
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,REG_MT9D112_PLL_CLK_IN_CONTROL,0x8F08);
	/* Set regs */
	for (i = 0 ; i < (sizeof(preview_snapshot_mode_reg_settings_array)/4); i++) {
		i2c_short_write(CAM_I2C_ID,
     43c:	113fffcc 	andi	r4,r2,65535
				preview_snapshot_mode_reg_settings_array[i][0],
				preview_snapshot_mode_reg_settings_array[i][1]);
     440:	00800074 	movhi	r2,1
     444:	1084f804 	addi	r2,r2,5088
     448:	e0ffff17 	ldw	r3,-4(fp)
     44c:	18c7883a 	add	r3,r3,r3
     450:	18c7883a 	add	r3,r3,r3
     454:	10c5883a 	add	r2,r2,r3
     458:	10800084 	addi	r2,r2,2
     45c:	1080000b 	ldhu	r2,0(r2)
	for (i=0; i < 100000 ; i++)
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,REG_MT9D112_PLL_CLK_IN_CONTROL,0x8F08);
	/* Set regs */
	for (i = 0 ; i < (sizeof(preview_snapshot_mode_reg_settings_array)/4); i++) {
		i2c_short_write(CAM_I2C_ID,
     460:	10bfffcc 	andi	r2,r2,65535
     464:	100d883a 	mov	r6,r2
     468:	200b883a 	mov	r5,r4
     46c:	01001e04 	movi	r4,120
     470:	0000e200 	call	e20 <i2c_short_write>
	i2c_short_write(CAM_I2C_ID,REG_MT9D112_PLL_CLK_IN_CONTROL,0x8F09);
	for (i=0; i < 100000 ; i++)
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,REG_MT9D112_PLL_CLK_IN_CONTROL,0x8F08);
	/* Set regs */
	for (i = 0 ; i < (sizeof(preview_snapshot_mode_reg_settings_array)/4); i++) {
     474:	e0bfff17 	ldw	r2,-4(fp)
     478:	10800044 	addi	r2,r2,1
     47c:	e0bfff15 	stw	r2,-4(fp)
     480:	e0bfff17 	ldw	r2,-4(fp)
     484:	108011b0 	cmpltui	r2,r2,70
     488:	103fe51e 	bne	r2,zero,420 <init_camera+0x1a0>
		i2c_short_write(CAM_I2C_ID,
				preview_snapshot_mode_reg_settings_array[i][0],
				preview_snapshot_mode_reg_settings_array[i][1]);
	}
	for (i = 0 ; i < (sizeof(noise_reduction_reg_settings_array)/4); i++) {
     48c:	e03fff15 	stw	zero,-4(fp)
     490:	00001806 	br	4f4 <init_camera+0x274>
		i2c_short_write(CAM_I2C_ID,
				noise_reduction_reg_settings_array[i][0],
     494:	00800074 	movhi	r2,1
     498:	10853e04 	addi	r2,r2,5368
     49c:	e0ffff17 	ldw	r3,-4(fp)
     4a0:	18c7883a 	add	r3,r3,r3
     4a4:	18c7883a 	add	r3,r3,r3
     4a8:	10c5883a 	add	r2,r2,r3
     4ac:	1080000b 	ldhu	r2,0(r2)
		i2c_short_write(CAM_I2C_ID,
				preview_snapshot_mode_reg_settings_array[i][0],
				preview_snapshot_mode_reg_settings_array[i][1]);
	}
	for (i = 0 ; i < (sizeof(noise_reduction_reg_settings_array)/4); i++) {
		i2c_short_write(CAM_I2C_ID,
     4b0:	113fffcc 	andi	r4,r2,65535
				noise_reduction_reg_settings_array[i][0],
				noise_reduction_reg_settings_array[i][1]);
     4b4:	00800074 	movhi	r2,1
     4b8:	10853e04 	addi	r2,r2,5368
     4bc:	e0ffff17 	ldw	r3,-4(fp)
     4c0:	18c7883a 	add	r3,r3,r3
     4c4:	18c7883a 	add	r3,r3,r3
     4c8:	10c5883a 	add	r2,r2,r3
     4cc:	10800084 	addi	r2,r2,2
     4d0:	1080000b 	ldhu	r2,0(r2)
		i2c_short_write(CAM_I2C_ID,
				preview_snapshot_mode_reg_settings_array[i][0],
				preview_snapshot_mode_reg_settings_array[i][1]);
	}
	for (i = 0 ; i < (sizeof(noise_reduction_reg_settings_array)/4); i++) {
		i2c_short_write(CAM_I2C_ID,
     4d4:	10bfffcc 	andi	r2,r2,65535
     4d8:	100d883a 	mov	r6,r2
     4dc:	200b883a 	mov	r5,r4
     4e0:	01001e04 	movi	r4,120
     4e4:	0000e200 	call	e20 <i2c_short_write>
	for (i = 0 ; i < (sizeof(preview_snapshot_mode_reg_settings_array)/4); i++) {
		i2c_short_write(CAM_I2C_ID,
				preview_snapshot_mode_reg_settings_array[i][0],
				preview_snapshot_mode_reg_settings_array[i][1]);
	}
	for (i = 0 ; i < (sizeof(noise_reduction_reg_settings_array)/4); i++) {
     4e8:	e0bfff17 	ldw	r2,-4(fp)
     4ec:	10800044 	addi	r2,r2,1
     4f0:	e0bfff15 	stw	r2,-4(fp)
     4f4:	e0bfff17 	ldw	r2,-4(fp)
     4f8:	10801430 	cmpltui	r2,r2,80
     4fc:	103fe51e 	bne	r2,zero,494 <init_camera+0x214>
		i2c_short_write(CAM_I2C_ID,
				noise_reduction_reg_settings_array[i][0],
				noise_reduction_reg_settings_array[i][1]);
	}
	i2c_short_write(CAM_I2C_ID,0x35A4,0x0593);
     500:	018164c4 	movi	r6,1427
     504:	014d6904 	movi	r5,13732
     508:	01001e04 	movi	r4,120
     50c:	0000e200 	call	e20 <i2c_short_write>
// sequencer table
	i2c_short_write(CAM_I2C_ID,0x338C,0x2799);
     510:	0189e644 	movi	r6,10137
     514:	014ce304 	movi	r5,13196
     518:	01001e04 	movi	r4,120
     51c:	0000e200 	call	e20 <i2c_short_write>
	i2c_short_write(CAM_I2C_ID,0x3390,0x6440);
     520:	01991004 	movi	r6,25664
     524:	014ce404 	movi	r5,13200
     528:	01001e04 	movi	r4,120
     52c:	0000e200 	call	e20 <i2c_short_write>
	for (i=0; i < 100000 ; i++)
     530:	e03fff15 	stw	zero,-4(fp)
     534:	00000406 	br	548 <init_camera+0x2c8>
		asm volatile ("nop");
     538:	0001883a 	nop
	}
	i2c_short_write(CAM_I2C_ID,0x35A4,0x0593);
// sequencer table
	i2c_short_write(CAM_I2C_ID,0x338C,0x2799);
	i2c_short_write(CAM_I2C_ID,0x3390,0x6440);
	for (i=0; i < 100000 ; i++)
     53c:	e0bfff17 	ldw	r2,-4(fp)
     540:	10800044 	addi	r2,r2,1
     544:	e0bfff15 	stw	r2,-4(fp)
     548:	e0ffff17 	ldw	r3,-4(fp)
     54c:	008000b4 	movhi	r2,2
     550:	10a1a7c4 	addi	r2,r2,-31073
     554:	10fff80e 	bge	r2,r3,538 <init_camera+0x2b8>
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,0x338C,0x279B);
     558:	0189e6c4 	movi	r6,10139
     55c:	014ce304 	movi	r5,13196
     560:	01001e04 	movi	r4,120
     564:	0000e200 	call	e20 <i2c_short_write>
	i2c_short_write(CAM_I2C_ID,0x3390,0x6440);
     568:	01991004 	movi	r6,25664
     56c:	014ce404 	movi	r5,13200
     570:	01001e04 	movi	r4,120
     574:	0000e200 	call	e20 <i2c_short_write>
	for (i=0; i < 100000 ; i++)
     578:	e03fff15 	stw	zero,-4(fp)
     57c:	00000406 	br	590 <init_camera+0x310>
		asm volatile ("nop");
     580:	0001883a 	nop
	i2c_short_write(CAM_I2C_ID,0x3390,0x6440);
	for (i=0; i < 100000 ; i++)
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,0x338C,0x279B);
	i2c_short_write(CAM_I2C_ID,0x3390,0x6440);
	for (i=0; i < 100000 ; i++)
     584:	e0bfff17 	ldw	r2,-4(fp)
     588:	10800044 	addi	r2,r2,1
     58c:	e0bfff15 	stw	r2,-4(fp)
     590:	e0ffff17 	ldw	r3,-4(fp)
     594:	008000b4 	movhi	r2,2
     598:	10a1a7c4 	addi	r2,r2,-31073
     59c:	10fff80e 	bge	r2,r3,580 <init_camera+0x300>
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,0x338C,0xA103);
     5a0:	01a840d4 	movui	r6,41219
     5a4:	014ce304 	movi	r5,13196
     5a8:	01001e04 	movi	r4,120
     5ac:	0000e200 	call	e20 <i2c_short_write>
	i2c_short_write(CAM_I2C_ID,0x3390,0x0005);
     5b0:	01800144 	movi	r6,5
     5b4:	014ce404 	movi	r5,13200
     5b8:	01001e04 	movi	r4,120
     5bc:	0000e200 	call	e20 <i2c_short_write>
	for (i=0; i < 100000 ; i++)
     5c0:	e03fff15 	stw	zero,-4(fp)
     5c4:	00000406 	br	5d8 <init_camera+0x358>
		asm volatile ("nop");
     5c8:	0001883a 	nop
	i2c_short_write(CAM_I2C_ID,0x3390,0x6440);
	for (i=0; i < 100000 ; i++)
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,0x338C,0xA103);
	i2c_short_write(CAM_I2C_ID,0x3390,0x0005);
	for (i=0; i < 100000 ; i++)
     5cc:	e0bfff17 	ldw	r2,-4(fp)
     5d0:	10800044 	addi	r2,r2,1
     5d4:	e0bfff15 	stw	r2,-4(fp)
     5d8:	e0ffff17 	ldw	r3,-4(fp)
     5dc:	008000b4 	movhi	r2,2
     5e0:	10a1a7c4 	addi	r2,r2,-31073
     5e4:	10fff80e 	bge	r2,r3,5c8 <init_camera+0x348>
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,0x338C,0xA103);
     5e8:	01a840d4 	movui	r6,41219
     5ec:	014ce304 	movi	r5,13196
     5f0:	01001e04 	movi	r4,120
     5f4:	0000e200 	call	e20 <i2c_short_write>
	i2c_short_write(CAM_I2C_ID,0x3390,0x0006);
     5f8:	01800184 	movi	r6,6
     5fc:	014ce404 	movi	r5,13200
     600:	01001e04 	movi	r4,120
     604:	0000e200 	call	e20 <i2c_short_write>
	for (i=0; i < 100000 ; i++)
     608:	e03fff15 	stw	zero,-4(fp)
     60c:	00000406 	br	620 <init_camera+0x3a0>
		asm volatile ("nop");
     610:	0001883a 	nop
	i2c_short_write(CAM_I2C_ID,0x3390,0x0005);
	for (i=0; i < 100000 ; i++)
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,0x338C,0xA103);
	i2c_short_write(CAM_I2C_ID,0x3390,0x0006);
	for (i=0; i < 100000 ; i++)
     614:	e0bfff17 	ldw	r2,-4(fp)
     618:	10800044 	addi	r2,r2,1
     61c:	e0bfff15 	stw	r2,-4(fp)
     620:	e0ffff17 	ldw	r3,-4(fp)
     624:	008000b4 	movhi	r2,2
     628:	10a1a7c4 	addi	r2,r2,-31073
     62c:	10fff80e 	bge	r2,r3,610 <init_camera+0x390>
		asm volatile ("nop");
	for (i = 0 ; i < (sizeof(lens_roll_off_tbl)/4); i++) {
     630:	e03fff15 	stw	zero,-4(fp)
     634:	00001806 	br	698 <init_camera+0x418>
		i2c_short_write(CAM_I2C_ID,
				lens_roll_off_tbl[i][0],
     638:	00800074 	movhi	r2,1
     63c:	10858e04 	addi	r2,r2,5688
     640:	e0ffff17 	ldw	r3,-4(fp)
     644:	18c7883a 	add	r3,r3,r3
     648:	18c7883a 	add	r3,r3,r3
     64c:	10c5883a 	add	r2,r2,r3
     650:	1080000b 	ldhu	r2,0(r2)
	i2c_short_write(CAM_I2C_ID,0x338C,0xA103);
	i2c_short_write(CAM_I2C_ID,0x3390,0x0006);
	for (i=0; i < 100000 ; i++)
		asm volatile ("nop");
	for (i = 0 ; i < (sizeof(lens_roll_off_tbl)/4); i++) {
		i2c_short_write(CAM_I2C_ID,
     654:	113fffcc 	andi	r4,r2,65535
				lens_roll_off_tbl[i][0],
				lens_roll_off_tbl[i][1]);
     658:	00800074 	movhi	r2,1
     65c:	10858e04 	addi	r2,r2,5688
     660:	e0ffff17 	ldw	r3,-4(fp)
     664:	18c7883a 	add	r3,r3,r3
     668:	18c7883a 	add	r3,r3,r3
     66c:	10c5883a 	add	r2,r2,r3
     670:	10800084 	addi	r2,r2,2
     674:	1080000b 	ldhu	r2,0(r2)
	i2c_short_write(CAM_I2C_ID,0x338C,0xA103);
	i2c_short_write(CAM_I2C_ID,0x3390,0x0006);
	for (i=0; i < 100000 ; i++)
		asm volatile ("nop");
	for (i = 0 ; i < (sizeof(lens_roll_off_tbl)/4); i++) {
		i2c_short_write(CAM_I2C_ID,
     678:	10bfffcc 	andi	r2,r2,65535
     67c:	100d883a 	mov	r6,r2
     680:	200b883a 	mov	r5,r4
     684:	01001e04 	movi	r4,120
     688:	0000e200 	call	e20 <i2c_short_write>
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,0x338C,0xA103);
	i2c_short_write(CAM_I2C_ID,0x3390,0x0006);
	for (i=0; i < 100000 ; i++)
		asm volatile ("nop");
	for (i = 0 ; i < (sizeof(lens_roll_off_tbl)/4); i++) {
     68c:	e0bfff17 	ldw	r2,-4(fp)
     690:	10800044 	addi	r2,r2,1
     694:	e0bfff15 	stw	r2,-4(fp)
     698:	e0bfff17 	ldw	r2,-4(fp)
     69c:	108012b0 	cmpltui	r2,r2,74
     6a0:	103fe51e 	bne	r2,zero,638 <init_camera+0x3b8>
		i2c_short_write(CAM_I2C_ID,
				lens_roll_off_tbl[i][0],
				lens_roll_off_tbl[i][1]);
	}
	for (i=0; i < 1000000 ; i++)
     6a4:	e03fff15 	stw	zero,-4(fp)
     6a8:	00000406 	br	6bc <init_camera+0x43c>
		asm volatile ("nop");
     6ac:	0001883a 	nop
	for (i = 0 ; i < (sizeof(lens_roll_off_tbl)/4); i++) {
		i2c_short_write(CAM_I2C_ID,
				lens_roll_off_tbl[i][0],
				lens_roll_off_tbl[i][1]);
	}
	for (i=0; i < 1000000 ; i++)
     6b0:	e0bfff17 	ldw	r2,-4(fp)
     6b4:	10800044 	addi	r2,r2,1
     6b8:	e0bfff15 	stw	r2,-4(fp)
     6bc:	e0ffff17 	ldw	r3,-4(fp)
     6c0:	008003f4 	movhi	r2,15
     6c4:	10908fc4 	addi	r2,r2,16959
     6c8:	10fff80e 	bge	r2,r3,6ac <init_camera+0x42c>
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,0x332E,0x0020);
     6cc:	01800804 	movi	r6,32
     6d0:	014ccb84 	movi	r5,13102
     6d4:	01001e04 	movi	r4,120
     6d8:	0000e200 	call	e20 <i2c_short_write>
	for (i=0; i < 1000000 ; i++)
     6dc:	e03fff15 	stw	zero,-4(fp)
     6e0:	00000406 	br	6f4 <init_camera+0x474>
		asm volatile ("nop");
     6e4:	0001883a 	nop
				lens_roll_off_tbl[i][1]);
	}
	for (i=0; i < 1000000 ; i++)
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,0x332E,0x0020);
	for (i=0; i < 1000000 ; i++)
     6e8:	e0bfff17 	ldw	r2,-4(fp)
     6ec:	10800044 	addi	r2,r2,1
     6f0:	e0bfff15 	stw	r2,-4(fp)
     6f4:	e0ffff17 	ldw	r3,-4(fp)
     6f8:	008003f4 	movhi	r2,15
     6fc:	10908fc4 	addi	r2,r2,16959
     700:	10fff80e 	bge	r2,r3,6e4 <init_camera+0x464>
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,0x3404,0x0022); /* set RGB565 mode */
     704:	01800884 	movi	r6,34
     708:	014d0104 	movi	r5,13316
     70c:	01001e04 	movi	r4,120
     710:	0000e200 	call	e20 <i2c_short_write>
	for (i=0; i < 1000000 ; i++)
     714:	e03fff15 	stw	zero,-4(fp)
     718:	00000406 	br	72c <init_camera+0x4ac>
		asm volatile ("nop");
     71c:	0001883a 	nop
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,0x332E,0x0020);
	for (i=0; i < 1000000 ; i++)
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,0x3404,0x0022); /* set RGB565 mode */
	for (i=0; i < 1000000 ; i++)
     720:	e0bfff17 	ldw	r2,-4(fp)
     724:	10800044 	addi	r2,r2,1
     728:	e0bfff15 	stw	r2,-4(fp)
     72c:	e0ffff17 	ldw	r3,-4(fp)
     730:	008003f4 	movhi	r2,15
     734:	10908fc4 	addi	r2,r2,16959
     738:	10fff80e 	bge	r2,r3,71c <init_camera+0x49c>
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,0x3040,0x0027); /* mirror */
     73c:	018009c4 	movi	r6,39
     740:	014c1004 	movi	r5,12352
     744:	01001e04 	movi	r4,120
     748:	0000e200 	call	e20 <i2c_short_write>
}
     74c:	0001883a 	nop
     750:	e037883a 	mov	sp,fp
     754:	dfc00117 	ldw	ra,4(sp)
     758:	df000017 	ldw	fp,0(sp)
     75c:	dec00204 	addi	sp,sp,8
     760:	f800283a 	ret

00000764 <cam_get_xsize>:

unsigned short cam_get_xsize(){
     764:	defffe04 	addi	sp,sp,-8
     768:	df000115 	stw	fp,4(sp)
     76c:	df000104 	addi	fp,sp,4
	unsigned char control_reg;
	do {
		control_reg = IORD_8DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG);
     770:	00804034 	movhi	r2,256
     774:	10841304 	addi	r2,r2,4172
     778:	10800023 	ldbuio	r2,0(r2)
     77c:	10803fcc 	andi	r2,r2,255
     780:	e0bfff05 	stb	r2,-4(fp)
	} while ((control_reg&CAM_Profile_valid)==0);
     784:	e0bfff03 	ldbu	r2,-4(fp)
     788:	1080010c 	andi	r2,r2,4
     78c:	103ff826 	beq	r2,zero,770 <cam_get_xsize+0xc>
	return IORD_16DIRECT(CAM_CTRL_BASE,CAM_BYTES_EACH_LINE_REG);
     790:	00804034 	movhi	r2,256
     794:	10841004 	addi	r2,r2,4160
     798:	1080002b 	ldhuio	r2,0(r2)
     79c:	10bfffcc 	andi	r2,r2,65535
}
     7a0:	e037883a 	mov	sp,fp
     7a4:	df000017 	ldw	fp,0(sp)
     7a8:	dec00104 	addi	sp,sp,4
     7ac:	f800283a 	ret

000007b0 <cam_get_ysize>:

unsigned short cam_get_ysize() {
     7b0:	defffe04 	addi	sp,sp,-8
     7b4:	df000115 	stw	fp,4(sp)
     7b8:	df000104 	addi	fp,sp,4
	unsigned char control_reg;
	do {
		control_reg = IORD_8DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG);
     7bc:	00804034 	movhi	r2,256
     7c0:	10841304 	addi	r2,r2,4172
     7c4:	10800023 	ldbuio	r2,0(r2)
     7c8:	10803fcc 	andi	r2,r2,255
     7cc:	e0bfff05 	stb	r2,-4(fp)
	} while ((control_reg&CAM_Profile_valid)==0);
     7d0:	e0bfff03 	ldbu	r2,-4(fp)
     7d4:	1080010c 	andi	r2,r2,4
     7d8:	103ff826 	beq	r2,zero,7bc <cam_get_ysize+0xc>
	return IORD_16DIRECT(CAM_CTRL_BASE,CAM_LINES_EACH_FRAME_REG);
     7dc:	00804034 	movhi	r2,256
     7e0:	10841104 	addi	r2,r2,4164
     7e4:	1080002b 	ldhuio	r2,0(r2)
     7e8:	10bfffcc 	andi	r2,r2,65535
}
     7ec:	e037883a 	mov	sp,fp
     7f0:	df000017 	ldw	fp,0(sp)
     7f4:	dec00104 	addi	sp,sp,4
     7f8:	f800283a 	ret

000007fc <cam_get_profiling>:

void cam_get_profiling() {
     7fc:	defffd04 	addi	sp,sp,-12
     800:	dfc00215 	stw	ra,8(sp)
     804:	df000115 	stw	fp,4(sp)
     808:	df000104 	addi	fp,sp,4
	unsigned char control_reg;
	do {
		control_reg = IORD_8DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG);
     80c:	00804034 	movhi	r2,256
     810:	10841304 	addi	r2,r2,4172
     814:	10800023 	ldbuio	r2,0(r2)
     818:	10803fcc 	andi	r2,r2,255
     81c:	e0bfff05 	stb	r2,-4(fp)
	} while ((control_reg&CAM_Profile_valid)==0);
     820:	e0bfff03 	ldbu	r2,-4(fp)
     824:	1080010c 	andi	r2,r2,4
     828:	103ff826 	beq	r2,zero,80c <cam_get_profiling+0x10>
	printf("Nr. of bytes each line    : %d\n",
     82c:	00804034 	movhi	r2,256
     830:	10841004 	addi	r2,r2,4160
     834:	1080002b 	ldhuio	r2,0(r2)
     838:	10bfffcc 	andi	r2,r2,65535
     83c:	100b883a 	mov	r5,r2
     840:	01000074 	movhi	r4,1
     844:	2105d804 	addi	r4,r4,5984
     848:	0002a700 	call	2a70 <printf>
			IORD_16DIRECT(CAM_CTRL_BASE,CAM_BYTES_EACH_LINE_REG));
	printf("Nr. of lines each frame   : %d\n",
     84c:	00804034 	movhi	r2,256
     850:	10841104 	addi	r2,r2,4164
     854:	1080002b 	ldhuio	r2,0(r2)
     858:	10bfffcc 	andi	r2,r2,65535
     85c:	100b883a 	mov	r5,r2
     860:	01000074 	movhi	r4,1
     864:	2105e004 	addi	r4,r4,6016
     868:	0002a700 	call	2a70 <printf>
			IORD_16DIRECT(CAM_CTRL_BASE,CAM_LINES_EACH_FRAME_REG));
	printf("Nr. of frames each second : %d\n",
     86c:	00804034 	movhi	r2,256
     870:	10841204 	addi	r2,r2,4168
     874:	1080002b 	ldhuio	r2,0(r2)
     878:	10bfffcc 	andi	r2,r2,65535
     87c:	100b883a 	mov	r5,r2
     880:	01000074 	movhi	r4,1
     884:	2105e804 	addi	r4,r4,6048
     888:	0002a700 	call	2a70 <printf>
			IORD_16DIRECT(CAM_CTRL_BASE,CAM_FRAME_RATE_REG));
}
     88c:	0001883a 	nop
     890:	e037883a 	mov	sp,fp
     894:	dfc00117 	ldw	ra,4(sp)
     898:	df000017 	ldw	fp,0(sp)
     89c:	dec00204 	addi	sp,sp,8
     8a0:	f800283a 	ret

000008a4 <cam_set_image_pointer>:

void cam_set_image_pointer(char pointer_id,
		                   void *memory_pointer) {
     8a4:	defffd04 	addi	sp,sp,-12
     8a8:	df000215 	stw	fp,8(sp)
     8ac:	df000204 	addi	fp,sp,8
     8b0:	2005883a 	mov	r2,r4
     8b4:	e17fff15 	stw	r5,-4(fp)
     8b8:	e0bffe05 	stb	r2,-8(fp)
	switch (pointer_id) {
     8bc:	e0bffe07 	ldb	r2,-8(fp)
     8c0:	10c00060 	cmpeqi	r3,r2,1
     8c4:	18000e1e 	bne	r3,zero,900 <cam_set_image_pointer+0x5c>
     8c8:	10c00088 	cmpgei	r3,r2,2
     8cc:	1800021e 	bne	r3,zero,8d8 <cam_set_image_pointer+0x34>
     8d0:	10000626 	beq	r2,zero,8ec <cam_set_image_pointer+0x48>
                break;
	   case 2 : IOWR_32DIRECT(CAM_CTRL_BASE,CAM_ADDR_PNTR_3,(int)memory_pointer);
                break;
	   case 3 : IOWR_32DIRECT(CAM_CTRL_BASE,CAM_ADDR_PNTR_4,(int)memory_pointer);
                break;
	   default: return;
     8d4:	00001906 	br	93c <cam_set_image_pointer+0x98>
			IORD_16DIRECT(CAM_CTRL_BASE,CAM_FRAME_RATE_REG));
}

void cam_set_image_pointer(char pointer_id,
		                   void *memory_pointer) {
	switch (pointer_id) {
     8d8:	10c000a0 	cmpeqi	r3,r2,2
     8dc:	18000d1e 	bne	r3,zero,914 <cam_set_image_pointer+0x70>
     8e0:	108000e0 	cmpeqi	r2,r2,3
     8e4:	1000101e 	bne	r2,zero,928 <cam_set_image_pointer+0x84>
                break;
	   case 2 : IOWR_32DIRECT(CAM_CTRL_BASE,CAM_ADDR_PNTR_3,(int)memory_pointer);
                break;
	   case 3 : IOWR_32DIRECT(CAM_CTRL_BASE,CAM_ADDR_PNTR_4,(int)memory_pointer);
                break;
	   default: return;
     8e8:	00001406 	br	93c <cam_set_image_pointer+0x98>
}

void cam_set_image_pointer(char pointer_id,
		                   void *memory_pointer) {
	switch (pointer_id) {
	   case 0 : IOWR_32DIRECT(CAM_CTRL_BASE,CAM_ADDR_PNTR_1,(int)memory_pointer);
     8ec:	e0ffff17 	ldw	r3,-4(fp)
     8f0:	00804034 	movhi	r2,256
     8f4:	10841404 	addi	r2,r2,4176
     8f8:	10c00035 	stwio	r3,0(r2)
	            break;
     8fc:	00000f06 	br	93c <cam_set_image_pointer+0x98>
	   case 1 : IOWR_32DIRECT(CAM_CTRL_BASE,CAM_ADDR_PNTR_2,(int)memory_pointer);
     900:	e0ffff17 	ldw	r3,-4(fp)
     904:	00804034 	movhi	r2,256
     908:	10841504 	addi	r2,r2,4180
     90c:	10c00035 	stwio	r3,0(r2)
                break;
     910:	00000a06 	br	93c <cam_set_image_pointer+0x98>
	   case 2 : IOWR_32DIRECT(CAM_CTRL_BASE,CAM_ADDR_PNTR_3,(int)memory_pointer);
     914:	e0ffff17 	ldw	r3,-4(fp)
     918:	00804034 	movhi	r2,256
     91c:	10841604 	addi	r2,r2,4184
     920:	10c00035 	stwio	r3,0(r2)
                break;
     924:	00000506 	br	93c <cam_set_image_pointer+0x98>
	   case 3 : IOWR_32DIRECT(CAM_CTRL_BASE,CAM_ADDR_PNTR_4,(int)memory_pointer);
     928:	e0ffff17 	ldw	r3,-4(fp)
     92c:	00804034 	movhi	r2,256
     930:	10841704 	addi	r2,r2,4188
     934:	10c00035 	stwio	r3,0(r2)
                break;
     938:	0001883a 	nop
	   default: return;
	}
}
     93c:	e037883a 	mov	sp,fp
     940:	df000017 	ldw	fp,0(sp)
     944:	dec00104 	addi	sp,sp,4
     948:	f800283a 	ret

0000094c <current_image_valid>:

short current_image_valid() {
     94c:	defffe04 	addi	sp,sp,-8
     950:	df000115 	stw	fp,4(sp)
     954:	df000104 	addi	fp,sp,4
	unsigned short value;
	value = IORD_16DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG);
     958:	00804034 	movhi	r2,256
     95c:	10841304 	addi	r2,r2,4172
     960:	1080002b 	ldhuio	r2,0(r2)
     964:	10bfffcc 	andi	r2,r2,65535
     968:	e0bfff0d 	sth	r2,-4(fp)
	return (value&CAM_Current_Image_Valid);
     96c:	e0bfff0b 	ldhu	r2,-4(fp)
     970:	1080800c 	andi	r2,r2,512
}
     974:	e037883a 	mov	sp,fp
     978:	df000017 	ldw	fp,0(sp)
     97c:	dec00104 	addi	sp,sp,4
     980:	f800283a 	ret

00000984 <current_image_pointer>:

void *current_image_pointer() {
     984:	deffff04 	addi	sp,sp,-4
     988:	df000015 	stw	fp,0(sp)
     98c:	d839883a 	mov	fp,sp
	return (void *)IORD_32DIRECT(CAM_CTRL_BASE,CAM_ADDR_PNTR_1);
     990:	00804034 	movhi	r2,256
     994:	10841404 	addi	r2,r2,4176
     998:	10800037 	ldwio	r2,0(r2)
}
     99c:	e037883a 	mov	sp,fp
     9a0:	df000017 	ldw	fp,0(sp)
     9a4:	dec00104 	addi	sp,sp,4
     9a8:	f800283a 	ret

000009ac <take_picture_blocking>:

void take_picture_blocking() {
     9ac:	defffe04 	addi	sp,sp,-8
     9b0:	df000115 	stw	fp,4(sp)
     9b4:	df000104 	addi	fp,sp,4
	unsigned short value;
	IOWR_16DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG,CAM_Take_Picture);
     9b8:	00c00204 	movi	r3,8
     9bc:	00804034 	movhi	r2,256
     9c0:	10841304 	addi	r2,r2,4172
     9c4:	10c0002d 	sthio	r3,0(r2)
	do {
		value = IORD_16DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG);
     9c8:	00804034 	movhi	r2,256
     9cc:	10841304 	addi	r2,r2,4172
     9d0:	1080002b 	ldhuio	r2,0(r2)
     9d4:	10bfffcc 	andi	r2,r2,65535
     9d8:	e0bfff0d 	sth	r2,-4(fp)
	} while ((value&CAM_Busy)!= 0);
     9dc:	e0bfff0b 	ldhu	r2,-4(fp)
     9e0:	1080020c 	andi	r2,r2,8
     9e4:	103ff81e 	bne	r2,zero,9c8 <take_picture_blocking+0x1c>
}
     9e8:	0001883a 	nop
     9ec:	e037883a 	mov	sp,fp
     9f0:	df000017 	ldw	fp,0(sp)
     9f4:	dec00104 	addi	sp,sp,4
     9f8:	f800283a 	ret

000009fc <enable_continues_mode>:

void enable_continues_mode() {
     9fc:	deffff04 	addi	sp,sp,-4
     a00:	df000015 	stw	fp,0(sp)
     a04:	d839883a 	mov	fp,sp
	IOWR_16DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG,CAM_Start_Continues);
     a08:	00c00404 	movi	r3,16
     a0c:	00804034 	movhi	r2,256
     a10:	10841304 	addi	r2,r2,4172
     a14:	10c0002d 	sthio	r3,0(r2)
}
     a18:	0001883a 	nop
     a1c:	e037883a 	mov	sp,fp
     a20:	df000017 	ldw	fp,0(sp)
     a24:	dec00104 	addi	sp,sp,4
     a28:	f800283a 	ret

00000a2c <new_image_available>:

char new_image_available() {
     a2c:	defffe04 	addi	sp,sp,-8
     a30:	df000115 	stw	fp,4(sp)
     a34:	df000104 	addi	fp,sp,4
	unsigned short value;
	value = IORD_16DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG);
     a38:	00804034 	movhi	r2,256
     a3c:	10841304 	addi	r2,r2,4172
     a40:	1080002b 	ldhuio	r2,0(r2)
     a44:	10bfffcc 	andi	r2,r2,65535
     a48:	e0bfff0d 	sth	r2,-4(fp)
	if ((value&CAM_IRQ_Generated)!=0) {
     a4c:	e0bfff0b 	ldhu	r2,-4(fp)
     a50:	1080200c 	andi	r2,r2,128
     a54:	10000626 	beq	r2,zero,a70 <new_image_available+0x44>
		IOWR_16DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG,CAM_Clear_IRQ);
     a58:	00c04004 	movi	r3,256
     a5c:	00804034 	movhi	r2,256
     a60:	10841304 	addi	r2,r2,4172
     a64:	10c0002d 	sthio	r3,0(r2)
		return 1;
     a68:	00800044 	movi	r2,1
     a6c:	00000106 	br	a74 <new_image_available+0x48>
	} else return 0;
     a70:	0005883a 	mov	r2,zero
}
     a74:	e037883a 	mov	sp,fp
     a78:	df000017 	ldw	fp,0(sp)
     a7c:	dec00104 	addi	sp,sp,4
     a80:	f800283a 	ret

00000a84 <DIPSW_get_value>:
 */

#include <system.h>
#include <io.h>

unsigned char DIPSW_get_value() {
     a84:	deffff04 	addi	sp,sp,-4
     a88:	df000015 	stw	fp,0(sp)
     a8c:	d839883a 	mov	fp,sp
	return IORD_8DIRECT(PIO_0_BASE,0)^0xFF;
     a90:	00804034 	movhi	r2,256
     a94:	10842804 	addi	r2,r2,4256
     a98:	10800023 	ldbuio	r2,0(r2)
     a9c:	10803fcc 	andi	r2,r2,255
     aa0:	0084303a 	nor	r2,zero,r2
}
     aa4:	e037883a 	mov	sp,fp
     aa8:	df000017 	ldw	fp,0(sp)
     aac:	dec00104 	addi	sp,sp,4
     ab0:	f800283a 	ret

00000ab4 <conv_grayscale>:
int grayscale_width = 0;
int grayscape_height = 0;

void conv_grayscale(void *picture,
		            int width,
		            int height) {
     ab4:	defff604 	addi	sp,sp,-40
     ab8:	dfc00915 	stw	ra,36(sp)
     abc:	df000815 	stw	fp,32(sp)
     ac0:	df000804 	addi	fp,sp,32
     ac4:	e13ffd15 	stw	r4,-12(fp)
     ac8:	e17ffe15 	stw	r5,-8(fp)
     acc:	e1bfff15 	stw	r6,-4(fp)
	int x,y,gray;
	unsigned short *pixels = (unsigned short *)picture , rgb;
     ad0:	e0bffd17 	ldw	r2,-12(fp)
     ad4:	e0bffa15 	stw	r2,-24(fp)
	grayscale_width = width;
     ad8:	e0bffe17 	ldw	r2,-8(fp)
     adc:	d0a6cb15 	stw	r2,-25812(gp)
	grayscape_height = height;
     ae0:	e0bfff17 	ldw	r2,-4(fp)
     ae4:	d0a6cc15 	stw	r2,-25808(gp)
	if (grayscale_array != NULL)
     ae8:	d0a6cd17 	ldw	r2,-25804(gp)
     aec:	10000326 	beq	r2,zero,afc <conv_grayscale+0x48>
		free(grayscale_array);
     af0:	d0a6cd17 	ldw	r2,-25804(gp)
     af4:	1009883a 	mov	r4,r2
     af8:	00022200 	call	2220 <free>
	grayscale_array = (unsigned char *) malloc(width*height);
     afc:	e0fffe17 	ldw	r3,-8(fp)
     b00:	e0bfff17 	ldw	r2,-4(fp)
     b04:	1885383a 	mul	r2,r3,r2
     b08:	1009883a 	mov	r4,r2
     b0c:	000220c0 	call	220c <malloc>
     b10:	d0a6cd15 	stw	r2,-25804(gp)
	for (y = 0 ; y < height ; y++) {
     b14:	e03ff915 	stw	zero,-28(fp)
     b18:	00003c06 	br	c0c <conv_grayscale+0x158>
		for (x = 0 ; x < width ; x++) {
     b1c:	e03ff815 	stw	zero,-32(fp)
     b20:	00003406 	br	bf4 <conv_grayscale+0x140>
			rgb = pixels[y*width+x];
     b24:	e0fff917 	ldw	r3,-28(fp)
     b28:	e0bffe17 	ldw	r2,-8(fp)
     b2c:	1887383a 	mul	r3,r3,r2
     b30:	e0bff817 	ldw	r2,-32(fp)
     b34:	1885883a 	add	r2,r3,r2
     b38:	1085883a 	add	r2,r2,r2
     b3c:	1007883a 	mov	r3,r2
     b40:	e0bffa17 	ldw	r2,-24(fp)
     b44:	10c5883a 	add	r2,r2,r3
     b48:	1080000b 	ldhu	r2,0(r2)
     b4c:	e0bffb0d 	sth	r2,-20(fp)
			gray = (((rgb>>11)&0x1F)<<3)*21; // red part
     b50:	e0bffb0b 	ldhu	r2,-20(fp)
     b54:	1004d2fa 	srli	r2,r2,11
     b58:	10bfffcc 	andi	r2,r2,65535
     b5c:	100490fa 	slli	r2,r2,3
     b60:	10803fcc 	andi	r2,r2,255
     b64:	10800564 	muli	r2,r2,21
     b68:	e0bffc15 	stw	r2,-16(fp)
			gray += (((rgb>>5)&0x3F)<<2)*72; // green part
     b6c:	e0bffb0b 	ldhu	r2,-20(fp)
     b70:	1004d17a 	srli	r2,r2,5
     b74:	10bfffcc 	andi	r2,r2,65535
     b78:	1085883a 	add	r2,r2,r2
     b7c:	1085883a 	add	r2,r2,r2
     b80:	10803fcc 	andi	r2,r2,255
     b84:	10801224 	muli	r2,r2,72
     b88:	e0fffc17 	ldw	r3,-16(fp)
     b8c:	1885883a 	add	r2,r3,r2
     b90:	e0bffc15 	stw	r2,-16(fp)
			gray += (((rgb>>0)&0x1F)<<3)*7; // blue part
     b94:	e0bffb0b 	ldhu	r2,-20(fp)
     b98:	100490fa 	slli	r2,r2,3
     b9c:	10803fcc 	andi	r2,r2,255
     ba0:	108001e4 	muli	r2,r2,7
     ba4:	e0fffc17 	ldw	r3,-16(fp)
     ba8:	1885883a 	add	r2,r3,r2
     bac:	e0bffc15 	stw	r2,-16(fp)
			gray /= 100;
     bb0:	e0bffc17 	ldw	r2,-16(fp)
     bb4:	01401904 	movi	r5,100
     bb8:	1009883a 	mov	r4,r2
     bbc:	00020580 	call	2058 <__divsi3>
     bc0:	e0bffc15 	stw	r2,-16(fp)
			IOWR_8DIRECT(grayscale_array,y*width+x,gray);
     bc4:	d0a6cd17 	ldw	r2,-25804(gp)
     bc8:	e13ff917 	ldw	r4,-28(fp)
     bcc:	e0fffe17 	ldw	r3,-8(fp)
     bd0:	20c9383a 	mul	r4,r4,r3
     bd4:	e0fff817 	ldw	r3,-32(fp)
     bd8:	20c7883a 	add	r3,r4,r3
     bdc:	10c5883a 	add	r2,r2,r3
     be0:	e0fffc03 	ldbu	r3,-16(fp)
     be4:	10c00025 	stbio	r3,0(r2)
	grayscape_height = height;
	if (grayscale_array != NULL)
		free(grayscale_array);
	grayscale_array = (unsigned char *) malloc(width*height);
	for (y = 0 ; y < height ; y++) {
		for (x = 0 ; x < width ; x++) {
     be8:	e0bff817 	ldw	r2,-32(fp)
     bec:	10800044 	addi	r2,r2,1
     bf0:	e0bff815 	stw	r2,-32(fp)
     bf4:	e0fff817 	ldw	r3,-32(fp)
     bf8:	e0bffe17 	ldw	r2,-8(fp)
     bfc:	18bfc916 	blt	r3,r2,b24 <conv_grayscale+0x70>
	grayscale_width = width;
	grayscape_height = height;
	if (grayscale_array != NULL)
		free(grayscale_array);
	grayscale_array = (unsigned char *) malloc(width*height);
	for (y = 0 ; y < height ; y++) {
     c00:	e0bff917 	ldw	r2,-28(fp)
     c04:	10800044 	addi	r2,r2,1
     c08:	e0bff915 	stw	r2,-28(fp)
     c0c:	e0fff917 	ldw	r3,-28(fp)
     c10:	e0bfff17 	ldw	r2,-4(fp)
     c14:	18bfc116 	blt	r3,r2,b1c <conv_grayscale+0x68>
			gray += (((rgb>>0)&0x1F)<<3)*7; // blue part
			gray /= 100;
			IOWR_8DIRECT(grayscale_array,y*width+x,gray);
		}
	}
}
     c18:	0001883a 	nop
     c1c:	e037883a 	mov	sp,fp
     c20:	dfc00117 	ldw	ra,4(sp)
     c24:	df000017 	ldw	fp,0(sp)
     c28:	dec00204 	addi	sp,sp,8
     c2c:	f800283a 	ret

00000c30 <get_grayscale_width>:


int get_grayscale_width() {
     c30:	deffff04 	addi	sp,sp,-4
     c34:	df000015 	stw	fp,0(sp)
     c38:	d839883a 	mov	fp,sp
	return grayscale_width;
     c3c:	d0a6cb17 	ldw	r2,-25812(gp)
}
     c40:	e037883a 	mov	sp,fp
     c44:	df000017 	ldw	fp,0(sp)
     c48:	dec00104 	addi	sp,sp,4
     c4c:	f800283a 	ret

00000c50 <get_grayscale_height>:

int get_grayscale_height() {
     c50:	deffff04 	addi	sp,sp,-4
     c54:	df000015 	stw	fp,0(sp)
     c58:	d839883a 	mov	fp,sp
	return grayscape_height;
     c5c:	d0a6cc17 	ldw	r2,-25808(gp)
}
     c60:	e037883a 	mov	sp,fp
     c64:	df000017 	ldw	fp,0(sp)
     c68:	dec00104 	addi	sp,sp,4
     c6c:	f800283a 	ret

00000c70 <get_grayscale_picture>:

unsigned char *get_grayscale_picture() {
     c70:	deffff04 	addi	sp,sp,-4
     c74:	df000015 	stw	fp,0(sp)
     c78:	d839883a 	mov	fp,sp
	return grayscale_array;
     c7c:	d0a6cd17 	ldw	r2,-25804(gp)
}
     c80:	e037883a 	mov	sp,fp
     c84:	df000017 	ldw	fp,0(sp)
     c88:	dec00104 	addi	sp,sp,4
     c8c:	f800283a 	ret

00000c90 <i2c_busy_wait>:

#include <system.h>
#include <io.h>
#include "i2c.h"

void i2c_busy_wait() {
     c90:	defffe04 	addi	sp,sp,-8
     c94:	df000115 	stw	fp,4(sp)
     c98:	df000104 	addi	fp,sp,4
	int busy;
	do {
		busy = IORD_32DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG);
     c9c:	00804034 	movhi	r2,256
     ca0:	10842704 	addi	r2,r2,4252
     ca4:	10800037 	ldwio	r2,0(r2)
     ca8:	e0bfff15 	stw	r2,-4(fp)
	} while ((busy&(I2C_Busy_Flag|I2C_Autodetect_Busy_Flag))!=0);
     cac:	e0bfff17 	ldw	r2,-4(fp)
     cb0:	108000cc 	andi	r2,r2,3
     cb4:	103ff91e 	bne	r2,zero,c9c <i2c_busy_wait+0xc>
}
     cb8:	0001883a 	nop
     cbc:	e037883a 	mov	sp,fp
     cc0:	df000017 	ldw	fp,0(sp)
     cc4:	dec00104 	addi	sp,sp,4
     cc8:	f800283a 	ret

00000ccc <i2c_auto_detect>:

void i2c_auto_detect() {
     ccc:	defffb04 	addi	sp,sp,-20
     cd0:	dfc00415 	stw	ra,16(sp)
     cd4:	df000315 	stw	fp,12(sp)
     cd8:	df000304 	addi	fp,sp,12
	int nrdef,loop,value;
    i2c_busy_wait();
     cdc:	0000c900 	call	c90 <i2c_busy_wait>
    IOWR_32DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG,I2C_Autodetect);
     ce0:	00c00104 	movi	r3,4
     ce4:	00804034 	movhi	r2,256
     ce8:	10842704 	addi	r2,r2,4252
     cec:	10c00035 	stwio	r3,0(r2)
    i2c_busy_wait();
     cf0:	0000c900 	call	c90 <i2c_busy_wait>
    nrdef = IORD_32DIRECT(I2C_CTRL_BASE,I2C_ADDR_REG);
     cf4:	00804034 	movhi	r2,256
     cf8:	10842504 	addi	r2,r2,4244
     cfc:	10800037 	ldwio	r2,0(r2)
     d00:	e0bffe15 	stw	r2,-8(fp)
    printf("Number of I2C devices detected: %d\n",nrdef);
     d04:	e17ffe17 	ldw	r5,-8(fp)
     d08:	01000074 	movhi	r4,1
     d0c:	2105f004 	addi	r4,r4,6080
     d10:	0002a700 	call	2a70 <printf>
    for (loop = 0 ; loop < nrdef ; loop++) {
     d14:	e03ffd15 	stw	zero,-12(fp)
     d18:	00001006 	br	d5c <i2c_auto_detect+0x90>
    	IOWR_32DIRECT(I2C_CTRL_BASE,I2C_DEVICE_ID_REG,loop);
     d1c:	00804034 	movhi	r2,256
     d20:	10842404 	addi	r2,r2,4240
     d24:	e0fffd17 	ldw	r3,-12(fp)
     d28:	10c00035 	stwio	r3,0(r2)
    	value = IORD_32DIRECT(I2C_CTRL_BASE,I2C_DEVICE_ID_REG);
     d2c:	00804034 	movhi	r2,256
     d30:	10842404 	addi	r2,r2,4240
     d34:	10800037 	ldwio	r2,0(r2)
     d38:	e0bfff15 	stw	r2,-4(fp)
    	printf("Device nr. %d has Address: 0x%02X\n",loop,value);
     d3c:	e1bfff17 	ldw	r6,-4(fp)
     d40:	e17ffd17 	ldw	r5,-12(fp)
     d44:	01000074 	movhi	r4,1
     d48:	2105f904 	addi	r4,r4,6116
     d4c:	0002a700 	call	2a70 <printf>
    i2c_busy_wait();
    IOWR_32DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG,I2C_Autodetect);
    i2c_busy_wait();
    nrdef = IORD_32DIRECT(I2C_CTRL_BASE,I2C_ADDR_REG);
    printf("Number of I2C devices detected: %d\n",nrdef);
    for (loop = 0 ; loop < nrdef ; loop++) {
     d50:	e0bffd17 	ldw	r2,-12(fp)
     d54:	10800044 	addi	r2,r2,1
     d58:	e0bffd15 	stw	r2,-12(fp)
     d5c:	e0fffd17 	ldw	r3,-12(fp)
     d60:	e0bffe17 	ldw	r2,-8(fp)
     d64:	18bfed16 	blt	r3,r2,d1c <i2c_auto_detect+0x50>
    	IOWR_32DIRECT(I2C_CTRL_BASE,I2C_DEVICE_ID_REG,loop);
    	value = IORD_32DIRECT(I2C_CTRL_BASE,I2C_DEVICE_ID_REG);
    	printf("Device nr. %d has Address: 0x%02X\n",loop,value);
    }
}
     d68:	0001883a 	nop
     d6c:	e037883a 	mov	sp,fp
     d70:	dfc00117 	ldw	ra,4(sp)
     d74:	df000017 	ldw	fp,0(sp)
     d78:	dec00204 	addi	sp,sp,8
     d7c:	f800283a 	ret

00000d80 <i2c_short_read>:

unsigned int i2c_short_read(unsigned char device_id,
		                    unsigned short address) {
     d80:	defffc04 	addi	sp,sp,-16
     d84:	dfc00315 	stw	ra,12(sp)
     d88:	df000215 	stw	fp,8(sp)
     d8c:	df000204 	addi	fp,sp,8
     d90:	2007883a 	mov	r3,r4
     d94:	2805883a 	mov	r2,r5
     d98:	e0fffe05 	stb	r3,-8(fp)
     d9c:	e0bfff0d 	sth	r2,-4(fp)
	i2c_busy_wait();
     da0:	0000c900 	call	c90 <i2c_busy_wait>
	IOWR_8DIRECT(I2C_CTRL_BASE,I2C_DEVICE_ID_REG,device_id);
     da4:	e0fffe03 	ldbu	r3,-8(fp)
     da8:	00804034 	movhi	r2,256
     dac:	10842404 	addi	r2,r2,4240
     db0:	10c00025 	stbio	r3,0(r2)
	IOWR_16DIRECT(I2C_CTRL_BASE,I2C_ADDR_REG,address);
     db4:	e0ffff0b 	ldhu	r3,-4(fp)
     db8:	00804034 	movhi	r2,256
     dbc:	10842504 	addi	r2,r2,4244
     dc0:	10c0002d 	sthio	r3,0(r2)
	IOWR_8DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG,
     dc4:	00c010c4 	movi	r3,67
     dc8:	00804034 	movhi	r2,256
     dcc:	10842704 	addi	r2,r2,4252
     dd0:	10c00025 	stbio	r3,0(r2)
			     I2C_2Byte_Transfer|I2C_Start|I2C_Short_Transfer);
	i2c_busy_wait();
     dd4:	0000c900 	call	c90 <i2c_busy_wait>
	IOWR_8DIRECT(I2C_CTRL_BASE,I2C_DEVICE_ID_REG,device_id+1);
     dd8:	e0bffe03 	ldbu	r2,-8(fp)
     ddc:	10c00044 	addi	r3,r2,1
     de0:	00804034 	movhi	r2,256
     de4:	10842404 	addi	r2,r2,4240
     de8:	10c00025 	stbio	r3,0(r2)
	IOWR_8DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG,
     dec:	00c00884 	movi	r3,34
     df0:	00804034 	movhi	r2,256
     df4:	10842704 	addi	r2,r2,4252
     df8:	10c00025 	stbio	r3,0(r2)
			     I2C_Start|I2C_4Byte_Read);
	i2c_busy_wait();
     dfc:	0000c900 	call	c90 <i2c_busy_wait>
	return IORD_32DIRECT(I2C_CTRL_BASE,I2C_DATA_REG);
     e00:	00804034 	movhi	r2,256
     e04:	10842604 	addi	r2,r2,4248
     e08:	10800037 	ldwio	r2,0(r2)
}
     e0c:	e037883a 	mov	sp,fp
     e10:	dfc00117 	ldw	ra,4(sp)
     e14:	df000017 	ldw	fp,0(sp)
     e18:	dec00204 	addi	sp,sp,8
     e1c:	f800283a 	ret

00000e20 <i2c_short_write>:

void i2c_short_write(unsigned char device_id,
		             unsigned short address,
		             unsigned short data) {
     e20:	defffb04 	addi	sp,sp,-20
     e24:	dfc00415 	stw	ra,16(sp)
     e28:	df000315 	stw	fp,12(sp)
     e2c:	df000304 	addi	fp,sp,12
     e30:	2807883a 	mov	r3,r5
     e34:	3005883a 	mov	r2,r6
     e38:	e13ffd05 	stb	r4,-12(fp)
     e3c:	e0fffe0d 	sth	r3,-8(fp)
     e40:	e0bfff0d 	sth	r2,-4(fp)
	i2c_busy_wait();
     e44:	0000c900 	call	c90 <i2c_busy_wait>
	IOWR_8DIRECT(I2C_CTRL_BASE,I2C_DEVICE_ID_REG,device_id);
     e48:	e0fffd03 	ldbu	r3,-12(fp)
     e4c:	00804034 	movhi	r2,256
     e50:	10842404 	addi	r2,r2,4240
     e54:	10c00025 	stbio	r3,0(r2)
	IOWR_16DIRECT(I2C_CTRL_BASE,I2C_ADDR_REG,address);
     e58:	e0fffe0b 	ldhu	r3,-8(fp)
     e5c:	00804034 	movhi	r2,256
     e60:	10842504 	addi	r2,r2,4244
     e64:	10c0002d 	sthio	r3,0(r2)
	IOWR_16DIRECT(I2C_CTRL_BASE,I2C_DATA_REG,data);
     e68:	e0ffff0b 	ldhu	r3,-4(fp)
     e6c:	00804034 	movhi	r2,256
     e70:	10842604 	addi	r2,r2,4248
     e74:	10c0002d 	sthio	r3,0(r2)
	IOWR_8DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG,
     e78:	00c01084 	movi	r3,66
     e7c:	00804034 	movhi	r2,256
     e80:	10842704 	addi	r2,r2,4252
     e84:	10c00025 	stbio	r3,0(r2)
			     I2C_Start|I2C_Short_Transfer);
	i2c_busy_wait();
     e88:	0000c900 	call	c90 <i2c_busy_wait>
}
     e8c:	0001883a 	nop
     e90:	e037883a 	mov	sp,fp
     e94:	dfc00117 	ldw	ra,4(sp)
     e98:	df000017 	ldw	fp,0(sp)
     e9c:	dec00204 	addi	sp,sp,8
     ea0:	f800283a 	ret

00000ea4 <LCD_Write_Command>:
#include "lcd_simple.h"

unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
     ea4:	defffd04 	addi	sp,sp,-12
     ea8:	dfc00215 	stw	ra,8(sp)
     eac:	df000115 	stw	fp,4(sp)
     eb0:	df000104 	addi	fp,sp,4
     eb4:	e13fff15 	stw	r4,-4(fp)
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
     eb8:	00804034 	movhi	r2,256
     ebc:	10841804 	addi	r2,r2,4192
     ec0:	e0ffff0b 	ldhu	r3,-4(fp)
     ec4:	10c0002d 	sthio	r3,0(r2)
	usleep(10);
     ec8:	01000284 	movi	r4,10
     ecc:	000f1b00 	call	f1b0 <usleep>
}
     ed0:	0001883a 	nop
     ed4:	e037883a 	mov	sp,fp
     ed8:	dfc00117 	ldw	ra,4(sp)
     edc:	df000017 	ldw	fp,0(sp)
     ee0:	dec00204 	addi	sp,sp,8
     ee4:	f800283a 	ret

00000ee8 <LCD_Write_Data>:

void LCD_Write_Data(int data) {
     ee8:	defffd04 	addi	sp,sp,-12
     eec:	dfc00215 	stw	ra,8(sp)
     ef0:	df000115 	stw	fp,4(sp)
     ef4:	df000104 	addi	fp,sp,4
     ef8:	e13fff15 	stw	r4,-4(fp)
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     efc:	00804034 	movhi	r2,256
     f00:	10841904 	addi	r2,r2,4196
     f04:	e0ffff0b 	ldhu	r3,-4(fp)
     f08:	10c0002d 	sthio	r3,0(r2)
	usleep(10);
     f0c:	01000284 	movi	r4,10
     f10:	000f1b00 	call	f1b0 <usleep>
}
     f14:	0001883a 	nop
     f18:	e037883a 	mov	sp,fp
     f1c:	dfc00117 	ldw	ra,4(sp)
     f20:	df000017 	ldw	fp,0(sp)
     f24:	dec00204 	addi	sp,sp,8
     f28:	f800283a 	ret

00000f2c <init_LCD>:


void init_LCD() {
     f2c:	defffe04 	addi	sp,sp,-8
     f30:	dfc00115 	stw	ra,4(sp)
     f34:	df000015 	stw	fp,0(sp)
     f38:	d839883a 	mov	fp,sp
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_CONTROL_REG,
     f3c:	00c00084 	movi	r3,2
     f40:	00804034 	movhi	r2,256
     f44:	10841a04 	addi	r2,r2,4200
     f48:	10c0002d 	sthio	r3,0(r2)
			         LCD_Sixteen_Bit|LCD_Reset|
			         LCD_RGB565_Mode|LCD_Color_Image); // Set 16 bit transfer mode and reset
	LCD_Write_Command(0x0028); 	//display OFF
     f4c:	01000a04 	movi	r4,40
     f50:	0000ea40 	call	ea4 <LCD_Write_Command>
	LCD_Write_Command(0x0011); 	//exit SLEEP mode
     f54:	01000444 	movi	r4,17
     f58:	0000ea40 	call	ea4 <LCD_Write_Command>
	LCD_Write_Data(0x0000);
     f5c:	0009883a 	mov	r4,zero
     f60:	0000ee80 	call	ee8 <LCD_Write_Data>

	LCD_Write_Command(0x00CB); 	//Power Control A
     f64:	010032c4 	movi	r4,203
     f68:	0000ea40 	call	ea4 <LCD_Write_Command>
	LCD_Write_Data(0x0039); 	//always 0x39
     f6c:	01000e44 	movi	r4,57
     f70:	0000ee80 	call	ee8 <LCD_Write_Data>
	LCD_Write_Data(0x002C); 	//always 0x2C
     f74:	01000b04 	movi	r4,44
     f78:	0000ee80 	call	ee8 <LCD_Write_Data>
	LCD_Write_Data(0x0000); 	//always 0x00
     f7c:	0009883a 	mov	r4,zero
     f80:	0000ee80 	call	ee8 <LCD_Write_Data>
	LCD_Write_Data(0x0034); 	//Vcore = 1.6V
     f84:	01000d04 	movi	r4,52
     f88:	0000ee80 	call	ee8 <LCD_Write_Data>
	LCD_Write_Data(0x0002); 	//DDVDH = 5.6V
     f8c:	01000084 	movi	r4,2
     f90:	0000ee80 	call	ee8 <LCD_Write_Data>

	LCD_Write_Command(0x00CF); 	//Power Control B
     f94:	010033c4 	movi	r4,207
     f98:	0000ea40 	call	ea4 <LCD_Write_Command>
	LCD_Write_Data(0x0000); 	//always 0x00
     f9c:	0009883a 	mov	r4,zero
     fa0:	0000ee80 	call	ee8 <LCD_Write_Data>
	LCD_Write_Data(0x0081); 	//PCEQ off
     fa4:	01002044 	movi	r4,129
     fa8:	0000ee80 	call	ee8 <LCD_Write_Data>
	LCD_Write_Data(0x0030); 	//ESD protection
     fac:	01000c04 	movi	r4,48
     fb0:	0000ee80 	call	ee8 <LCD_Write_Data>

	LCD_Write_Command(0x00E8); 	//Driver timing control A
     fb4:	01003a04 	movi	r4,232
     fb8:	0000ea40 	call	ea4 <LCD_Write_Command>
	LCD_Write_Data(0x0085); 	//non - overlap
     fbc:	01002144 	movi	r4,133
     fc0:	0000ee80 	call	ee8 <LCD_Write_Data>
	LCD_Write_Data(0x0001); 	//EQ timing
     fc4:	01000044 	movi	r4,1
     fc8:	0000ee80 	call	ee8 <LCD_Write_Data>
	LCD_Write_Data(0x0079); 	//Pre-chargetiming
     fcc:	01001e44 	movi	r4,121
     fd0:	0000ee80 	call	ee8 <LCD_Write_Data>
	LCD_Write_Command(0x00EA); 	//Driver timing control B
     fd4:	01003a84 	movi	r4,234
     fd8:	0000ea40 	call	ea4 <LCD_Write_Command>
	LCD_Write_Data(0x0000);		//Gate driver timing
     fdc:	0009883a 	mov	r4,zero
     fe0:	0000ee80 	call	ee8 <LCD_Write_Data>
	LCD_Write_Data(0x0000);		//always 0x00
     fe4:	0009883a 	mov	r4,zero
     fe8:	0000ee80 	call	ee8 <LCD_Write_Data>
	LCD_Write_Data(0x0064);		//soft start 
     fec:	01001904 	movi	r4,100
     ff0:	0000ee80 	call	ee8 <LCD_Write_Data>
	LCD_Write_Data(0x0003);		//power on sequence 
     ff4:	010000c4 	movi	r4,3
     ff8:	0000ee80 	call	ee8 <LCD_Write_Data>
	LCD_Write_Data(0x0012);		//power on sequence 
     ffc:	01000484 	movi	r4,18
    1000:	0000ee80 	call	ee8 <LCD_Write_Data>
	LCD_Write_Data(0x0081);		//DDVDH enhance on 
    1004:	01002044 	movi	r4,129
    1008:	0000ee80 	call	ee8 <LCD_Write_Data>

	LCD_Write_Command(0x00F7); 	//Pump ratio control 
    100c:	01003dc4 	movi	r4,247
    1010:	0000ea40 	call	ea4 <LCD_Write_Command>
	LCD_Write_Data(0x0020); 	//DDVDH=2xVCI 
    1014:	01000804 	movi	r4,32
    1018:	0000ee80 	call	ee8 <LCD_Write_Data>

	LCD_Write_Command(0x00C0);	//power control 1 
    101c:	01003004 	movi	r4,192
    1020:	0000ea40 	call	ea4 <LCD_Write_Command>
	LCD_Write_Data(0x0026);
    1024:	01000984 	movi	r4,38
    1028:	0000ee80 	call	ee8 <LCD_Write_Data>
	LCD_Write_Data(0x0004); 	//second parameter for ILI9340 (ignored by ILI9341) 
    102c:	01000104 	movi	r4,4
    1030:	0000ee80 	call	ee8 <LCD_Write_Data>

	LCD_Write_Command(0x00C1); 	//power control 2 
    1034:	01003044 	movi	r4,193
    1038:	0000ea40 	call	ea4 <LCD_Write_Command>
	LCD_Write_Data(0x0011);
    103c:	01000444 	movi	r4,17
    1040:	0000ee80 	call	ee8 <LCD_Write_Data>

	LCD_Write_Command(0x00C5); 	//VCOM control 1 
    1044:	01003144 	movi	r4,197
    1048:	0000ea40 	call	ea4 <LCD_Write_Command>
	LCD_Write_Data(0x0035);
    104c:	01000d44 	movi	r4,53
    1050:	0000ee80 	call	ee8 <LCD_Write_Data>
	LCD_Write_Data(0x003E);
    1054:	01000f84 	movi	r4,62
    1058:	0000ee80 	call	ee8 <LCD_Write_Data>

	LCD_Write_Command(0x00C7); 	//VCOM control 2 
    105c:	010031c4 	movi	r4,199
    1060:	0000ea40 	call	ea4 <LCD_Write_Command>
	LCD_Write_Data(0x00BE);
    1064:	01002f84 	movi	r4,190
    1068:	0000ee80 	call	ee8 <LCD_Write_Data>

	LCD_Write_Command(0x00B1); 	//frame rate control 
    106c:	01002c44 	movi	r4,177
    1070:	0000ea40 	call	ea4 <LCD_Write_Command>
	LCD_Write_Data(0x0000);
    1074:	0009883a 	mov	r4,zero
    1078:	0000ee80 	call	ee8 <LCD_Write_Data>
	LCD_Write_Data(0x0010);
    107c:	01000404 	movi	r4,16
    1080:	0000ee80 	call	ee8 <LCD_Write_Data>

	LCD_Write_Command(0x003A);	//pixel format = 16 bit per pixel 
    1084:	01000e84 	movi	r4,58
    1088:	0000ea40 	call	ea4 <LCD_Write_Command>
	LCD_Write_Data(0x0055);
    108c:	01001544 	movi	r4,85
    1090:	0000ee80 	call	ee8 <LCD_Write_Data>

	LCD_Write_Command(0x00B6); 	//display function control 
    1094:	01002d84 	movi	r4,182
    1098:	0000ea40 	call	ea4 <LCD_Write_Command>
	LCD_Write_Data(0x000A);
    109c:	01000284 	movi	r4,10
    10a0:	0000ee80 	call	ee8 <LCD_Write_Data>
	LCD_Write_Data(0x00A2);
    10a4:	01002884 	movi	r4,162
    10a8:	0000ee80 	call	ee8 <LCD_Write_Data>

	LCD_Write_Command(0x00F2); 	//3G Gamma control 
    10ac:	01003c84 	movi	r4,242
    10b0:	0000ea40 	call	ea4 <LCD_Write_Command>
	LCD_Write_Data(0x0002);	 	//off 
    10b4:	01000084 	movi	r4,2
    10b8:	0000ee80 	call	ee8 <LCD_Write_Data>

	LCD_Write_Command(0x0026); 	//Gamma curve 3 
    10bc:	01000984 	movi	r4,38
    10c0:	0000ea40 	call	ea4 <LCD_Write_Command>
	LCD_Write_Data(0x0001);
    10c4:	01000044 	movi	r4,1
    10c8:	0000ee80 	call	ee8 <LCD_Write_Data>

	LCD_Write_Command(0x0036); 	//memory access control = BGR 
    10cc:	01000d84 	movi	r4,54
    10d0:	0000ea40 	call	ea4 <LCD_Write_Command>
	LCD_Write_Data(0x0000);
    10d4:	0009883a 	mov	r4,zero
    10d8:	0000ee80 	call	ee8 <LCD_Write_Data>

	LCD_Write_Command(0x002A); 	//column address set 
    10dc:	01000a84 	movi	r4,42
    10e0:	0000ea40 	call	ea4 <LCD_Write_Command>
	LCD_Write_Data(0x0000);
    10e4:	0009883a 	mov	r4,zero
    10e8:	0000ee80 	call	ee8 <LCD_Write_Data>
	LCD_Write_Data(0x0000);		//start 0x0000 
    10ec:	0009883a 	mov	r4,zero
    10f0:	0000ee80 	call	ee8 <LCD_Write_Data>
	LCD_Write_Data(0x0000);
    10f4:	0009883a 	mov	r4,zero
    10f8:	0000ee80 	call	ee8 <LCD_Write_Data>
	LCD_Write_Data(0x00EF);		//end 0x00EF 
    10fc:	01003bc4 	movi	r4,239
    1100:	0000ee80 	call	ee8 <LCD_Write_Data>

	LCD_Write_Command(0x002B);	//page address set 
    1104:	01000ac4 	movi	r4,43
    1108:	0000ea40 	call	ea4 <LCD_Write_Command>
	LCD_Write_Data(0x0000);
    110c:	0009883a 	mov	r4,zero
    1110:	0000ee80 	call	ee8 <LCD_Write_Data>
	LCD_Write_Data(0x0000);		//start 0x0000 
    1114:	0009883a 	mov	r4,zero
    1118:	0000ee80 	call	ee8 <LCD_Write_Data>
	LCD_Write_Data(0x0001);
    111c:	01000044 	movi	r4,1
    1120:	0000ee80 	call	ee8 <LCD_Write_Data>
	LCD_Write_Data(0x003F);		//end 0x013F 
    1124:	01000fc4 	movi	r4,63
    1128:	0000ee80 	call	ee8 <LCD_Write_Data>
	IOWR_32DIRECT(LCD_CTRL_BASE,LCD_NR_PIX_LINE_REG,240);
    112c:	00c03c04 	movi	r3,240
    1130:	00804034 	movhi	r2,256
    1134:	10841d04 	addi	r2,r2,4212
    1138:	10c00035 	stwio	r3,0(r2)
	LCD_width = 240;
    113c:	00803c04 	movi	r2,240
    1140:	d0a6ce8d 	sth	r2,-25798(gp)
	LCD_height = 320;
    1144:	00805004 	movi	r2,320
    1148:	d0a6ce0d 	sth	r2,-25800(gp)


	LCD_Write_Command(0x0029);
    114c:	01000a44 	movi	r4,41
    1150:	0000ea40 	call	ea4 <LCD_Write_Command>

}
    1154:	0001883a 	nop
    1158:	e037883a 	mov	sp,fp
    115c:	dfc00117 	ldw	ra,4(sp)
    1160:	df000017 	ldw	fp,0(sp)
    1164:	dec00204 	addi	sp,sp,8
    1168:	f800283a 	ret

0000116c <transfer_LCD_no_dma>:

void transfer_LCD_no_dma( void* array,
		                  int width,
		                  int height) {
    116c:	defff904 	addi	sp,sp,-28
    1170:	dfc00615 	stw	ra,24(sp)
    1174:	df000515 	stw	fp,20(sp)
    1178:	df000504 	addi	fp,sp,20
    117c:	e13ffd15 	stw	r4,-12(fp)
    1180:	e17ffe15 	stw	r5,-8(fp)
    1184:	e1bfff15 	stw	r6,-4(fp)
	unsigned short *data_array = (unsigned short *)array;
    1188:	e0bffd17 	ldw	r2,-12(fp)
    118c:	e0bffc15 	stw	r2,-16(fp)
	unsigned int pixels;
	IOWR_32DIRECT(LCD_CTRL_BASE,LCD_Pict_width_reg,width);
    1190:	00804034 	movhi	r2,256
    1194:	10841e04 	addi	r2,r2,4216
    1198:	e0fffe17 	ldw	r3,-8(fp)
    119c:	10c00035 	stwio	r3,0(r2)
	LCD_Write_Command(0x002C); 	//command to begin writing to frame memory
    11a0:	01000b04 	movi	r4,44
    11a4:	0000ea40 	call	ea4 <LCD_Write_Command>
	for (pixels = 0 ; pixels < width*height ; pixels++)
    11a8:	e03ffb15 	stw	zero,-20(fp)
    11ac:	00000c06 	br	11e0 <transfer_LCD_no_dma+0x74>
		LCD_Write_Data(data_array[pixels]);
    11b0:	e0bffb17 	ldw	r2,-20(fp)
    11b4:	1085883a 	add	r2,r2,r2
    11b8:	1007883a 	mov	r3,r2
    11bc:	e0bffc17 	ldw	r2,-16(fp)
    11c0:	10c5883a 	add	r2,r2,r3
    11c4:	1080000b 	ldhu	r2,0(r2)
    11c8:	10bfffcc 	andi	r2,r2,65535
    11cc:	1009883a 	mov	r4,r2
    11d0:	0000ee80 	call	ee8 <LCD_Write_Data>
		                  int height) {
	unsigned short *data_array = (unsigned short *)array;
	unsigned int pixels;
	IOWR_32DIRECT(LCD_CTRL_BASE,LCD_Pict_width_reg,width);
	LCD_Write_Command(0x002C); 	//command to begin writing to frame memory
	for (pixels = 0 ; pixels < width*height ; pixels++)
    11d4:	e0bffb17 	ldw	r2,-20(fp)
    11d8:	10800044 	addi	r2,r2,1
    11dc:	e0bffb15 	stw	r2,-20(fp)
    11e0:	e0fffe17 	ldw	r3,-8(fp)
    11e4:	e0bfff17 	ldw	r2,-4(fp)
    11e8:	1885383a 	mul	r2,r3,r2
    11ec:	1007883a 	mov	r3,r2
    11f0:	e0bffb17 	ldw	r2,-20(fp)
    11f4:	10ffee36 	bltu	r2,r3,11b0 <transfer_LCD_no_dma+0x44>
		LCD_Write_Data(data_array[pixels]);
}
    11f8:	0001883a 	nop
    11fc:	e037883a 	mov	sp,fp
    1200:	dfc00117 	ldw	ra,4(sp)
    1204:	df000017 	ldw	fp,0(sp)
    1208:	dec00204 	addi	sp,sp,8
    120c:	f800283a 	ret

00001210 <transfer_LCD_with_dma>:

void transfer_LCD_with_dma(void *array,
		                   int width,
		                   int height,
		                   char grayscale) {
    1210:	defffa04 	addi	sp,sp,-24
    1214:	df000515 	stw	fp,20(sp)
    1218:	df000504 	addi	fp,sp,20
    121c:	e13ffc15 	stw	r4,-16(fp)
    1220:	e17ffd15 	stw	r5,-12(fp)
    1224:	e1bffe15 	stw	r6,-8(fp)
    1228:	3805883a 	mov	r2,r7
    122c:	e0bfff05 	stb	r2,-4(fp)
	unsigned short real_height = (height > LCD_height) ? LCD_height : height;
    1230:	d0a6ce0b 	ldhu	r2,-25800(gp)
    1234:	10bfffcc 	andi	r2,r2,65535
    1238:	e0fffe17 	ldw	r3,-8(fp)
    123c:	1880010e 	bge	r3,r2,1244 <transfer_LCD_with_dma+0x34>
    1240:	1805883a 	mov	r2,r3
    1244:	e0bffb0d 	sth	r2,-20(fp)
	unsigned short real_width = (width > LCD_width) ? LCD_width : width;
    1248:	d0a6ce8b 	ldhu	r2,-25798(gp)
    124c:	10bfffcc 	andi	r2,r2,65535
    1250:	e0fffd17 	ldw	r3,-12(fp)
    1254:	1880010e 	bge	r3,r2,125c <transfer_LCD_with_dma+0x4c>
    1258:	1805883a 	mov	r2,r3
    125c:	e0bffb8d 	sth	r2,-18(fp)
	IOWR_32DIRECT(LCD_CTRL_BASE,LCD_Pict_width_reg,width);
    1260:	00804034 	movhi	r2,256
    1264:	10841e04 	addi	r2,r2,4216
    1268:	e0fffd17 	ldw	r3,-12(fp)
    126c:	10c00035 	stwio	r3,0(r2)
	IOWR_32DIRECT(LCD_CTRL_BASE,LCD_IMAGE_POINTER_REG,(int)array);
    1270:	e0fffc17 	ldw	r3,-16(fp)
    1274:	00804034 	movhi	r2,256
    1278:	10841b04 	addi	r2,r2,4204
    127c:	10c00035 	stwio	r3,0(r2)
	IOWR_32DIRECT(LCD_CTRL_BASE,LCD_IMAGE_SIZE_REG,real_width*real_height);
    1280:	e0fffb8b 	ldhu	r3,-18(fp)
    1284:	e0bffb0b 	ldhu	r2,-20(fp)
    1288:	1887383a 	mul	r3,r3,r2
    128c:	00804034 	movhi	r2,256
    1290:	10841c04 	addi	r2,r2,4208
    1294:	10c00035 	stwio	r3,0(r2)
	if (grayscale==0)
    1298:	e0bfff07 	ldb	r2,-4(fp)
    129c:	1000051e 	bne	r2,zero,12b4 <transfer_LCD_with_dma+0xa4>
		IOWR_16DIRECT(LCD_CTRL_BASE,LCD_CONTROL_REG,
    12a0:	00c04004 	movi	r3,256
    12a4:	00804034 	movhi	r2,256
    12a8:	10841a04 	addi	r2,r2,4200
    12ac:	10c0002d 	sthio	r3,0(r2)
				         LCD_RGB565_Mode|LCD_Color_Image);
	else
		IOWR_16DIRECT(LCD_CTRL_BASE,LCD_CONTROL_REG,
				         LCD_Sixteen_Bit|LCD_Start_DMA|
				         LCD_RGB565_Mode|LCD_GrayScale_Image);
}
    12b0:	00000406 	br	12c4 <transfer_LCD_with_dma+0xb4>
	if (grayscale==0)
		IOWR_16DIRECT(LCD_CTRL_BASE,LCD_CONTROL_REG,
				         LCD_Sixteen_Bit|LCD_Start_DMA|
				         LCD_RGB565_Mode|LCD_Color_Image);
	else
		IOWR_16DIRECT(LCD_CTRL_BASE,LCD_CONTROL_REG,
    12b4:	00c04404 	movi	r3,272
    12b8:	00804034 	movhi	r2,256
    12bc:	10841a04 	addi	r2,r2,4200
    12c0:	10c0002d 	sthio	r3,0(r2)
				         LCD_Sixteen_Bit|LCD_Start_DMA|
				         LCD_RGB565_Mode|LCD_GrayScale_Image);
}
    12c4:	0001883a 	nop
    12c8:	e037883a 	mov	sp,fp
    12cc:	df000017 	ldw	fp,0(sp)
    12d0:	dec00104 	addi	sp,sp,4
    12d4:	f800283a 	ret

000012d8 <main>:
#include "sobel.h"
#include "sys/alt_timestamp.h"
#include "alt_types.h"

int main()
{
    12d8:	deffec04 	addi	sp,sp,-80
    12dc:	dfc01315 	stw	ra,76(sp)
    12e0:	df001215 	stw	fp,72(sp)
    12e4:	dc401115 	stw	r17,68(sp)
    12e8:	dc001015 	stw	r16,64(sp)
    12ec:	df001204 	addi	fp,sp,72
  void *buffer1,*buffer2,*buffer3,*buffer4;
  unsigned short *image;
  unsigned char *grayscale;
  unsigned char current_mode;
  unsigned char mode;
  init_LCD();
    12f0:	0000f2c0 	call	f2c <init_LCD>
  init_camera();
    12f4:	00002800 	call	280 <init_camera>
  vga_set_swap(VGA_QuarterScreen|VGA_Grayscale);
    12f8:	01000604 	movi	r4,24
    12fc:	00020200 	call	2020 <vga_set_swap>
  printf("Hello from Nios II!\n");
    1300:	01000074 	movhi	r4,1
    1304:	21060204 	addi	r4,r4,6152
    1308:	0002b6c0 	call	2b6c <puts>
  cam_get_profiling();
    130c:	00007fc0 	call	7fc <cam_get_profiling>
  buffer1 = (void *) malloc(cam_get_xsize()*cam_get_ysize());
    1310:	00007640 	call	764 <cam_get_xsize>
    1314:	143fffcc 	andi	r16,r2,65535
    1318:	00007b00 	call	7b0 <cam_get_ysize>
    131c:	10bfffcc 	andi	r2,r2,65535
    1320:	8085383a 	mul	r2,r16,r2
    1324:	1009883a 	mov	r4,r2
    1328:	000220c0 	call	220c <malloc>
    132c:	e0bfee15 	stw	r2,-72(fp)
  buffer2 = (void *) malloc(cam_get_xsize()*cam_get_ysize());
    1330:	00007640 	call	764 <cam_get_xsize>
    1334:	143fffcc 	andi	r16,r2,65535
    1338:	00007b00 	call	7b0 <cam_get_ysize>
    133c:	10bfffcc 	andi	r2,r2,65535
    1340:	8085383a 	mul	r2,r16,r2
    1344:	1009883a 	mov	r4,r2
    1348:	000220c0 	call	220c <malloc>
    134c:	e0bfef15 	stw	r2,-68(fp)
  buffer3 = (void *) malloc(cam_get_xsize()*cam_get_ysize());
    1350:	00007640 	call	764 <cam_get_xsize>
    1354:	143fffcc 	andi	r16,r2,65535
    1358:	00007b00 	call	7b0 <cam_get_ysize>
    135c:	10bfffcc 	andi	r2,r2,65535
    1360:	8085383a 	mul	r2,r16,r2
    1364:	1009883a 	mov	r4,r2
    1368:	000220c0 	call	220c <malloc>
    136c:	e0bff015 	stw	r2,-64(fp)
  buffer4 = (void *) malloc(cam_get_xsize()*cam_get_ysize());
    1370:	00007640 	call	764 <cam_get_xsize>
    1374:	143fffcc 	andi	r16,r2,65535
    1378:	00007b00 	call	7b0 <cam_get_ysize>
    137c:	10bfffcc 	andi	r2,r2,65535
    1380:	8085383a 	mul	r2,r16,r2
    1384:	1009883a 	mov	r4,r2
    1388:	000220c0 	call	220c <malloc>
    138c:	e0bff115 	stw	r2,-60(fp)
  cam_set_image_pointer(0,buffer1);
    1390:	e17fee17 	ldw	r5,-72(fp)
    1394:	0009883a 	mov	r4,zero
    1398:	00008a40 	call	8a4 <cam_set_image_pointer>
  cam_set_image_pointer(1,buffer2);
    139c:	e17fef17 	ldw	r5,-68(fp)
    13a0:	01000044 	movi	r4,1
    13a4:	00008a40 	call	8a4 <cam_set_image_pointer>
  cam_set_image_pointer(2,buffer3);
    13a8:	e17ff017 	ldw	r5,-64(fp)
    13ac:	01000084 	movi	r4,2
    13b0:	00008a40 	call	8a4 <cam_set_image_pointer>
  cam_set_image_pointer(3,buffer4);
    13b4:	e17ff117 	ldw	r5,-60(fp)
    13b8:	010000c4 	movi	r4,3
    13bc:	00008a40 	call	8a4 <cam_set_image_pointer>
  enable_continues_mode();
    13c0:	00009fc0 	call	9fc <enable_continues_mode>
  init_sobel_arrays(cam_get_xsize()>>1,cam_get_ysize());
    13c4:	00007640 	call	764 <cam_get_xsize>
    13c8:	10bfffcc 	andi	r2,r2,65535
    13cc:	1004d07a 	srli	r2,r2,1
    13d0:	143fffcc 	andi	r16,r2,65535
    13d4:	00007b00 	call	7b0 <cam_get_ysize>
    13d8:	10bfffcc 	andi	r2,r2,65535
    13dc:	100b883a 	mov	r5,r2
    13e0:	8009883a 	mov	r4,r16
    13e4:	000181c0 	call	181c <init_sobel_arrays>

  alt_timestamp_start();
    13e8:	000ff580 	call	ff58 <alt_timestamp_start>
  do {
	  alt_u32 start_sobel_x=0, end_sobel_x=0, delta_x = 0;
    13ec:	e03ff215 	stw	zero,-56(fp)
    13f0:	e03ff315 	stw	zero,-52(fp)
    13f4:	e03ff415 	stw	zero,-48(fp)
	  alt_u32 start_sobel_y=0, end_sobel_y=0, delta_y = 0;
    13f8:	e03ff515 	stw	zero,-44(fp)
    13fc:	e03ff615 	stw	zero,-40(fp)
    1400:	e03ff715 	stw	zero,-36(fp)
	  alt_u32 start_conv_grayscale=0, end_conv_grayscale=0, delta_grayscale = 0;
    1404:	e03ff815 	stw	zero,-32(fp)
    1408:	e03ff915 	stw	zero,-28(fp)
    140c:	e03ffa15 	stw	zero,-24(fp)
	  if (new_image_available() != 0) {
    1410:	0000a2c0 	call	a2c <new_image_available>
    1414:	10803fcc 	andi	r2,r2,255
    1418:	1080201c 	xori	r2,r2,128
    141c:	10bfe004 	addi	r2,r2,-128
    1420:	103ff226 	beq	r2,zero,13ec <main+0x114>
		  if (current_image_valid()!=0) {
    1424:	000094c0 	call	94c <current_image_valid>
    1428:	10bfffcc 	andi	r2,r2,65535
    142c:	10a0001c 	xori	r2,r2,32768
    1430:	10a00004 	addi	r2,r2,-32768
    1434:	103fed26 	beq	r2,zero,13ec <main+0x114>
			  current_mode = DIPSW_get_value();
    1438:	0000a840 	call	a84 <DIPSW_get_value>
    143c:	e0bffb05 	stb	r2,-20(fp)
			  mode = current_mode&(DIPSW_SW1_MASK|DIPSW_SW3_MASK|DIPSW_SW2_MASK);
    1440:	e0bffb03 	ldbu	r2,-20(fp)
    1444:	108001cc 	andi	r2,r2,7
    1448:	e0bffb45 	stb	r2,-19(fp)
			  image = (unsigned short*)current_image_pointer();
    144c:	00009840 	call	984 <current_image_pointer>
    1450:	e0bffc15 	stw	r2,-16(fp)
		      switch (mode) {
    1454:	e0bffb43 	ldbu	r2,-19(fp)
    1458:	10c00060 	cmpeqi	r3,r2,1
    145c:	1800211e 	bne	r3,zero,14e4 <main+0x20c>
    1460:	10c00088 	cmpgei	r3,r2,2
    1464:	1800021e 	bne	r3,zero,1470 <main+0x198>
    1468:	10000626 	beq	r2,zero,1484 <main+0x1ac>
    146c:	00009206 	br	16b8 <main+0x3e0>
    1470:	10c000a0 	cmpeqi	r3,r2,2
    1474:	18003e1e 	bne	r3,zero,1570 <main+0x298>
    1478:	108000e0 	cmpeqi	r2,r2,3
    147c:	1000641e 	bne	r2,zero,1610 <main+0x338>
    1480:	00008d06 	br	16b8 <main+0x3e0>
		      case 0 : transfer_LCD_with_dma(&image[16520],
    1484:	e0fffc17 	ldw	r3,-16(fp)
    1488:	00a04414 	movui	r2,33040
    148c:	18a1883a 	add	r16,r3,r2
		                	cam_get_xsize()>>1,
    1490:	00007640 	call	764 <cam_get_xsize>
		  if (current_image_valid()!=0) {
			  current_mode = DIPSW_get_value();
			  mode = current_mode&(DIPSW_SW1_MASK|DIPSW_SW3_MASK|DIPSW_SW2_MASK);
			  image = (unsigned short*)current_image_pointer();
		      switch (mode) {
		      case 0 : transfer_LCD_with_dma(&image[16520],
    1494:	10bfffcc 	andi	r2,r2,65535
    1498:	1004d07a 	srli	r2,r2,1
    149c:	147fffcc 	andi	r17,r2,65535
		                	cam_get_xsize()>>1,
		                	cam_get_ysize(),0);
    14a0:	00007b00 	call	7b0 <cam_get_ysize>
		  if (current_image_valid()!=0) {
			  current_mode = DIPSW_get_value();
			  mode = current_mode&(DIPSW_SW1_MASK|DIPSW_SW3_MASK|DIPSW_SW2_MASK);
			  image = (unsigned short*)current_image_pointer();
		      switch (mode) {
		      case 0 : transfer_LCD_with_dma(&image[16520],
    14a4:	10bfffcc 	andi	r2,r2,65535
    14a8:	000f883a 	mov	r7,zero
    14ac:	100d883a 	mov	r6,r2
    14b0:	880b883a 	mov	r5,r17
    14b4:	8009883a 	mov	r4,r16
    14b8:	00012100 	call	1210 <transfer_LCD_with_dma>
		                	cam_get_xsize()>>1,
		                	cam_get_ysize(),0);
		      	  	   if ((current_mode&DIPSW_SW8_MASK)!=0) {
    14bc:	e0bffb03 	ldbu	r2,-20(fp)
    14c0:	10803fcc 	andi	r2,r2,255
    14c4:	1080201c 	xori	r2,r2,128
    14c8:	10bfe004 	addi	r2,r2,-128
    14cc:	1000c90e 	bge	r2,zero,17f4 <main+0x51c>
		      	  		  vga_set_swap(VGA_QuarterScreen);
    14d0:	01000204 	movi	r4,8
    14d4:	00020200 	call	2020 <vga_set_swap>
		      	  		  vga_set_pointer(image);
    14d8:	e13ffc17 	ldw	r4,-16(fp)
    14dc:	0001fec0 	call	1fec <vga_set_pointer>
		      	  	   }
		      	  	   break;
    14e0:	0000c406 	br	17f4 <main+0x51c>
		      case 1 : conv_grayscale((void *)image,
		    		                  cam_get_xsize()>>1,
    14e4:	00007640 	call	764 <cam_get_xsize>
		      	  	   if ((current_mode&DIPSW_SW8_MASK)!=0) {
		      	  		  vga_set_swap(VGA_QuarterScreen);
		      	  		  vga_set_pointer(image);
		      	  	   }
		      	  	   break;
		      case 1 : conv_grayscale((void *)image,
    14e8:	10bfffcc 	andi	r2,r2,65535
    14ec:	1004d07a 	srli	r2,r2,1
    14f0:	143fffcc 	andi	r16,r2,65535
		    		                  cam_get_xsize()>>1,
		    		                  cam_get_ysize());
    14f4:	00007b00 	call	7b0 <cam_get_ysize>
		      	  	   if ((current_mode&DIPSW_SW8_MASK)!=0) {
		      	  		  vga_set_swap(VGA_QuarterScreen);
		      	  		  vga_set_pointer(image);
		      	  	   }
		      	  	   break;
		      case 1 : conv_grayscale((void *)image,
    14f8:	10bfffcc 	andi	r2,r2,65535
    14fc:	100d883a 	mov	r6,r2
    1500:	800b883a 	mov	r5,r16
    1504:	e13ffc17 	ldw	r4,-16(fp)
    1508:	0000ab40 	call	ab4 <conv_grayscale>
		    		                  cam_get_xsize()>>1,
		    		                  cam_get_ysize());
		               grayscale = get_grayscale_picture();
    150c:	0000c700 	call	c70 <get_grayscale_picture>
    1510:	e0bffd15 	stw	r2,-12(fp)
		               transfer_LCD_with_dma(&grayscale[16520],
    1514:	e0bffd17 	ldw	r2,-12(fp)
    1518:	14102204 	addi	r16,r2,16520
		      		                	cam_get_xsize()>>1,
    151c:	00007640 	call	764 <cam_get_xsize>
		      	  	   break;
		      case 1 : conv_grayscale((void *)image,
		    		                  cam_get_xsize()>>1,
		    		                  cam_get_ysize());
		               grayscale = get_grayscale_picture();
		               transfer_LCD_with_dma(&grayscale[16520],
    1520:	10bfffcc 	andi	r2,r2,65535
    1524:	1004d07a 	srli	r2,r2,1
    1528:	147fffcc 	andi	r17,r2,65535
		      		                	cam_get_xsize()>>1,
		      		                	cam_get_ysize(),1);
    152c:	00007b00 	call	7b0 <cam_get_ysize>
		      	  	   break;
		      case 1 : conv_grayscale((void *)image,
		    		                  cam_get_xsize()>>1,
		    		                  cam_get_ysize());
		               grayscale = get_grayscale_picture();
		               transfer_LCD_with_dma(&grayscale[16520],
    1530:	10bfffcc 	andi	r2,r2,65535
    1534:	01c00044 	movi	r7,1
    1538:	100d883a 	mov	r6,r2
    153c:	880b883a 	mov	r5,r17
    1540:	8009883a 	mov	r4,r16
    1544:	00012100 	call	1210 <transfer_LCD_with_dma>
		      		                	cam_get_xsize()>>1,
		      		                	cam_get_ysize(),1);
		      	  	   if ((current_mode&DIPSW_SW8_MASK)!=0) {
    1548:	e0bffb03 	ldbu	r2,-20(fp)
    154c:	10803fcc 	andi	r2,r2,255
    1550:	1080201c 	xori	r2,r2,128
    1554:	10bfe004 	addi	r2,r2,-128
    1558:	1000a80e 	bge	r2,zero,17fc <main+0x524>
		      	  		  vga_set_swap(VGA_QuarterScreen|VGA_Grayscale);
    155c:	01000604 	movi	r4,24
    1560:	00020200 	call	2020 <vga_set_swap>
		      	  		  vga_set_pointer(grayscale);
    1564:	e13ffd17 	ldw	r4,-12(fp)
    1568:	0001fec0 	call	1fec <vga_set_pointer>
		      	  	   }
		      	  	   break;
    156c:	0000a306 	br	17fc <main+0x524>
		      case 2 : conv_grayscale((void *)image,
		    		                  cam_get_xsize()>>1,
    1570:	00007640 	call	764 <cam_get_xsize>
		      	  	   if ((current_mode&DIPSW_SW8_MASK)!=0) {
		      	  		  vga_set_swap(VGA_QuarterScreen|VGA_Grayscale);
		      	  		  vga_set_pointer(grayscale);
		      	  	   }
		      	  	   break;
		      case 2 : conv_grayscale((void *)image,
    1574:	10bfffcc 	andi	r2,r2,65535
    1578:	1004d07a 	srli	r2,r2,1
    157c:	143fffcc 	andi	r16,r2,65535
		    		                  cam_get_xsize()>>1,
		    		                  cam_get_ysize());
    1580:	00007b00 	call	7b0 <cam_get_ysize>
		      	  	   if ((current_mode&DIPSW_SW8_MASK)!=0) {
		      	  		  vga_set_swap(VGA_QuarterScreen|VGA_Grayscale);
		      	  		  vga_set_pointer(grayscale);
		      	  	   }
		      	  	   break;
		      case 2 : conv_grayscale((void *)image,
    1584:	10bfffcc 	andi	r2,r2,65535
    1588:	100d883a 	mov	r6,r2
    158c:	800b883a 	mov	r5,r16
    1590:	e13ffc17 	ldw	r4,-16(fp)
    1594:	0000ab40 	call	ab4 <conv_grayscale>
		    		                  cam_get_xsize()>>1,
		    		                  cam_get_ysize());
		               grayscale = get_grayscale_picture();
    1598:	0000c700 	call	c70 <get_grayscale_picture>
    159c:	e0bffd15 	stw	r2,-12(fp)
		               sobel_x_with_rgb(grayscale);
    15a0:	e13ffd17 	ldw	r4,-12(fp)
    15a4:	0001b580 	call	1b58 <sobel_x_with_rgb>
		               image = GetSobel_rgb();
    15a8:	0001fac0 	call	1fac <GetSobel_rgb>
    15ac:	e0bffc15 	stw	r2,-16(fp)
		               transfer_LCD_with_dma(&image[16520],
    15b0:	e0fffc17 	ldw	r3,-16(fp)
    15b4:	00a04414 	movui	r2,33040
    15b8:	18a1883a 	add	r16,r3,r2
		      		                	cam_get_xsize()>>1,
    15bc:	00007640 	call	764 <cam_get_xsize>
		    		                  cam_get_xsize()>>1,
		    		                  cam_get_ysize());
		               grayscale = get_grayscale_picture();
		               sobel_x_with_rgb(grayscale);
		               image = GetSobel_rgb();
		               transfer_LCD_with_dma(&image[16520],
    15c0:	10bfffcc 	andi	r2,r2,65535
    15c4:	1004d07a 	srli	r2,r2,1
    15c8:	147fffcc 	andi	r17,r2,65535
		      		                	cam_get_xsize()>>1,
		      		                	cam_get_ysize(),0);
    15cc:	00007b00 	call	7b0 <cam_get_ysize>
		    		                  cam_get_xsize()>>1,
		    		                  cam_get_ysize());
		               grayscale = get_grayscale_picture();
		               sobel_x_with_rgb(grayscale);
		               image = GetSobel_rgb();
		               transfer_LCD_with_dma(&image[16520],
    15d0:	10bfffcc 	andi	r2,r2,65535
    15d4:	000f883a 	mov	r7,zero
    15d8:	100d883a 	mov	r6,r2
    15dc:	880b883a 	mov	r5,r17
    15e0:	8009883a 	mov	r4,r16
    15e4:	00012100 	call	1210 <transfer_LCD_with_dma>
		      		                	cam_get_xsize()>>1,
		      		                	cam_get_ysize(),0);
		      	  	   if ((current_mode&DIPSW_SW8_MASK)!=0) {
    15e8:	e0bffb03 	ldbu	r2,-20(fp)
    15ec:	10803fcc 	andi	r2,r2,255
    15f0:	1080201c 	xori	r2,r2,128
    15f4:	10bfe004 	addi	r2,r2,-128
    15f8:	1000820e 	bge	r2,zero,1804 <main+0x52c>
		      	  		  vga_set_swap(VGA_QuarterScreen);
    15fc:	01000204 	movi	r4,8
    1600:	00020200 	call	2020 <vga_set_swap>
		      	  		  vga_set_pointer(image);
    1604:	e13ffc17 	ldw	r4,-16(fp)
    1608:	0001fec0 	call	1fec <vga_set_pointer>
		      	  	   }
		      	  	   break;
    160c:	00007d06 	br	1804 <main+0x52c>
		      case 3 : conv_grayscale((void *)image,
		    		                  cam_get_xsize()>>1,
    1610:	00007640 	call	764 <cam_get_xsize>
		      	  	   if ((current_mode&DIPSW_SW8_MASK)!=0) {
		      	  		  vga_set_swap(VGA_QuarterScreen);
		      	  		  vga_set_pointer(image);
		      	  	   }
		      	  	   break;
		      case 3 : conv_grayscale((void *)image,
    1614:	10bfffcc 	andi	r2,r2,65535
    1618:	1004d07a 	srli	r2,r2,1
    161c:	143fffcc 	andi	r16,r2,65535
		    		                  cam_get_xsize()>>1,
		    		                  cam_get_ysize());
    1620:	00007b00 	call	7b0 <cam_get_ysize>
		      	  	   if ((current_mode&DIPSW_SW8_MASK)!=0) {
		      	  		  vga_set_swap(VGA_QuarterScreen);
		      	  		  vga_set_pointer(image);
		      	  	   }
		      	  	   break;
		      case 3 : conv_grayscale((void *)image,
    1624:	10bfffcc 	andi	r2,r2,65535
    1628:	100d883a 	mov	r6,r2
    162c:	800b883a 	mov	r5,r16
    1630:	e13ffc17 	ldw	r4,-16(fp)
    1634:	0000ab40 	call	ab4 <conv_grayscale>
		    		                  cam_get_xsize()>>1,
		    		                  cam_get_ysize());
		               grayscale = get_grayscale_picture();
    1638:	0000c700 	call	c70 <get_grayscale_picture>
    163c:	e0bffd15 	stw	r2,-12(fp)
		               sobel_x(grayscale);
    1640:	e13ffd17 	ldw	r4,-12(fp)
    1644:	0001a900 	call	1a90 <sobel_x>
		               sobel_y_with_rgb(grayscale);
    1648:	e13ffd17 	ldw	r4,-12(fp)
    164c:	0001d5c0 	call	1d5c <sobel_y_with_rgb>
		               image = GetSobel_rgb();
    1650:	0001fac0 	call	1fac <GetSobel_rgb>
    1654:	e0bffc15 	stw	r2,-16(fp)
		               transfer_LCD_with_dma(&image[16520],
    1658:	e0fffc17 	ldw	r3,-16(fp)
    165c:	00a04414 	movui	r2,33040
    1660:	18a1883a 	add	r16,r3,r2
		      		                	cam_get_xsize()>>1,
    1664:	00007640 	call	764 <cam_get_xsize>
		    		                  cam_get_ysize());
		               grayscale = get_grayscale_picture();
		               sobel_x(grayscale);
		               sobel_y_with_rgb(grayscale);
		               image = GetSobel_rgb();
		               transfer_LCD_with_dma(&image[16520],
    1668:	10bfffcc 	andi	r2,r2,65535
    166c:	1004d07a 	srli	r2,r2,1
    1670:	147fffcc 	andi	r17,r2,65535
		      		                	cam_get_xsize()>>1,
		      		                	cam_get_ysize(),0);
    1674:	00007b00 	call	7b0 <cam_get_ysize>
		    		                  cam_get_ysize());
		               grayscale = get_grayscale_picture();
		               sobel_x(grayscale);
		               sobel_y_with_rgb(grayscale);
		               image = GetSobel_rgb();
		               transfer_LCD_with_dma(&image[16520],
    1678:	10bfffcc 	andi	r2,r2,65535
    167c:	000f883a 	mov	r7,zero
    1680:	100d883a 	mov	r6,r2
    1684:	880b883a 	mov	r5,r17
    1688:	8009883a 	mov	r4,r16
    168c:	00012100 	call	1210 <transfer_LCD_with_dma>
		      		                	cam_get_xsize()>>1,
		      		                	cam_get_ysize(),0);
		      	  	   if ((current_mode&DIPSW_SW8_MASK)!=0) {
    1690:	e0bffb03 	ldbu	r2,-20(fp)
    1694:	10803fcc 	andi	r2,r2,255
    1698:	1080201c 	xori	r2,r2,128
    169c:	10bfe004 	addi	r2,r2,-128
    16a0:	10005a0e 	bge	r2,zero,180c <main+0x534>
		      	  		  vga_set_swap(VGA_QuarterScreen);
    16a4:	01000204 	movi	r4,8
    16a8:	00020200 	call	2020 <vga_set_swap>
		      	  		  vga_set_pointer(image);
    16ac:	e13ffc17 	ldw	r4,-16(fp)
    16b0:	0001fec0 	call	1fec <vga_set_pointer>
		      	  	   }
		      	  	   break;
    16b4:	00005506 	br	180c <main+0x534>
		      default:

		    	       start_conv_grayscale = alt_timestamp();
    16b8:	000ffd00 	call	ffd0 <alt_timestamp>
    16bc:	e0bff815 	stw	r2,-32(fp)
		    	  	   conv_grayscale((void *)image,
	                                  cam_get_xsize()>>1,
    16c0:	00007640 	call	764 <cam_get_xsize>
		      	  	   }
		      	  	   break;
		      default:

		    	       start_conv_grayscale = alt_timestamp();
		    	  	   conv_grayscale((void *)image,
    16c4:	10bfffcc 	andi	r2,r2,65535
    16c8:	1004d07a 	srli	r2,r2,1
    16cc:	143fffcc 	andi	r16,r2,65535
	                                  cam_get_xsize()>>1,
	                                  cam_get_ysize());
    16d0:	00007b00 	call	7b0 <cam_get_ysize>
		      	  	   }
		      	  	   break;
		      default:

		    	       start_conv_grayscale = alt_timestamp();
		    	  	   conv_grayscale((void *)image,
    16d4:	10bfffcc 	andi	r2,r2,65535
    16d8:	100d883a 	mov	r6,r2
    16dc:	800b883a 	mov	r5,r16
    16e0:	e13ffc17 	ldw	r4,-16(fp)
    16e4:	0000ab40 	call	ab4 <conv_grayscale>
	                                  cam_get_xsize()>>1,
	                                  cam_get_ysize());
		    	  	   end_conv_grayscale = alt_timestamp();
    16e8:	000ffd00 	call	ffd0 <alt_timestamp>
    16ec:	e0bff915 	stw	r2,-28(fp)
		    	  	   delta_grayscale = end_conv_grayscale - start_conv_grayscale;
    16f0:	e0fff917 	ldw	r3,-28(fp)
    16f4:	e0bff817 	ldw	r2,-32(fp)
    16f8:	1885c83a 	sub	r2,r3,r2
    16fc:	e0bffa15 	stw	r2,-24(fp)
		    	  	   printf("Grayscale : %d\n", delta_grayscale);
    1700:	e17ffa17 	ldw	r5,-24(fp)
    1704:	01000074 	movhi	r4,1
    1708:	21060704 	addi	r4,r4,6172
    170c:	0002a700 	call	2a70 <printf>

                       grayscale = get_grayscale_picture();
    1710:	0000c700 	call	c70 <get_grayscale_picture>
    1714:	e0bffd15 	stw	r2,-12(fp)


		               start_sobel_x = alt_timestamp();
    1718:	000ffd00 	call	ffd0 <alt_timestamp>
    171c:	e0bff215 	stw	r2,-56(fp)
		               sobel_x(grayscale);
    1720:	e13ffd17 	ldw	r4,-12(fp)
    1724:	0001a900 	call	1a90 <sobel_x>
		               end_sobel_x = alt_timestamp();
    1728:	000ffd00 	call	ffd0 <alt_timestamp>
    172c:	e0bff315 	stw	r2,-52(fp)
		               delta_x = end_sobel_x - start_sobel_x;
    1730:	e0fff317 	ldw	r3,-52(fp)
    1734:	e0bff217 	ldw	r2,-56(fp)
    1738:	1885c83a 	sub	r2,r3,r2
    173c:	e0bff415 	stw	r2,-48(fp)
		               printf("Sobel x : %d\n", delta_x);
    1740:	e17ff417 	ldw	r5,-48(fp)
    1744:	01000074 	movhi	r4,1
    1748:	21060b04 	addi	r4,r4,6188
    174c:	0002a700 	call	2a70 <printf>


		               start_sobel_y = alt_timestamp();
    1750:	000ffd00 	call	ffd0 <alt_timestamp>
    1754:	e0bff515 	stw	r2,-44(fp)
		               sobel_y(grayscale);
    1758:	e13ffd17 	ldw	r4,-12(fp)
    175c:	0001c940 	call	1c94 <sobel_y>
		               end_sobel_y = alt_timestamp();
    1760:	000ffd00 	call	ffd0 <alt_timestamp>
    1764:	e0bff615 	stw	r2,-40(fp)
		               delta_y = end_sobel_y - start_sobel_y;
    1768:	e0fff617 	ldw	r3,-40(fp)
    176c:	e0bff517 	ldw	r2,-44(fp)
    1770:	1885c83a 	sub	r2,r3,r2
    1774:	e0bff715 	stw	r2,-36(fp)
		               printf("Sobel y : %d\n", delta_y);
    1778:	e17ff717 	ldw	r5,-36(fp)
    177c:	01000074 	movhi	r4,1
    1780:	21060f04 	addi	r4,r4,6204
    1784:	0002a700 	call	2a70 <printf>

                       sobel_threshold(128);
    1788:	01002004 	movi	r4,128
    178c:	0001e980 	call	1e98 <sobel_threshold>
                       grayscale=GetSobelResult();
    1790:	0001fcc0 	call	1fcc <GetSobelResult>
    1794:	e0bffd15 	stw	r2,-12(fp)
		               transfer_LCD_with_dma(&grayscale[16520],
    1798:	e0bffd17 	ldw	r2,-12(fp)
    179c:	14102204 	addi	r16,r2,16520
		      		                	cam_get_xsize()>>1,
    17a0:	00007640 	call	764 <cam_get_xsize>
		               delta_y = end_sobel_y - start_sobel_y;
		               printf("Sobel y : %d\n", delta_y);

                       sobel_threshold(128);
                       grayscale=GetSobelResult();
		               transfer_LCD_with_dma(&grayscale[16520],
    17a4:	10bfffcc 	andi	r2,r2,65535
    17a8:	1004d07a 	srli	r2,r2,1
    17ac:	147fffcc 	andi	r17,r2,65535
		      		                	cam_get_xsize()>>1,
		      		                	cam_get_ysize(),1);
    17b0:	00007b00 	call	7b0 <cam_get_ysize>
		               delta_y = end_sobel_y - start_sobel_y;
		               printf("Sobel y : %d\n", delta_y);

                       sobel_threshold(128);
                       grayscale=GetSobelResult();
		               transfer_LCD_with_dma(&grayscale[16520],
    17b4:	10bfffcc 	andi	r2,r2,65535
    17b8:	01c00044 	movi	r7,1
    17bc:	100d883a 	mov	r6,r2
    17c0:	880b883a 	mov	r5,r17
    17c4:	8009883a 	mov	r4,r16
    17c8:	00012100 	call	1210 <transfer_LCD_with_dma>
		      		                	cam_get_xsize()>>1,
		      		                	cam_get_ysize(),1);
		      	  	   if ((current_mode&DIPSW_SW8_MASK)!=0) {
    17cc:	e0bffb03 	ldbu	r2,-20(fp)
    17d0:	10803fcc 	andi	r2,r2,255
    17d4:	1080201c 	xori	r2,r2,128
    17d8:	10bfe004 	addi	r2,r2,-128
    17dc:	10000d0e 	bge	r2,zero,1814 <main+0x53c>
		      	  		  vga_set_swap(VGA_QuarterScreen|VGA_Grayscale);
    17e0:	01000604 	movi	r4,24
    17e4:	00020200 	call	2020 <vga_set_swap>
		      	  		  vga_set_pointer(grayscale);
    17e8:	e13ffd17 	ldw	r4,-12(fp)
    17ec:	0001fec0 	call	1fec <vga_set_pointer>
		      	  	   }
		      	  	   break;
    17f0:	00000806 	br	1814 <main+0x53c>
		                	cam_get_ysize(),0);
		      	  	   if ((current_mode&DIPSW_SW8_MASK)!=0) {
		      	  		  vga_set_swap(VGA_QuarterScreen);
		      	  		  vga_set_pointer(image);
		      	  	   }
		      	  	   break;
    17f4:	0001883a 	nop
    17f8:	003efc06 	br	13ec <main+0x114>
		      		                	cam_get_ysize(),1);
		      	  	   if ((current_mode&DIPSW_SW8_MASK)!=0) {
		      	  		  vga_set_swap(VGA_QuarterScreen|VGA_Grayscale);
		      	  		  vga_set_pointer(grayscale);
		      	  	   }
		      	  	   break;
    17fc:	0001883a 	nop
    1800:	003efa06 	br	13ec <main+0x114>
		      		                	cam_get_ysize(),0);
		      	  	   if ((current_mode&DIPSW_SW8_MASK)!=0) {
		      	  		  vga_set_swap(VGA_QuarterScreen);
		      	  		  vga_set_pointer(image);
		      	  	   }
		      	  	   break;
    1804:	0001883a 	nop
    1808:	003ef806 	br	13ec <main+0x114>
		      		                	cam_get_ysize(),0);
		      	  	   if ((current_mode&DIPSW_SW8_MASK)!=0) {
		      	  		  vga_set_swap(VGA_QuarterScreen);
		      	  		  vga_set_pointer(image);
		      	  	   }
		      	  	   break;
    180c:	0001883a 	nop
    1810:	003ef606 	br	13ec <main+0x114>
		      		                	cam_get_ysize(),1);
		      	  	   if ((current_mode&DIPSW_SW8_MASK)!=0) {
		      	  		  vga_set_swap(VGA_QuarterScreen|VGA_Grayscale);
		      	  		  vga_set_pointer(grayscale);
		      	  	   }
		      	  	   break;
    1814:	0001883a 	nop
		      }
		  }
	  }
  } while (1);
    1818:	003ef406 	br	13ec <main+0x114>

0000181c <init_sobel_arrays>:
unsigned short *sobel_rgb565;
unsigned char *sobel_result;
int sobel_width;
int sobel_height;

void init_sobel_arrays(int width , int height) {
    181c:	defffb04 	addi	sp,sp,-20
    1820:	dfc00415 	stw	ra,16(sp)
    1824:	df000315 	stw	fp,12(sp)
    1828:	df000304 	addi	fp,sp,12
    182c:	e13ffe15 	stw	r4,-8(fp)
    1830:	e17fff15 	stw	r5,-4(fp)
	int loop;
	sobel_width = width;
    1834:	e0bffe17 	ldw	r2,-8(fp)
    1838:	d0a6cf15 	stw	r2,-25796(gp)
	sobel_height = height;
    183c:	e0bfff17 	ldw	r2,-4(fp)
    1840:	d0a6d115 	stw	r2,-25788(gp)
	if (sobel_x_result != NULL)
    1844:	d0a6d217 	ldw	r2,-25784(gp)
    1848:	10000326 	beq	r2,zero,1858 <init_sobel_arrays+0x3c>
		free(sobel_x_result);
    184c:	d0a6d217 	ldw	r2,-25784(gp)
    1850:	1009883a 	mov	r4,r2
    1854:	00022200 	call	2220 <free>
	sobel_x_result = (short *)malloc(width*height*sizeof(short));
    1858:	e0fffe17 	ldw	r3,-8(fp)
    185c:	e0bfff17 	ldw	r2,-4(fp)
    1860:	1885383a 	mul	r2,r3,r2
    1864:	1085883a 	add	r2,r2,r2
    1868:	1009883a 	mov	r4,r2
    186c:	000220c0 	call	220c <malloc>
    1870:	d0a6d215 	stw	r2,-25784(gp)
	if (sobel_y_result != NULL)
    1874:	d0a6d317 	ldw	r2,-25780(gp)
    1878:	10000326 	beq	r2,zero,1888 <init_sobel_arrays+0x6c>
		free(sobel_y_result);
    187c:	d0a6d317 	ldw	r2,-25780(gp)
    1880:	1009883a 	mov	r4,r2
    1884:	00022200 	call	2220 <free>
	sobel_y_result = (short *)malloc(width*height*sizeof(short));
    1888:	e0fffe17 	ldw	r3,-8(fp)
    188c:	e0bfff17 	ldw	r2,-4(fp)
    1890:	1885383a 	mul	r2,r3,r2
    1894:	1085883a 	add	r2,r2,r2
    1898:	1009883a 	mov	r4,r2
    189c:	000220c0 	call	220c <malloc>
    18a0:	d0a6d315 	stw	r2,-25780(gp)
	if (sobel_result != NULL)
    18a4:	d0a6d017 	ldw	r2,-25792(gp)
    18a8:	10000326 	beq	r2,zero,18b8 <init_sobel_arrays+0x9c>
		free(sobel_result);
    18ac:	d0a6d017 	ldw	r2,-25792(gp)
    18b0:	1009883a 	mov	r4,r2
    18b4:	00022200 	call	2220 <free>
	sobel_result = (unsigned char *)malloc(width*height*sizeof(unsigned char));
    18b8:	e0fffe17 	ldw	r3,-8(fp)
    18bc:	e0bfff17 	ldw	r2,-4(fp)
    18c0:	1885383a 	mul	r2,r3,r2
    18c4:	1009883a 	mov	r4,r2
    18c8:	000220c0 	call	220c <malloc>
    18cc:	d0a6d015 	stw	r2,-25792(gp)
	if (sobel_rgb565 != NULL)
    18d0:	d0a6d417 	ldw	r2,-25776(gp)
    18d4:	10000326 	beq	r2,zero,18e4 <init_sobel_arrays+0xc8>
		free(sobel_rgb565);
    18d8:	d0a6d417 	ldw	r2,-25776(gp)
    18dc:	1009883a 	mov	r4,r2
    18e0:	00022200 	call	2220 <free>
	sobel_rgb565 = (unsigned short *)malloc(width*height*sizeof(unsigned short));
    18e4:	e0fffe17 	ldw	r3,-8(fp)
    18e8:	e0bfff17 	ldw	r2,-4(fp)
    18ec:	1885383a 	mul	r2,r3,r2
    18f0:	1085883a 	add	r2,r2,r2
    18f4:	1009883a 	mov	r4,r2
    18f8:	000220c0 	call	220c <malloc>
    18fc:	d0a6d415 	stw	r2,-25776(gp)
	for (loop = 0 ; loop < width*height ; loop++) {
    1900:	e03ffd15 	stw	zero,-12(fp)
    1904:	00001606 	br	1960 <init_sobel_arrays+0x144>
		sobel_x_result[loop] = 0;
    1908:	d0e6d217 	ldw	r3,-25784(gp)
    190c:	e0bffd17 	ldw	r2,-12(fp)
    1910:	1085883a 	add	r2,r2,r2
    1914:	1885883a 	add	r2,r3,r2
    1918:	1000000d 	sth	zero,0(r2)
		sobel_y_result[loop] = 0;
    191c:	d0e6d317 	ldw	r3,-25780(gp)
    1920:	e0bffd17 	ldw	r2,-12(fp)
    1924:	1085883a 	add	r2,r2,r2
    1928:	1885883a 	add	r2,r3,r2
    192c:	1000000d 	sth	zero,0(r2)
		sobel_result[loop] = 0;
    1930:	d0e6d017 	ldw	r3,-25792(gp)
    1934:	e0bffd17 	ldw	r2,-12(fp)
    1938:	1885883a 	add	r2,r3,r2
    193c:	10000005 	stb	zero,0(r2)
		sobel_rgb565[loop] = 0;
    1940:	d0e6d417 	ldw	r3,-25776(gp)
    1944:	e0bffd17 	ldw	r2,-12(fp)
    1948:	1085883a 	add	r2,r2,r2
    194c:	1885883a 	add	r2,r3,r2
    1950:	1000000d 	sth	zero,0(r2)
		free(sobel_result);
	sobel_result = (unsigned char *)malloc(width*height*sizeof(unsigned char));
	if (sobel_rgb565 != NULL)
		free(sobel_rgb565);
	sobel_rgb565 = (unsigned short *)malloc(width*height*sizeof(unsigned short));
	for (loop = 0 ; loop < width*height ; loop++) {
    1954:	e0bffd17 	ldw	r2,-12(fp)
    1958:	10800044 	addi	r2,r2,1
    195c:	e0bffd15 	stw	r2,-12(fp)
    1960:	e0fffe17 	ldw	r3,-8(fp)
    1964:	e0bfff17 	ldw	r2,-4(fp)
    1968:	1885383a 	mul	r2,r3,r2
    196c:	e0fffd17 	ldw	r3,-12(fp)
    1970:	18bfe516 	blt	r3,r2,1908 <init_sobel_arrays+0xec>
		sobel_x_result[loop] = 0;
		sobel_y_result[loop] = 0;
		sobel_result[loop] = 0;
		sobel_rgb565[loop] = 0;
	}
}
    1974:	0001883a 	nop
    1978:	e037883a 	mov	sp,fp
    197c:	dfc00117 	ldw	ra,4(sp)
    1980:	df000017 	ldw	fp,0(sp)
    1984:	dec00204 	addi	sp,sp,8
    1988:	f800283a 	ret

0000198c <sobel_mac>:

short sobel_mac( unsigned char *pixels,
                 int x,
                 int y,
                 const char *filter,
                 unsigned int width ) {
    198c:	defff904 	addi	sp,sp,-28
    1990:	df000615 	stw	fp,24(sp)
    1994:	df000604 	addi	fp,sp,24
    1998:	e13ffc15 	stw	r4,-16(fp)
    199c:	e17ffd15 	stw	r5,-12(fp)
    19a0:	e1bffe15 	stw	r6,-8(fp)
    19a4:	e1ffff15 	stw	r7,-4(fp)
   short dy,dx;
   short result = 0;
    19a8:	e03ffb0d 	sth	zero,-20(fp)
   for (dy = -1 ; dy < 2 ; dy++) {
    19ac:	00bfffc4 	movi	r2,-1
    19b0:	e0bffa0d 	sth	r2,-24(fp)
    19b4:	00002e06 	br	1a70 <sobel_mac+0xe4>
      for (dx = -1 ; dx < 2 ; dx++) {
    19b8:	00bfffc4 	movi	r2,-1
    19bc:	e0bffa8d 	sth	r2,-22(fp)
    19c0:	00002506 	br	1a58 <sobel_mac+0xcc>
         result += filter[(dy+1)*3+(dx+1)]*
    19c4:	e0bffa0f 	ldh	r2,-24(fp)
    19c8:	10c00044 	addi	r3,r2,1
    19cc:	1805883a 	mov	r2,r3
    19d0:	1085883a 	add	r2,r2,r2
    19d4:	10c7883a 	add	r3,r2,r3
    19d8:	e0bffa8f 	ldh	r2,-22(fp)
    19dc:	10800044 	addi	r2,r2,1
    19e0:	1885883a 	add	r2,r3,r2
    19e4:	1007883a 	mov	r3,r2
    19e8:	e0bfff17 	ldw	r2,-4(fp)
    19ec:	10c5883a 	add	r2,r2,r3
    19f0:	10800003 	ldbu	r2,0(r2)
    19f4:	10c03fcc 	andi	r3,r2,255
    19f8:	18c0201c 	xori	r3,r3,128
    19fc:	18ffe004 	addi	r3,r3,-128
                   pixels[(y+dy)*width+(x+dx)];
    1a00:	e13ffa0f 	ldh	r4,-24(fp)
    1a04:	e0bffe17 	ldw	r2,-8(fp)
    1a08:	2085883a 	add	r2,r4,r2
    1a0c:	1009883a 	mov	r4,r2
    1a10:	e0800117 	ldw	r2,4(fp)
    1a14:	2085383a 	mul	r2,r4,r2
    1a18:	e17ffa8f 	ldh	r5,-22(fp)
    1a1c:	e13ffd17 	ldw	r4,-12(fp)
    1a20:	2909883a 	add	r4,r5,r4
    1a24:	1105883a 	add	r2,r2,r4
    1a28:	e13ffc17 	ldw	r4,-16(fp)
    1a2c:	2085883a 	add	r2,r4,r2
    1a30:	10800003 	ldbu	r2,0(r2)
                 unsigned int width ) {
   short dy,dx;
   short result = 0;
   for (dy = -1 ; dy < 2 ; dy++) {
      for (dx = -1 ; dx < 2 ; dx++) {
         result += filter[(dy+1)*3+(dx+1)]*
    1a34:	10803fcc 	andi	r2,r2,255
    1a38:	1885383a 	mul	r2,r3,r2
    1a3c:	1007883a 	mov	r3,r2
    1a40:	e0bffb0b 	ldhu	r2,-20(fp)
    1a44:	1885883a 	add	r2,r3,r2
    1a48:	e0bffb0d 	sth	r2,-20(fp)
                 const char *filter,
                 unsigned int width ) {
   short dy,dx;
   short result = 0;
   for (dy = -1 ; dy < 2 ; dy++) {
      for (dx = -1 ; dx < 2 ; dx++) {
    1a4c:	e0bffa8b 	ldhu	r2,-22(fp)
    1a50:	10800044 	addi	r2,r2,1
    1a54:	e0bffa8d 	sth	r2,-22(fp)
    1a58:	e0bffa8f 	ldh	r2,-22(fp)
    1a5c:	10800090 	cmplti	r2,r2,2
    1a60:	103fd81e 	bne	r2,zero,19c4 <sobel_mac+0x38>
                 int y,
                 const char *filter,
                 unsigned int width ) {
   short dy,dx;
   short result = 0;
   for (dy = -1 ; dy < 2 ; dy++) {
    1a64:	e0bffa0b 	ldhu	r2,-24(fp)
    1a68:	10800044 	addi	r2,r2,1
    1a6c:	e0bffa0d 	sth	r2,-24(fp)
    1a70:	e0bffa0f 	ldh	r2,-24(fp)
    1a74:	10800090 	cmplti	r2,r2,2
    1a78:	103fcf1e 	bne	r2,zero,19b8 <sobel_mac+0x2c>
      for (dx = -1 ; dx < 2 ; dx++) {
         result += filter[(dy+1)*3+(dx+1)]*
                   pixels[(y+dy)*width+(x+dx)];
      }
   }
   return result;
    1a7c:	e0bffb0b 	ldhu	r2,-20(fp)
}
    1a80:	e037883a 	mov	sp,fp
    1a84:	df000017 	ldw	fp,0(sp)
    1a88:	dec00104 	addi	sp,sp,4
    1a8c:	f800283a 	ret

00001a90 <sobel_x>:

void sobel_x( unsigned char *source ) {
    1a90:	defff904 	addi	sp,sp,-28
    1a94:	dfc00615 	stw	ra,24(sp)
    1a98:	df000515 	stw	fp,20(sp)
    1a9c:	dc000415 	stw	r16,16(sp)
    1aa0:	df000504 	addi	fp,sp,20
    1aa4:	e13ffe15 	stw	r4,-8(fp)
   int x,y;

   for (y = 1 ; y < (sobel_height-1) ; y++) {
    1aa8:	00800044 	movi	r2,1
    1aac:	e0bffd15 	stw	r2,-12(fp)
    1ab0:	00001e06 	br	1b2c <sobel_x+0x9c>
      for (x = 1 ; x < (sobel_width-1) ; x++) {
    1ab4:	00800044 	movi	r2,1
    1ab8:	e0bffc15 	stw	r2,-16(fp)
    1abc:	00001406 	br	1b10 <sobel_x+0x80>
         sobel_x_result[y*sobel_width+x] = sobel_mac(source,x,y,gx_array,sobel_width);
    1ac0:	d0e6d217 	ldw	r3,-25784(gp)
    1ac4:	d126cf17 	ldw	r4,-25796(gp)
    1ac8:	e0bffd17 	ldw	r2,-12(fp)
    1acc:	2089383a 	mul	r4,r4,r2
    1ad0:	e0bffc17 	ldw	r2,-16(fp)
    1ad4:	2085883a 	add	r2,r4,r2
    1ad8:	1085883a 	add	r2,r2,r2
    1adc:	18a1883a 	add	r16,r3,r2
    1ae0:	d0a6cf17 	ldw	r2,-25796(gp)
    1ae4:	d8800015 	stw	r2,0(sp)
    1ae8:	01c00074 	movhi	r7,1
    1aec:	39c61284 	addi	r7,r7,6218
    1af0:	e1bffd17 	ldw	r6,-12(fp)
    1af4:	e17ffc17 	ldw	r5,-16(fp)
    1af8:	e13ffe17 	ldw	r4,-8(fp)
    1afc:	000198c0 	call	198c <sobel_mac>
    1b00:	8080000d 	sth	r2,0(r16)

void sobel_x( unsigned char *source ) {
   int x,y;

   for (y = 1 ; y < (sobel_height-1) ; y++) {
      for (x = 1 ; x < (sobel_width-1) ; x++) {
    1b04:	e0bffc17 	ldw	r2,-16(fp)
    1b08:	10800044 	addi	r2,r2,1
    1b0c:	e0bffc15 	stw	r2,-16(fp)
    1b10:	d0a6cf17 	ldw	r2,-25796(gp)
    1b14:	10bfffc4 	addi	r2,r2,-1
    1b18:	e0fffc17 	ldw	r3,-16(fp)
    1b1c:	18bfe816 	blt	r3,r2,1ac0 <sobel_x+0x30>
}

void sobel_x( unsigned char *source ) {
   int x,y;

   for (y = 1 ; y < (sobel_height-1) ; y++) {
    1b20:	e0bffd17 	ldw	r2,-12(fp)
    1b24:	10800044 	addi	r2,r2,1
    1b28:	e0bffd15 	stw	r2,-12(fp)
    1b2c:	d0a6d117 	ldw	r2,-25788(gp)
    1b30:	10bfffc4 	addi	r2,r2,-1
    1b34:	e0fffd17 	ldw	r3,-12(fp)
    1b38:	18bfde16 	blt	r3,r2,1ab4 <sobel_x+0x24>
      for (x = 1 ; x < (sobel_width-1) ; x++) {
         sobel_x_result[y*sobel_width+x] = sobel_mac(source,x,y,gx_array,sobel_width);
      }
   }
}
    1b3c:	0001883a 	nop
    1b40:	e6ffff04 	addi	sp,fp,-4
    1b44:	dfc00217 	ldw	ra,8(sp)
    1b48:	df000117 	ldw	fp,4(sp)
    1b4c:	dc000017 	ldw	r16,0(sp)
    1b50:	dec00304 	addi	sp,sp,12
    1b54:	f800283a 	ret

00001b58 <sobel_x_with_rgb>:

void sobel_x_with_rgb( unsigned char *source ) {
    1b58:	defff904 	addi	sp,sp,-28
    1b5c:	dfc00615 	stw	ra,24(sp)
    1b60:	df000515 	stw	fp,20(sp)
    1b64:	df000504 	addi	fp,sp,20
    1b68:	e13fff15 	stw	r4,-4(fp)
   int x,y;
   short result;

   for (y = 1 ; y < (sobel_height-1) ; y++) {
    1b6c:	00800044 	movi	r2,1
    1b70:	e0bffd15 	stw	r2,-12(fp)
    1b74:	00003d06 	br	1c6c <sobel_x_with_rgb+0x114>
      for (x = 1 ; x < (sobel_width-1) ; x++) {
    1b78:	00800044 	movi	r2,1
    1b7c:	e0bffc15 	stw	r2,-16(fp)
    1b80:	00003306 	br	1c50 <sobel_x_with_rgb+0xf8>
    	  result = sobel_mac(source,x,y,gx_array,sobel_width);
    1b84:	d0a6cf17 	ldw	r2,-25796(gp)
    1b88:	d8800015 	stw	r2,0(sp)
    1b8c:	01c00074 	movhi	r7,1
    1b90:	39c61284 	addi	r7,r7,6218
    1b94:	e1bffd17 	ldw	r6,-12(fp)
    1b98:	e17ffc17 	ldw	r5,-16(fp)
    1b9c:	e13fff17 	ldw	r4,-4(fp)
    1ba0:	000198c0 	call	198c <sobel_mac>
    1ba4:	e0bffe0d 	sth	r2,-8(fp)
          sobel_x_result[y*sobel_width+x] = result;
    1ba8:	d0e6d217 	ldw	r3,-25784(gp)
    1bac:	d126cf17 	ldw	r4,-25796(gp)
    1bb0:	e0bffd17 	ldw	r2,-12(fp)
    1bb4:	2089383a 	mul	r4,r4,r2
    1bb8:	e0bffc17 	ldw	r2,-16(fp)
    1bbc:	2085883a 	add	r2,r4,r2
    1bc0:	1085883a 	add	r2,r2,r2
    1bc4:	1885883a 	add	r2,r3,r2
    1bc8:	e0fffe0b 	ldhu	r3,-8(fp)
    1bcc:	10c0000d 	sth	r3,0(r2)
          if (result < 0) {
    1bd0:	e0bffe0f 	ldh	r2,-8(fp)
    1bd4:	10000e0e 	bge	r2,zero,1c10 <sobel_x_with_rgb+0xb8>
        	  sobel_rgb565[y*sobel_width+x] = ((-result)>>2)<<5;
    1bd8:	d0e6d417 	ldw	r3,-25776(gp)
    1bdc:	d126cf17 	ldw	r4,-25796(gp)
    1be0:	e0bffd17 	ldw	r2,-12(fp)
    1be4:	2089383a 	mul	r4,r4,r2
    1be8:	e0bffc17 	ldw	r2,-16(fp)
    1bec:	2085883a 	add	r2,r4,r2
    1bf0:	1085883a 	add	r2,r2,r2
    1bf4:	1885883a 	add	r2,r3,r2
    1bf8:	e0fffe0f 	ldh	r3,-8(fp)
    1bfc:	00c7c83a 	sub	r3,zero,r3
    1c00:	1807d0ba 	srai	r3,r3,2
    1c04:	1806917a 	slli	r3,r3,5
    1c08:	10c0000d 	sth	r3,0(r2)
    1c0c:	00000d06 	br	1c44 <sobel_x_with_rgb+0xec>
          } else {
        	  sobel_rgb565[y*sobel_width+x] = ((result>>3)&0x1F)<<11;
    1c10:	d0e6d417 	ldw	r3,-25776(gp)
    1c14:	d126cf17 	ldw	r4,-25796(gp)
    1c18:	e0bffd17 	ldw	r2,-12(fp)
    1c1c:	2089383a 	mul	r4,r4,r2
    1c20:	e0bffc17 	ldw	r2,-16(fp)
    1c24:	2085883a 	add	r2,r4,r2
    1c28:	1085883a 	add	r2,r2,r2
    1c2c:	1885883a 	add	r2,r3,r2
    1c30:	e0fffe0f 	ldh	r3,-8(fp)
    1c34:	1807d0fa 	srai	r3,r3,3
    1c38:	18ffffcc 	andi	r3,r3,65535
    1c3c:	180692fa 	slli	r3,r3,11
    1c40:	10c0000d 	sth	r3,0(r2)
void sobel_x_with_rgb( unsigned char *source ) {
   int x,y;
   short result;

   for (y = 1 ; y < (sobel_height-1) ; y++) {
      for (x = 1 ; x < (sobel_width-1) ; x++) {
    1c44:	e0bffc17 	ldw	r2,-16(fp)
    1c48:	10800044 	addi	r2,r2,1
    1c4c:	e0bffc15 	stw	r2,-16(fp)
    1c50:	d0a6cf17 	ldw	r2,-25796(gp)
    1c54:	10bfffc4 	addi	r2,r2,-1
    1c58:	e0fffc17 	ldw	r3,-16(fp)
    1c5c:	18bfc916 	blt	r3,r2,1b84 <sobel_x_with_rgb+0x2c>

void sobel_x_with_rgb( unsigned char *source ) {
   int x,y;
   short result;

   for (y = 1 ; y < (sobel_height-1) ; y++) {
    1c60:	e0bffd17 	ldw	r2,-12(fp)
    1c64:	10800044 	addi	r2,r2,1
    1c68:	e0bffd15 	stw	r2,-12(fp)
    1c6c:	d0a6d117 	ldw	r2,-25788(gp)
    1c70:	10bfffc4 	addi	r2,r2,-1
    1c74:	e0fffd17 	ldw	r3,-12(fp)
    1c78:	18bfbf16 	blt	r3,r2,1b78 <sobel_x_with_rgb+0x20>
          } else {
        	  sobel_rgb565[y*sobel_width+x] = ((result>>3)&0x1F)<<11;
          }
      }
   }
}
    1c7c:	0001883a 	nop
    1c80:	e037883a 	mov	sp,fp
    1c84:	dfc00117 	ldw	ra,4(sp)
    1c88:	df000017 	ldw	fp,0(sp)
    1c8c:	dec00204 	addi	sp,sp,8
    1c90:	f800283a 	ret

00001c94 <sobel_y>:

void sobel_y( unsigned char *source ) {
    1c94:	defff904 	addi	sp,sp,-28
    1c98:	dfc00615 	stw	ra,24(sp)
    1c9c:	df000515 	stw	fp,20(sp)
    1ca0:	dc000415 	stw	r16,16(sp)
    1ca4:	df000504 	addi	fp,sp,20
    1ca8:	e13ffe15 	stw	r4,-8(fp)
   int x,y;

   for (y = 1 ; y < (sobel_height-1) ; y++) {
    1cac:	00800044 	movi	r2,1
    1cb0:	e0bffd15 	stw	r2,-12(fp)
    1cb4:	00001e06 	br	1d30 <sobel_y+0x9c>
      for (x = 1 ; x < (sobel_width-1) ; x++) {
    1cb8:	00800044 	movi	r2,1
    1cbc:	e0bffc15 	stw	r2,-16(fp)
    1cc0:	00001406 	br	1d14 <sobel_y+0x80>
         sobel_y_result[y*sobel_width+x] = sobel_mac(source,x,y,gy_array,sobel_width);
    1cc4:	d0e6d317 	ldw	r3,-25780(gp)
    1cc8:	d126cf17 	ldw	r4,-25796(gp)
    1ccc:	e0bffd17 	ldw	r2,-12(fp)
    1cd0:	2089383a 	mul	r4,r4,r2
    1cd4:	e0bffc17 	ldw	r2,-16(fp)
    1cd8:	2085883a 	add	r2,r4,r2
    1cdc:	1085883a 	add	r2,r2,r2
    1ce0:	18a1883a 	add	r16,r3,r2
    1ce4:	d0a6cf17 	ldw	r2,-25796(gp)
    1ce8:	d8800015 	stw	r2,0(sp)
    1cec:	01c00074 	movhi	r7,1
    1cf0:	39c614c4 	addi	r7,r7,6227
    1cf4:	e1bffd17 	ldw	r6,-12(fp)
    1cf8:	e17ffc17 	ldw	r5,-16(fp)
    1cfc:	e13ffe17 	ldw	r4,-8(fp)
    1d00:	000198c0 	call	198c <sobel_mac>
    1d04:	8080000d 	sth	r2,0(r16)

void sobel_y( unsigned char *source ) {
   int x,y;

   for (y = 1 ; y < (sobel_height-1) ; y++) {
      for (x = 1 ; x < (sobel_width-1) ; x++) {
    1d08:	e0bffc17 	ldw	r2,-16(fp)
    1d0c:	10800044 	addi	r2,r2,1
    1d10:	e0bffc15 	stw	r2,-16(fp)
    1d14:	d0a6cf17 	ldw	r2,-25796(gp)
    1d18:	10bfffc4 	addi	r2,r2,-1
    1d1c:	e0fffc17 	ldw	r3,-16(fp)
    1d20:	18bfe816 	blt	r3,r2,1cc4 <sobel_y+0x30>
}

void sobel_y( unsigned char *source ) {
   int x,y;

   for (y = 1 ; y < (sobel_height-1) ; y++) {
    1d24:	e0bffd17 	ldw	r2,-12(fp)
    1d28:	10800044 	addi	r2,r2,1
    1d2c:	e0bffd15 	stw	r2,-12(fp)
    1d30:	d0a6d117 	ldw	r2,-25788(gp)
    1d34:	10bfffc4 	addi	r2,r2,-1
    1d38:	e0fffd17 	ldw	r3,-12(fp)
    1d3c:	18bfde16 	blt	r3,r2,1cb8 <sobel_y+0x24>
      for (x = 1 ; x < (sobel_width-1) ; x++) {
         sobel_y_result[y*sobel_width+x] = sobel_mac(source,x,y,gy_array,sobel_width);
      }
   }
}
    1d40:	0001883a 	nop
    1d44:	e6ffff04 	addi	sp,fp,-4
    1d48:	dfc00217 	ldw	ra,8(sp)
    1d4c:	df000117 	ldw	fp,4(sp)
    1d50:	dc000017 	ldw	r16,0(sp)
    1d54:	dec00304 	addi	sp,sp,12
    1d58:	f800283a 	ret

00001d5c <sobel_y_with_rgb>:

void sobel_y_with_rgb( unsigned char *source ) {
    1d5c:	defff904 	addi	sp,sp,-28
    1d60:	dfc00615 	stw	ra,24(sp)
    1d64:	df000515 	stw	fp,20(sp)
    1d68:	df000504 	addi	fp,sp,20
    1d6c:	e13fff15 	stw	r4,-4(fp)
   int x,y;
   short result;

   for (y = 1 ; y < (sobel_height-1) ; y++) {
    1d70:	00800044 	movi	r2,1
    1d74:	e0bffd15 	stw	r2,-12(fp)
    1d78:	00003d06 	br	1e70 <sobel_y_with_rgb+0x114>
      for (x = 1 ; x < (sobel_width-1) ; x++) {
    1d7c:	00800044 	movi	r2,1
    1d80:	e0bffc15 	stw	r2,-16(fp)
    1d84:	00003306 	br	1e54 <sobel_y_with_rgb+0xf8>
    	  result = sobel_mac(source,x,y,gy_array,sobel_width);
    1d88:	d0a6cf17 	ldw	r2,-25796(gp)
    1d8c:	d8800015 	stw	r2,0(sp)
    1d90:	01c00074 	movhi	r7,1
    1d94:	39c614c4 	addi	r7,r7,6227
    1d98:	e1bffd17 	ldw	r6,-12(fp)
    1d9c:	e17ffc17 	ldw	r5,-16(fp)
    1da0:	e13fff17 	ldw	r4,-4(fp)
    1da4:	000198c0 	call	198c <sobel_mac>
    1da8:	e0bffe0d 	sth	r2,-8(fp)
         sobel_y_result[y*sobel_width+x] = result;
    1dac:	d0e6d317 	ldw	r3,-25780(gp)
    1db0:	d126cf17 	ldw	r4,-25796(gp)
    1db4:	e0bffd17 	ldw	r2,-12(fp)
    1db8:	2089383a 	mul	r4,r4,r2
    1dbc:	e0bffc17 	ldw	r2,-16(fp)
    1dc0:	2085883a 	add	r2,r4,r2
    1dc4:	1085883a 	add	r2,r2,r2
    1dc8:	1885883a 	add	r2,r3,r2
    1dcc:	e0fffe0b 	ldhu	r3,-8(fp)
    1dd0:	10c0000d 	sth	r3,0(r2)
         if (result < 0) {
    1dd4:	e0bffe0f 	ldh	r2,-8(fp)
    1dd8:	10000e0e 	bge	r2,zero,1e14 <sobel_y_with_rgb+0xb8>
       	  sobel_rgb565[y*sobel_width+x] = ((-result)>>2)<<5;
    1ddc:	d0e6d417 	ldw	r3,-25776(gp)
    1de0:	d126cf17 	ldw	r4,-25796(gp)
    1de4:	e0bffd17 	ldw	r2,-12(fp)
    1de8:	2089383a 	mul	r4,r4,r2
    1dec:	e0bffc17 	ldw	r2,-16(fp)
    1df0:	2085883a 	add	r2,r4,r2
    1df4:	1085883a 	add	r2,r2,r2
    1df8:	1885883a 	add	r2,r3,r2
    1dfc:	e0fffe0f 	ldh	r3,-8(fp)
    1e00:	00c7c83a 	sub	r3,zero,r3
    1e04:	1807d0ba 	srai	r3,r3,2
    1e08:	1806917a 	slli	r3,r3,5
    1e0c:	10c0000d 	sth	r3,0(r2)
    1e10:	00000d06 	br	1e48 <sobel_y_with_rgb+0xec>
         } else {
       	  sobel_rgb565[y*sobel_width+x] = ((result>>3)&0x1F)<<11;
    1e14:	d0e6d417 	ldw	r3,-25776(gp)
    1e18:	d126cf17 	ldw	r4,-25796(gp)
    1e1c:	e0bffd17 	ldw	r2,-12(fp)
    1e20:	2089383a 	mul	r4,r4,r2
    1e24:	e0bffc17 	ldw	r2,-16(fp)
    1e28:	2085883a 	add	r2,r4,r2
    1e2c:	1085883a 	add	r2,r2,r2
    1e30:	1885883a 	add	r2,r3,r2
    1e34:	e0fffe0f 	ldh	r3,-8(fp)
    1e38:	1807d0fa 	srai	r3,r3,3
    1e3c:	18ffffcc 	andi	r3,r3,65535
    1e40:	180692fa 	slli	r3,r3,11
    1e44:	10c0000d 	sth	r3,0(r2)
void sobel_y_with_rgb( unsigned char *source ) {
   int x,y;
   short result;

   for (y = 1 ; y < (sobel_height-1) ; y++) {
      for (x = 1 ; x < (sobel_width-1) ; x++) {
    1e48:	e0bffc17 	ldw	r2,-16(fp)
    1e4c:	10800044 	addi	r2,r2,1
    1e50:	e0bffc15 	stw	r2,-16(fp)
    1e54:	d0a6cf17 	ldw	r2,-25796(gp)
    1e58:	10bfffc4 	addi	r2,r2,-1
    1e5c:	e0fffc17 	ldw	r3,-16(fp)
    1e60:	18bfc916 	blt	r3,r2,1d88 <sobel_y_with_rgb+0x2c>

void sobel_y_with_rgb( unsigned char *source ) {
   int x,y;
   short result;

   for (y = 1 ; y < (sobel_height-1) ; y++) {
    1e64:	e0bffd17 	ldw	r2,-12(fp)
    1e68:	10800044 	addi	r2,r2,1
    1e6c:	e0bffd15 	stw	r2,-12(fp)
    1e70:	d0a6d117 	ldw	r2,-25788(gp)
    1e74:	10bfffc4 	addi	r2,r2,-1
    1e78:	e0fffd17 	ldw	r3,-12(fp)
    1e7c:	18bfbf16 	blt	r3,r2,1d7c <sobel_y_with_rgb+0x20>
         } else {
       	  sobel_rgb565[y*sobel_width+x] = ((result>>3)&0x1F)<<11;
         }
      }
   }
}
    1e80:	0001883a 	nop
    1e84:	e037883a 	mov	sp,fp
    1e88:	dfc00117 	ldw	ra,4(sp)
    1e8c:	df000017 	ldw	fp,0(sp)
    1e90:	dec00204 	addi	sp,sp,8
    1e94:	f800283a 	ret

00001e98 <sobel_threshold>:

void sobel_threshold(short threshold) {
    1e98:	defffa04 	addi	sp,sp,-24
    1e9c:	df000515 	stw	fp,20(sp)
    1ea0:	df000504 	addi	fp,sp,20
    1ea4:	2005883a 	mov	r2,r4
    1ea8:	e0bfff0d 	sth	r2,-4(fp)
	int x,y,arrayindex;
	short sum,value;
	for (y = 1 ; y < (sobel_height-1) ; y++) {
    1eac:	00800044 	movi	r2,1
    1eb0:	e0bffc15 	stw	r2,-16(fp)
    1eb4:	00003406 	br	1f88 <sobel_threshold+0xf0>
		for (x = 1 ; x < (sobel_width-1) ; x++) {
    1eb8:	00800044 	movi	r2,1
    1ebc:	e0bffb15 	stw	r2,-20(fp)
    1ec0:	00002a06 	br	1f6c <sobel_threshold+0xd4>
			arrayindex = (y*sobel_width)+x;
    1ec4:	d0e6cf17 	ldw	r3,-25796(gp)
    1ec8:	e0bffc17 	ldw	r2,-16(fp)
    1ecc:	1887383a 	mul	r3,r3,r2
    1ed0:	e0bffb17 	ldw	r2,-20(fp)
    1ed4:	1885883a 	add	r2,r3,r2
    1ed8:	e0bffd15 	stw	r2,-12(fp)
			value = sobel_x_result[arrayindex];
    1edc:	d0e6d217 	ldw	r3,-25784(gp)
    1ee0:	e0bffd17 	ldw	r2,-12(fp)
    1ee4:	1085883a 	add	r2,r2,r2
    1ee8:	1885883a 	add	r2,r3,r2
    1eec:	1080000b 	ldhu	r2,0(r2)
    1ef0:	e0bffe0d 	sth	r2,-8(fp)
			sum = (value < 0) ? -value : value;
    1ef4:	e0bffe0f 	ldh	r2,-8(fp)
    1ef8:	1000010e 	bge	r2,zero,1f00 <sobel_threshold+0x68>
    1efc:	0085c83a 	sub	r2,zero,r2
    1f00:	e0bffe8d 	sth	r2,-6(fp)
			value = sobel_y_result[arrayindex];
    1f04:	d0e6d317 	ldw	r3,-25780(gp)
    1f08:	e0bffd17 	ldw	r2,-12(fp)
    1f0c:	1085883a 	add	r2,r2,r2
    1f10:	1885883a 	add	r2,r3,r2
    1f14:	1080000b 	ldhu	r2,0(r2)
    1f18:	e0bffe0d 	sth	r2,-8(fp)
			sum += (value < 0) ? -value : value;
    1f1c:	e0bffe0f 	ldh	r2,-8(fp)
    1f20:	1000010e 	bge	r2,zero,1f28 <sobel_threshold+0x90>
    1f24:	0085c83a 	sub	r2,zero,r2
    1f28:	1007883a 	mov	r3,r2
    1f2c:	e0bffe8b 	ldhu	r2,-6(fp)
    1f30:	1885883a 	add	r2,r3,r2
    1f34:	e0bffe8d 	sth	r2,-6(fp)
			sobel_result[arrayindex] = (sum > threshold) ? 0xFF : 0;
    1f38:	d0e6d017 	ldw	r3,-25792(gp)
    1f3c:	e0bffd17 	ldw	r2,-12(fp)
    1f40:	1887883a 	add	r3,r3,r2
    1f44:	e0bffe8f 	ldh	r2,-6(fp)
    1f48:	e13fff0f 	ldh	r4,-4(fp)
    1f4c:	2080020e 	bge	r4,r2,1f58 <sobel_threshold+0xc0>
    1f50:	00bfffc4 	movi	r2,-1
    1f54:	00000106 	br	1f5c <sobel_threshold+0xc4>
    1f58:	0005883a 	mov	r2,zero
    1f5c:	18800005 	stb	r2,0(r3)

void sobel_threshold(short threshold) {
	int x,y,arrayindex;
	short sum,value;
	for (y = 1 ; y < (sobel_height-1) ; y++) {
		for (x = 1 ; x < (sobel_width-1) ; x++) {
    1f60:	e0bffb17 	ldw	r2,-20(fp)
    1f64:	10800044 	addi	r2,r2,1
    1f68:	e0bffb15 	stw	r2,-20(fp)
    1f6c:	d0a6cf17 	ldw	r2,-25796(gp)
    1f70:	10bfffc4 	addi	r2,r2,-1
    1f74:	e0fffb17 	ldw	r3,-20(fp)
    1f78:	18bfd216 	blt	r3,r2,1ec4 <sobel_threshold+0x2c>
}

void sobel_threshold(short threshold) {
	int x,y,arrayindex;
	short sum,value;
	for (y = 1 ; y < (sobel_height-1) ; y++) {
    1f7c:	e0bffc17 	ldw	r2,-16(fp)
    1f80:	10800044 	addi	r2,r2,1
    1f84:	e0bffc15 	stw	r2,-16(fp)
    1f88:	d0a6d117 	ldw	r2,-25788(gp)
    1f8c:	10bfffc4 	addi	r2,r2,-1
    1f90:	e0fffc17 	ldw	r3,-16(fp)
    1f94:	18bfc816 	blt	r3,r2,1eb8 <sobel_threshold+0x20>
			value = sobel_y_result[arrayindex];
			sum += (value < 0) ? -value : value;
			sobel_result[arrayindex] = (sum > threshold) ? 0xFF : 0;
		}
	}
}
    1f98:	0001883a 	nop
    1f9c:	e037883a 	mov	sp,fp
    1fa0:	df000017 	ldw	fp,0(sp)
    1fa4:	dec00104 	addi	sp,sp,4
    1fa8:	f800283a 	ret

00001fac <GetSobel_rgb>:

unsigned short *GetSobel_rgb() {
    1fac:	deffff04 	addi	sp,sp,-4
    1fb0:	df000015 	stw	fp,0(sp)
    1fb4:	d839883a 	mov	fp,sp
	return sobel_rgb565;
    1fb8:	d0a6d417 	ldw	r2,-25776(gp)
}
    1fbc:	e037883a 	mov	sp,fp
    1fc0:	df000017 	ldw	fp,0(sp)
    1fc4:	dec00104 	addi	sp,sp,4
    1fc8:	f800283a 	ret

00001fcc <GetSobelResult>:

unsigned char *GetSobelResult() {
    1fcc:	deffff04 	addi	sp,sp,-4
    1fd0:	df000015 	stw	fp,0(sp)
    1fd4:	d839883a 	mov	fp,sp
	return sobel_result;
    1fd8:	d0a6d017 	ldw	r2,-25792(gp)
}
    1fdc:	e037883a 	mov	sp,fp
    1fe0:	df000017 	ldw	fp,0(sp)
    1fe4:	dec00104 	addi	sp,sp,4
    1fe8:	f800283a 	ret

00001fec <vga_set_pointer>:
 */

#include <system.h>
#include <io.h>

void vga_set_pointer( void* image ) {
    1fec:	defffe04 	addi	sp,sp,-8
    1ff0:	df000115 	stw	fp,4(sp)
    1ff4:	df000104 	addi	fp,sp,4
    1ff8:	e13fff15 	stw	r4,-4(fp)
	IOWR_32DIRECT(VGA_DMA_0_BASE,0,(int)image);
    1ffc:	e0ffff17 	ldw	r3,-4(fp)
    2000:	00804034 	movhi	r2,256
    2004:	10843404 	addi	r2,r2,4304
    2008:	10c00035 	stwio	r3,0(r2)
}
    200c:	0001883a 	nop
    2010:	e037883a 	mov	sp,fp
    2014:	df000017 	ldw	fp,0(sp)
    2018:	dec00104 	addi	sp,sp,4
    201c:	f800283a 	ret

00002020 <vga_set_swap>:

void vga_set_swap(char swap) {
    2020:	defffe04 	addi	sp,sp,-8
    2024:	df000115 	stw	fp,4(sp)
    2028:	df000104 	addi	fp,sp,4
    202c:	2005883a 	mov	r2,r4
    2030:	e0bfff05 	stb	r2,-4(fp)
	IOWR_8DIRECT(VGA_DMA_0_BASE,4,swap);
    2034:	e0ffff07 	ldb	r3,-4(fp)
    2038:	00804034 	movhi	r2,256
    203c:	10843504 	addi	r2,r2,4308
    2040:	10c00025 	stbio	r3,0(r2)
}
    2044:	0001883a 	nop
    2048:	e037883a 	mov	sp,fp
    204c:	df000017 	ldw	fp,0(sp)
    2050:	dec00104 	addi	sp,sp,4
    2054:	f800283a 	ret

00002058 <__divsi3>:
    2058:	20001b16 	blt	r4,zero,20c8 <__divsi3+0x70>
    205c:	000f883a 	mov	r7,zero
    2060:	28001616 	blt	r5,zero,20bc <__divsi3+0x64>
    2064:	200d883a 	mov	r6,r4
    2068:	29001a2e 	bgeu	r5,r4,20d4 <__divsi3+0x7c>
    206c:	00800804 	movi	r2,32
    2070:	00c00044 	movi	r3,1
    2074:	00000106 	br	207c <__divsi3+0x24>
    2078:	10000d26 	beq	r2,zero,20b0 <__divsi3+0x58>
    207c:	294b883a 	add	r5,r5,r5
    2080:	10bfffc4 	addi	r2,r2,-1
    2084:	18c7883a 	add	r3,r3,r3
    2088:	293ffb36 	bltu	r5,r4,2078 <__divsi3+0x20>
    208c:	0005883a 	mov	r2,zero
    2090:	18000726 	beq	r3,zero,20b0 <__divsi3+0x58>
    2094:	0005883a 	mov	r2,zero
    2098:	31400236 	bltu	r6,r5,20a4 <__divsi3+0x4c>
    209c:	314dc83a 	sub	r6,r6,r5
    20a0:	10c4b03a 	or	r2,r2,r3
    20a4:	1806d07a 	srli	r3,r3,1
    20a8:	280ad07a 	srli	r5,r5,1
    20ac:	183ffa1e 	bne	r3,zero,2098 <__divsi3+0x40>
    20b0:	38000126 	beq	r7,zero,20b8 <__divsi3+0x60>
    20b4:	0085c83a 	sub	r2,zero,r2
    20b8:	f800283a 	ret
    20bc:	014bc83a 	sub	r5,zero,r5
    20c0:	39c0005c 	xori	r7,r7,1
    20c4:	003fe706 	br	2064 <__divsi3+0xc>
    20c8:	0109c83a 	sub	r4,zero,r4
    20cc:	01c00044 	movi	r7,1
    20d0:	003fe306 	br	2060 <__divsi3+0x8>
    20d4:	00c00044 	movi	r3,1
    20d8:	003fee06 	br	2094 <__divsi3+0x3c>

000020dc <__modsi3>:
    20dc:	20001716 	blt	r4,zero,213c <__modsi3+0x60>
    20e0:	000f883a 	mov	r7,zero
    20e4:	2005883a 	mov	r2,r4
    20e8:	28001216 	blt	r5,zero,2134 <__modsi3+0x58>
    20ec:	2900162e 	bgeu	r5,r4,2148 <__modsi3+0x6c>
    20f0:	01800804 	movi	r6,32
    20f4:	00c00044 	movi	r3,1
    20f8:	00000106 	br	2100 <__modsi3+0x24>
    20fc:	30000a26 	beq	r6,zero,2128 <__modsi3+0x4c>
    2100:	294b883a 	add	r5,r5,r5
    2104:	31bfffc4 	addi	r6,r6,-1
    2108:	18c7883a 	add	r3,r3,r3
    210c:	293ffb36 	bltu	r5,r4,20fc <__modsi3+0x20>
    2110:	18000526 	beq	r3,zero,2128 <__modsi3+0x4c>
    2114:	1806d07a 	srli	r3,r3,1
    2118:	11400136 	bltu	r2,r5,2120 <__modsi3+0x44>
    211c:	1145c83a 	sub	r2,r2,r5
    2120:	280ad07a 	srli	r5,r5,1
    2124:	183ffb1e 	bne	r3,zero,2114 <__modsi3+0x38>
    2128:	38000126 	beq	r7,zero,2130 <__modsi3+0x54>
    212c:	0085c83a 	sub	r2,zero,r2
    2130:	f800283a 	ret
    2134:	014bc83a 	sub	r5,zero,r5
    2138:	003fec06 	br	20ec <__modsi3+0x10>
    213c:	0109c83a 	sub	r4,zero,r4
    2140:	01c00044 	movi	r7,1
    2144:	003fe706 	br	20e4 <__modsi3+0x8>
    2148:	00c00044 	movi	r3,1
    214c:	003ff106 	br	2114 <__modsi3+0x38>

00002150 <__udivsi3>:
    2150:	200d883a 	mov	r6,r4
    2154:	2900152e 	bgeu	r5,r4,21ac <__udivsi3+0x5c>
    2158:	28001416 	blt	r5,zero,21ac <__udivsi3+0x5c>
    215c:	00800804 	movi	r2,32
    2160:	00c00044 	movi	r3,1
    2164:	00000206 	br	2170 <__udivsi3+0x20>
    2168:	10000e26 	beq	r2,zero,21a4 <__udivsi3+0x54>
    216c:	28000516 	blt	r5,zero,2184 <__udivsi3+0x34>
    2170:	294b883a 	add	r5,r5,r5
    2174:	10bfffc4 	addi	r2,r2,-1
    2178:	18c7883a 	add	r3,r3,r3
    217c:	293ffa36 	bltu	r5,r4,2168 <__udivsi3+0x18>
    2180:	18000826 	beq	r3,zero,21a4 <__udivsi3+0x54>
    2184:	0005883a 	mov	r2,zero
    2188:	31400236 	bltu	r6,r5,2194 <__udivsi3+0x44>
    218c:	314dc83a 	sub	r6,r6,r5
    2190:	10c4b03a 	or	r2,r2,r3
    2194:	1806d07a 	srli	r3,r3,1
    2198:	280ad07a 	srli	r5,r5,1
    219c:	183ffa1e 	bne	r3,zero,2188 <__udivsi3+0x38>
    21a0:	f800283a 	ret
    21a4:	0005883a 	mov	r2,zero
    21a8:	f800283a 	ret
    21ac:	00c00044 	movi	r3,1
    21b0:	003ff406 	br	2184 <__udivsi3+0x34>

000021b4 <__umodsi3>:
    21b4:	2005883a 	mov	r2,r4
    21b8:	2900122e 	bgeu	r5,r4,2204 <__umodsi3+0x50>
    21bc:	28001116 	blt	r5,zero,2204 <__umodsi3+0x50>
    21c0:	01800804 	movi	r6,32
    21c4:	00c00044 	movi	r3,1
    21c8:	00000206 	br	21d4 <__umodsi3+0x20>
    21cc:	30000c26 	beq	r6,zero,2200 <__umodsi3+0x4c>
    21d0:	28000516 	blt	r5,zero,21e8 <__umodsi3+0x34>
    21d4:	294b883a 	add	r5,r5,r5
    21d8:	31bfffc4 	addi	r6,r6,-1
    21dc:	18c7883a 	add	r3,r3,r3
    21e0:	293ffa36 	bltu	r5,r4,21cc <__umodsi3+0x18>
    21e4:	18000626 	beq	r3,zero,2200 <__umodsi3+0x4c>
    21e8:	1806d07a 	srli	r3,r3,1
    21ec:	11400136 	bltu	r2,r5,21f4 <__umodsi3+0x40>
    21f0:	1145c83a 	sub	r2,r2,r5
    21f4:	280ad07a 	srli	r5,r5,1
    21f8:	183ffb1e 	bne	r3,zero,21e8 <__umodsi3+0x34>
    21fc:	f800283a 	ret
    2200:	f800283a 	ret
    2204:	00c00044 	movi	r3,1
    2208:	003ff706 	br	21e8 <__umodsi3+0x34>

0000220c <malloc>:
    220c:	00800074 	movhi	r2,1
    2210:	108d8304 	addi	r2,r2,13836
    2214:	200b883a 	mov	r5,r4
    2218:	11000017 	ldw	r4,0(r2)
    221c:	00022341 	jmpi	2234 <_malloc_r>

00002220 <free>:
    2220:	00800074 	movhi	r2,1
    2224:	108d8304 	addi	r2,r2,13836
    2228:	200b883a 	mov	r5,r4
    222c:	11000017 	ldw	r4,0(r2)
    2230:	00070841 	jmpi	7084 <_free_r>

00002234 <_malloc_r>:
    2234:	defff504 	addi	sp,sp,-44
    2238:	dc800315 	stw	r18,12(sp)
    223c:	dfc00a15 	stw	ra,40(sp)
    2240:	df000915 	stw	fp,36(sp)
    2244:	ddc00815 	stw	r23,32(sp)
    2248:	dd800715 	stw	r22,28(sp)
    224c:	dd400615 	stw	r21,24(sp)
    2250:	dd000515 	stw	r20,20(sp)
    2254:	dcc00415 	stw	r19,16(sp)
    2258:	dc400215 	stw	r17,8(sp)
    225c:	dc000115 	stw	r16,4(sp)
    2260:	288002c4 	addi	r2,r5,11
    2264:	00c00584 	movi	r3,22
    2268:	2025883a 	mov	r18,r4
    226c:	18807f2e 	bgeu	r3,r2,246c <_malloc_r+0x238>
    2270:	047ffe04 	movi	r17,-8
    2274:	1462703a 	and	r17,r2,r17
    2278:	8800a316 	blt	r17,zero,2508 <_malloc_r+0x2d4>
    227c:	8940a236 	bltu	r17,r5,2508 <_malloc_r+0x2d4>
    2280:	000ef1c0 	call	ef1c <__malloc_lock>
    2284:	00807dc4 	movi	r2,503
    2288:	1441e92e 	bgeu	r2,r17,2a30 <_malloc_r+0x7fc>
    228c:	8804d27a 	srli	r2,r17,9
    2290:	1000a126 	beq	r2,zero,2518 <_malloc_r+0x2e4>
    2294:	00c00104 	movi	r3,4
    2298:	18811e36 	bltu	r3,r2,2714 <_malloc_r+0x4e0>
    229c:	8804d1ba 	srli	r2,r17,6
    22a0:	12000e44 	addi	r8,r2,57
    22a4:	11c00e04 	addi	r7,r2,56
    22a8:	4209883a 	add	r4,r8,r8
    22ac:	04c00074 	movhi	r19,1
    22b0:	2109883a 	add	r4,r4,r4
    22b4:	9cc6d504 	addi	r19,r19,6996
    22b8:	2109883a 	add	r4,r4,r4
    22bc:	9909883a 	add	r4,r19,r4
    22c0:	24000117 	ldw	r16,4(r4)
    22c4:	213ffe04 	addi	r4,r4,-8
    22c8:	24009726 	beq	r4,r16,2528 <_malloc_r+0x2f4>
    22cc:	80800117 	ldw	r2,4(r16)
    22d0:	01bfff04 	movi	r6,-4
    22d4:	014003c4 	movi	r5,15
    22d8:	1184703a 	and	r2,r2,r6
    22dc:	1447c83a 	sub	r3,r2,r17
    22e0:	28c00716 	blt	r5,r3,2300 <_malloc_r+0xcc>
    22e4:	1800920e 	bge	r3,zero,2530 <_malloc_r+0x2fc>
    22e8:	84000317 	ldw	r16,12(r16)
    22ec:	24008e26 	beq	r4,r16,2528 <_malloc_r+0x2f4>
    22f0:	80800117 	ldw	r2,4(r16)
    22f4:	1184703a 	and	r2,r2,r6
    22f8:	1447c83a 	sub	r3,r2,r17
    22fc:	28fff90e 	bge	r5,r3,22e4 <_malloc_r+0xb0>
    2300:	3809883a 	mov	r4,r7
    2304:	01800074 	movhi	r6,1
    2308:	9c000417 	ldw	r16,16(r19)
    230c:	3186d504 	addi	r6,r6,6996
    2310:	32000204 	addi	r8,r6,8
    2314:	82013426 	beq	r16,r8,27e8 <_malloc_r+0x5b4>
    2318:	80c00117 	ldw	r3,4(r16)
    231c:	00bfff04 	movi	r2,-4
    2320:	188e703a 	and	r7,r3,r2
    2324:	3c45c83a 	sub	r2,r7,r17
    2328:	00c003c4 	movi	r3,15
    232c:	18811f16 	blt	r3,r2,27ac <_malloc_r+0x578>
    2330:	32000515 	stw	r8,20(r6)
    2334:	32000415 	stw	r8,16(r6)
    2338:	10007f0e 	bge	r2,zero,2538 <_malloc_r+0x304>
    233c:	00807fc4 	movi	r2,511
    2340:	11c0fd36 	bltu	r2,r7,2738 <_malloc_r+0x504>
    2344:	3806d0fa 	srli	r3,r7,3
    2348:	01c00044 	movi	r7,1
    234c:	30800117 	ldw	r2,4(r6)
    2350:	19400044 	addi	r5,r3,1
    2354:	294b883a 	add	r5,r5,r5
    2358:	1807d0ba 	srai	r3,r3,2
    235c:	294b883a 	add	r5,r5,r5
    2360:	294b883a 	add	r5,r5,r5
    2364:	298b883a 	add	r5,r5,r6
    2368:	38c6983a 	sll	r3,r7,r3
    236c:	29c00017 	ldw	r7,0(r5)
    2370:	2a7ffe04 	addi	r9,r5,-8
    2374:	1886b03a 	or	r3,r3,r2
    2378:	82400315 	stw	r9,12(r16)
    237c:	81c00215 	stw	r7,8(r16)
    2380:	30c00115 	stw	r3,4(r6)
    2384:	2c000015 	stw	r16,0(r5)
    2388:	3c000315 	stw	r16,12(r7)
    238c:	2005d0ba 	srai	r2,r4,2
    2390:	01400044 	movi	r5,1
    2394:	288a983a 	sll	r5,r5,r2
    2398:	19406f36 	bltu	r3,r5,2558 <_malloc_r+0x324>
    239c:	28c4703a 	and	r2,r5,r3
    23a0:	10000a1e 	bne	r2,zero,23cc <_malloc_r+0x198>
    23a4:	00bfff04 	movi	r2,-4
    23a8:	294b883a 	add	r5,r5,r5
    23ac:	2088703a 	and	r4,r4,r2
    23b0:	28c4703a 	and	r2,r5,r3
    23b4:	21000104 	addi	r4,r4,4
    23b8:	1000041e 	bne	r2,zero,23cc <_malloc_r+0x198>
    23bc:	294b883a 	add	r5,r5,r5
    23c0:	28c4703a 	and	r2,r5,r3
    23c4:	21000104 	addi	r4,r4,4
    23c8:	103ffc26 	beq	r2,zero,23bc <_malloc_r+0x188>
    23cc:	02bfff04 	movi	r10,-4
    23d0:	024003c4 	movi	r9,15
    23d4:	21800044 	addi	r6,r4,1
    23d8:	318d883a 	add	r6,r6,r6
    23dc:	318d883a 	add	r6,r6,r6
    23e0:	318d883a 	add	r6,r6,r6
    23e4:	998d883a 	add	r6,r19,r6
    23e8:	333ffe04 	addi	r12,r6,-8
    23ec:	2017883a 	mov	r11,r4
    23f0:	31800104 	addi	r6,r6,4
    23f4:	34000017 	ldw	r16,0(r6)
    23f8:	31fffd04 	addi	r7,r6,-12
    23fc:	81c0041e 	bne	r16,r7,2410 <_malloc_r+0x1dc>
    2400:	0000fb06 	br	27f0 <_malloc_r+0x5bc>
    2404:	1801030e 	bge	r3,zero,2814 <_malloc_r+0x5e0>
    2408:	84000317 	ldw	r16,12(r16)
    240c:	81c0f826 	beq	r16,r7,27f0 <_malloc_r+0x5bc>
    2410:	80800117 	ldw	r2,4(r16)
    2414:	1284703a 	and	r2,r2,r10
    2418:	1447c83a 	sub	r3,r2,r17
    241c:	48fff90e 	bge	r9,r3,2404 <_malloc_r+0x1d0>
    2420:	80800317 	ldw	r2,12(r16)
    2424:	81000217 	ldw	r4,8(r16)
    2428:	89400054 	ori	r5,r17,1
    242c:	81400115 	stw	r5,4(r16)
    2430:	20800315 	stw	r2,12(r4)
    2434:	11000215 	stw	r4,8(r2)
    2438:	8463883a 	add	r17,r16,r17
    243c:	9c400515 	stw	r17,20(r19)
    2440:	9c400415 	stw	r17,16(r19)
    2444:	18800054 	ori	r2,r3,1
    2448:	88800115 	stw	r2,4(r17)
    244c:	8a000315 	stw	r8,12(r17)
    2450:	8a000215 	stw	r8,8(r17)
    2454:	88e3883a 	add	r17,r17,r3
    2458:	88c00015 	stw	r3,0(r17)
    245c:	9009883a 	mov	r4,r18
    2460:	000ef400 	call	ef40 <__malloc_unlock>
    2464:	80800204 	addi	r2,r16,8
    2468:	00001b06 	br	24d8 <_malloc_r+0x2a4>
    246c:	04400404 	movi	r17,16
    2470:	89402536 	bltu	r17,r5,2508 <_malloc_r+0x2d4>
    2474:	000ef1c0 	call	ef1c <__malloc_lock>
    2478:	00800184 	movi	r2,6
    247c:	01000084 	movi	r4,2
    2480:	04c00074 	movhi	r19,1
    2484:	1085883a 	add	r2,r2,r2
    2488:	9cc6d504 	addi	r19,r19,6996
    248c:	1085883a 	add	r2,r2,r2
    2490:	9885883a 	add	r2,r19,r2
    2494:	14000117 	ldw	r16,4(r2)
    2498:	10fffe04 	addi	r3,r2,-8
    249c:	80c0d926 	beq	r16,r3,2804 <_malloc_r+0x5d0>
    24a0:	80c00117 	ldw	r3,4(r16)
    24a4:	81000317 	ldw	r4,12(r16)
    24a8:	00bfff04 	movi	r2,-4
    24ac:	1884703a 	and	r2,r3,r2
    24b0:	81400217 	ldw	r5,8(r16)
    24b4:	8085883a 	add	r2,r16,r2
    24b8:	10c00117 	ldw	r3,4(r2)
    24bc:	29000315 	stw	r4,12(r5)
    24c0:	21400215 	stw	r5,8(r4)
    24c4:	18c00054 	ori	r3,r3,1
    24c8:	10c00115 	stw	r3,4(r2)
    24cc:	9009883a 	mov	r4,r18
    24d0:	000ef400 	call	ef40 <__malloc_unlock>
    24d4:	80800204 	addi	r2,r16,8
    24d8:	dfc00a17 	ldw	ra,40(sp)
    24dc:	df000917 	ldw	fp,36(sp)
    24e0:	ddc00817 	ldw	r23,32(sp)
    24e4:	dd800717 	ldw	r22,28(sp)
    24e8:	dd400617 	ldw	r21,24(sp)
    24ec:	dd000517 	ldw	r20,20(sp)
    24f0:	dcc00417 	ldw	r19,16(sp)
    24f4:	dc800317 	ldw	r18,12(sp)
    24f8:	dc400217 	ldw	r17,8(sp)
    24fc:	dc000117 	ldw	r16,4(sp)
    2500:	dec00b04 	addi	sp,sp,44
    2504:	f800283a 	ret
    2508:	00800304 	movi	r2,12
    250c:	90800015 	stw	r2,0(r18)
    2510:	0005883a 	mov	r2,zero
    2514:	003ff006 	br	24d8 <_malloc_r+0x2a4>
    2518:	01002004 	movi	r4,128
    251c:	02001004 	movi	r8,64
    2520:	01c00fc4 	movi	r7,63
    2524:	003f6106 	br	22ac <_malloc_r+0x78>
    2528:	4009883a 	mov	r4,r8
    252c:	003f7506 	br	2304 <_malloc_r+0xd0>
    2530:	81000317 	ldw	r4,12(r16)
    2534:	003fde06 	br	24b0 <_malloc_r+0x27c>
    2538:	81c5883a 	add	r2,r16,r7
    253c:	11400117 	ldw	r5,4(r2)
    2540:	9009883a 	mov	r4,r18
    2544:	29400054 	ori	r5,r5,1
    2548:	11400115 	stw	r5,4(r2)
    254c:	000ef400 	call	ef40 <__malloc_unlock>
    2550:	80800204 	addi	r2,r16,8
    2554:	003fe006 	br	24d8 <_malloc_r+0x2a4>
    2558:	9c000217 	ldw	r16,8(r19)
    255c:	00bfff04 	movi	r2,-4
    2560:	85800117 	ldw	r22,4(r16)
    2564:	b0ac703a 	and	r22,r22,r2
    2568:	b4400336 	bltu	r22,r17,2578 <_malloc_r+0x344>
    256c:	b445c83a 	sub	r2,r22,r17
    2570:	00c003c4 	movi	r3,15
    2574:	18805d16 	blt	r3,r2,26ec <_malloc_r+0x4b8>
    2578:	05c00074 	movhi	r23,1
    257c:	00800074 	movhi	r2,1
    2580:	10945704 	addi	r2,r2,20828
    2584:	bdcd8004 	addi	r23,r23,13824
    2588:	15400017 	ldw	r21,0(r2)
    258c:	b8c00017 	ldw	r3,0(r23)
    2590:	00bfffc4 	movi	r2,-1
    2594:	858d883a 	add	r6,r16,r22
    2598:	8d6b883a 	add	r21,r17,r21
    259c:	1880ea26 	beq	r3,r2,2948 <_malloc_r+0x714>
    25a0:	ad4403c4 	addi	r21,r21,4111
    25a4:	00bc0004 	movi	r2,-4096
    25a8:	a8aa703a 	and	r21,r21,r2
    25ac:	a80b883a 	mov	r5,r21
    25b0:	9009883a 	mov	r4,r18
    25b4:	d9800015 	stw	r6,0(sp)
    25b8:	0002b800 	call	2b80 <_sbrk_r>
    25bc:	1029883a 	mov	r20,r2
    25c0:	00bfffc4 	movi	r2,-1
    25c4:	d9800017 	ldw	r6,0(sp)
    25c8:	a080e826 	beq	r20,r2,296c <_malloc_r+0x738>
    25cc:	a180a636 	bltu	r20,r6,2868 <_malloc_r+0x634>
    25d0:	07000074 	movhi	fp,1
    25d4:	e7146504 	addi	fp,fp,20884
    25d8:	e0800017 	ldw	r2,0(fp)
    25dc:	a887883a 	add	r3,r21,r2
    25e0:	e0c00015 	stw	r3,0(fp)
    25e4:	3500e626 	beq	r6,r20,2980 <_malloc_r+0x74c>
    25e8:	b9000017 	ldw	r4,0(r23)
    25ec:	00bfffc4 	movi	r2,-1
    25f0:	2080ee26 	beq	r4,r2,29ac <_malloc_r+0x778>
    25f4:	a185c83a 	sub	r2,r20,r6
    25f8:	10c5883a 	add	r2,r2,r3
    25fc:	e0800015 	stw	r2,0(fp)
    2600:	a0c001cc 	andi	r3,r20,7
    2604:	1800bc26 	beq	r3,zero,28f8 <_malloc_r+0x6c4>
    2608:	a0e9c83a 	sub	r20,r20,r3
    260c:	00840204 	movi	r2,4104
    2610:	a5000204 	addi	r20,r20,8
    2614:	10c7c83a 	sub	r3,r2,r3
    2618:	a545883a 	add	r2,r20,r21
    261c:	1083ffcc 	andi	r2,r2,4095
    2620:	18abc83a 	sub	r21,r3,r2
    2624:	a80b883a 	mov	r5,r21
    2628:	9009883a 	mov	r4,r18
    262c:	0002b800 	call	2b80 <_sbrk_r>
    2630:	00ffffc4 	movi	r3,-1
    2634:	10c0e126 	beq	r2,r3,29bc <_malloc_r+0x788>
    2638:	1505c83a 	sub	r2,r2,r20
    263c:	1545883a 	add	r2,r2,r21
    2640:	10800054 	ori	r2,r2,1
    2644:	e0c00017 	ldw	r3,0(fp)
    2648:	9d000215 	stw	r20,8(r19)
    264c:	a0800115 	stw	r2,4(r20)
    2650:	a8c7883a 	add	r3,r21,r3
    2654:	e0c00015 	stw	r3,0(fp)
    2658:	84c00e26 	beq	r16,r19,2694 <_malloc_r+0x460>
    265c:	018003c4 	movi	r6,15
    2660:	3580a72e 	bgeu	r6,r22,2900 <_malloc_r+0x6cc>
    2664:	81400117 	ldw	r5,4(r16)
    2668:	013ffe04 	movi	r4,-8
    266c:	b0bffd04 	addi	r2,r22,-12
    2670:	1104703a 	and	r2,r2,r4
    2674:	2900004c 	andi	r4,r5,1
    2678:	2088b03a 	or	r4,r4,r2
    267c:	81000115 	stw	r4,4(r16)
    2680:	01400144 	movi	r5,5
    2684:	8089883a 	add	r4,r16,r2
    2688:	21400115 	stw	r5,4(r4)
    268c:	21400215 	stw	r5,8(r4)
    2690:	3080cd36 	bltu	r6,r2,29c8 <_malloc_r+0x794>
    2694:	00800074 	movhi	r2,1
    2698:	10945604 	addi	r2,r2,20824
    269c:	11000017 	ldw	r4,0(r2)
    26a0:	20c0012e 	bgeu	r4,r3,26a8 <_malloc_r+0x474>
    26a4:	10c00015 	stw	r3,0(r2)
    26a8:	00800074 	movhi	r2,1
    26ac:	10945504 	addi	r2,r2,20820
    26b0:	11000017 	ldw	r4,0(r2)
    26b4:	9c000217 	ldw	r16,8(r19)
    26b8:	20c0012e 	bgeu	r4,r3,26c0 <_malloc_r+0x48c>
    26bc:	10c00015 	stw	r3,0(r2)
    26c0:	80c00117 	ldw	r3,4(r16)
    26c4:	00bfff04 	movi	r2,-4
    26c8:	1886703a 	and	r3,r3,r2
    26cc:	1c45c83a 	sub	r2,r3,r17
    26d0:	1c400236 	bltu	r3,r17,26dc <_malloc_r+0x4a8>
    26d4:	00c003c4 	movi	r3,15
    26d8:	18800416 	blt	r3,r2,26ec <_malloc_r+0x4b8>
    26dc:	9009883a 	mov	r4,r18
    26e0:	000ef400 	call	ef40 <__malloc_unlock>
    26e4:	0005883a 	mov	r2,zero
    26e8:	003f7b06 	br	24d8 <_malloc_r+0x2a4>
    26ec:	88c00054 	ori	r3,r17,1
    26f0:	80c00115 	stw	r3,4(r16)
    26f4:	8463883a 	add	r17,r16,r17
    26f8:	10800054 	ori	r2,r2,1
    26fc:	9c400215 	stw	r17,8(r19)
    2700:	88800115 	stw	r2,4(r17)
    2704:	9009883a 	mov	r4,r18
    2708:	000ef400 	call	ef40 <__malloc_unlock>
    270c:	80800204 	addi	r2,r16,8
    2710:	003f7106 	br	24d8 <_malloc_r+0x2a4>
    2714:	00c00504 	movi	r3,20
    2718:	18804a2e 	bgeu	r3,r2,2844 <_malloc_r+0x610>
    271c:	00c01504 	movi	r3,84
    2720:	18806e36 	bltu	r3,r2,28dc <_malloc_r+0x6a8>
    2724:	8804d33a 	srli	r2,r17,12
    2728:	12001bc4 	addi	r8,r2,111
    272c:	11c01b84 	addi	r7,r2,110
    2730:	4209883a 	add	r4,r8,r8
    2734:	003edd06 	br	22ac <_malloc_r+0x78>
    2738:	3804d27a 	srli	r2,r7,9
    273c:	00c00104 	movi	r3,4
    2740:	1880442e 	bgeu	r3,r2,2854 <_malloc_r+0x620>
    2744:	00c00504 	movi	r3,20
    2748:	18808136 	bltu	r3,r2,2950 <_malloc_r+0x71c>
    274c:	11401704 	addi	r5,r2,92
    2750:	10c016c4 	addi	r3,r2,91
    2754:	294b883a 	add	r5,r5,r5
    2758:	294b883a 	add	r5,r5,r5
    275c:	294b883a 	add	r5,r5,r5
    2760:	994b883a 	add	r5,r19,r5
    2764:	28800017 	ldw	r2,0(r5)
    2768:	01800074 	movhi	r6,1
    276c:	297ffe04 	addi	r5,r5,-8
    2770:	3186d504 	addi	r6,r6,6996
    2774:	28806526 	beq	r5,r2,290c <_malloc_r+0x6d8>
    2778:	01bfff04 	movi	r6,-4
    277c:	10c00117 	ldw	r3,4(r2)
    2780:	1986703a 	and	r3,r3,r6
    2784:	38c0022e 	bgeu	r7,r3,2790 <_malloc_r+0x55c>
    2788:	10800217 	ldw	r2,8(r2)
    278c:	28bffb1e 	bne	r5,r2,277c <_malloc_r+0x548>
    2790:	11400317 	ldw	r5,12(r2)
    2794:	98c00117 	ldw	r3,4(r19)
    2798:	81400315 	stw	r5,12(r16)
    279c:	80800215 	stw	r2,8(r16)
    27a0:	2c000215 	stw	r16,8(r5)
    27a4:	14000315 	stw	r16,12(r2)
    27a8:	003ef806 	br	238c <_malloc_r+0x158>
    27ac:	88c00054 	ori	r3,r17,1
    27b0:	80c00115 	stw	r3,4(r16)
    27b4:	8463883a 	add	r17,r16,r17
    27b8:	34400515 	stw	r17,20(r6)
    27bc:	34400415 	stw	r17,16(r6)
    27c0:	10c00054 	ori	r3,r2,1
    27c4:	8a000315 	stw	r8,12(r17)
    27c8:	8a000215 	stw	r8,8(r17)
    27cc:	88c00115 	stw	r3,4(r17)
    27d0:	88a3883a 	add	r17,r17,r2
    27d4:	88800015 	stw	r2,0(r17)
    27d8:	9009883a 	mov	r4,r18
    27dc:	000ef400 	call	ef40 <__malloc_unlock>
    27e0:	80800204 	addi	r2,r16,8
    27e4:	003f3c06 	br	24d8 <_malloc_r+0x2a4>
    27e8:	30c00117 	ldw	r3,4(r6)
    27ec:	003ee706 	br	238c <_malloc_r+0x158>
    27f0:	5ac00044 	addi	r11,r11,1
    27f4:	588000cc 	andi	r2,r11,3
    27f8:	31800204 	addi	r6,r6,8
    27fc:	103efd1e 	bne	r2,zero,23f4 <_malloc_r+0x1c0>
    2800:	00002406 	br	2894 <_malloc_r+0x660>
    2804:	14000317 	ldw	r16,12(r2)
    2808:	143f251e 	bne	r2,r16,24a0 <_malloc_r+0x26c>
    280c:	21000084 	addi	r4,r4,2
    2810:	003ebc06 	br	2304 <_malloc_r+0xd0>
    2814:	8085883a 	add	r2,r16,r2
    2818:	10c00117 	ldw	r3,4(r2)
    281c:	81000317 	ldw	r4,12(r16)
    2820:	81400217 	ldw	r5,8(r16)
    2824:	18c00054 	ori	r3,r3,1
    2828:	10c00115 	stw	r3,4(r2)
    282c:	29000315 	stw	r4,12(r5)
    2830:	21400215 	stw	r5,8(r4)
    2834:	9009883a 	mov	r4,r18
    2838:	000ef400 	call	ef40 <__malloc_unlock>
    283c:	80800204 	addi	r2,r16,8
    2840:	003f2506 	br	24d8 <_malloc_r+0x2a4>
    2844:	12001704 	addi	r8,r2,92
    2848:	11c016c4 	addi	r7,r2,91
    284c:	4209883a 	add	r4,r8,r8
    2850:	003e9606 	br	22ac <_malloc_r+0x78>
    2854:	3804d1ba 	srli	r2,r7,6
    2858:	11400e44 	addi	r5,r2,57
    285c:	10c00e04 	addi	r3,r2,56
    2860:	294b883a 	add	r5,r5,r5
    2864:	003fbc06 	br	2758 <_malloc_r+0x524>
    2868:	84ff5926 	beq	r16,r19,25d0 <_malloc_r+0x39c>
    286c:	00800074 	movhi	r2,1
    2870:	1086d504 	addi	r2,r2,6996
    2874:	14000217 	ldw	r16,8(r2)
    2878:	00bfff04 	movi	r2,-4
    287c:	80c00117 	ldw	r3,4(r16)
    2880:	1886703a 	and	r3,r3,r2
    2884:	003f9106 	br	26cc <_malloc_r+0x498>
    2888:	60800217 	ldw	r2,8(r12)
    288c:	213fffc4 	addi	r4,r4,-1
    2890:	1300651e 	bne	r2,r12,2a28 <_malloc_r+0x7f4>
    2894:	208000cc 	andi	r2,r4,3
    2898:	633ffe04 	addi	r12,r12,-8
    289c:	103ffa1e 	bne	r2,zero,2888 <_malloc_r+0x654>
    28a0:	98800117 	ldw	r2,4(r19)
    28a4:	0146303a 	nor	r3,zero,r5
    28a8:	1884703a 	and	r2,r3,r2
    28ac:	98800115 	stw	r2,4(r19)
    28b0:	294b883a 	add	r5,r5,r5
    28b4:	117f2836 	bltu	r2,r5,2558 <_malloc_r+0x324>
    28b8:	283f2726 	beq	r5,zero,2558 <_malloc_r+0x324>
    28bc:	2886703a 	and	r3,r5,r2
    28c0:	5809883a 	mov	r4,r11
    28c4:	183ec31e 	bne	r3,zero,23d4 <_malloc_r+0x1a0>
    28c8:	294b883a 	add	r5,r5,r5
    28cc:	2886703a 	and	r3,r5,r2
    28d0:	21000104 	addi	r4,r4,4
    28d4:	183ffc26 	beq	r3,zero,28c8 <_malloc_r+0x694>
    28d8:	003ebe06 	br	23d4 <_malloc_r+0x1a0>
    28dc:	00c05504 	movi	r3,340
    28e0:	18801236 	bltu	r3,r2,292c <_malloc_r+0x6f8>
    28e4:	8804d3fa 	srli	r2,r17,15
    28e8:	12001e04 	addi	r8,r2,120
    28ec:	11c01dc4 	addi	r7,r2,119
    28f0:	4209883a 	add	r4,r8,r8
    28f4:	003e6d06 	br	22ac <_malloc_r+0x78>
    28f8:	00c40004 	movi	r3,4096
    28fc:	003f4606 	br	2618 <_malloc_r+0x3e4>
    2900:	00800044 	movi	r2,1
    2904:	a0800115 	stw	r2,4(r20)
    2908:	003f7406 	br	26dc <_malloc_r+0x4a8>
    290c:	1805d0ba 	srai	r2,r3,2
    2910:	01c00044 	movi	r7,1
    2914:	30c00117 	ldw	r3,4(r6)
    2918:	388e983a 	sll	r7,r7,r2
    291c:	2805883a 	mov	r2,r5
    2920:	38c6b03a 	or	r3,r7,r3
    2924:	30c00115 	stw	r3,4(r6)
    2928:	003f9b06 	br	2798 <_malloc_r+0x564>
    292c:	00c15504 	movi	r3,1364
    2930:	18801a36 	bltu	r3,r2,299c <_malloc_r+0x768>
    2934:	8804d4ba 	srli	r2,r17,18
    2938:	12001f44 	addi	r8,r2,125
    293c:	11c01f04 	addi	r7,r2,124
    2940:	4209883a 	add	r4,r8,r8
    2944:	003e5906 	br	22ac <_malloc_r+0x78>
    2948:	ad400404 	addi	r21,r21,16
    294c:	003f1706 	br	25ac <_malloc_r+0x378>
    2950:	00c01504 	movi	r3,84
    2954:	18802336 	bltu	r3,r2,29e4 <_malloc_r+0x7b0>
    2958:	3804d33a 	srli	r2,r7,12
    295c:	11401bc4 	addi	r5,r2,111
    2960:	10c01b84 	addi	r3,r2,110
    2964:	294b883a 	add	r5,r5,r5
    2968:	003f7b06 	br	2758 <_malloc_r+0x524>
    296c:	9c000217 	ldw	r16,8(r19)
    2970:	00bfff04 	movi	r2,-4
    2974:	80c00117 	ldw	r3,4(r16)
    2978:	1886703a 	and	r3,r3,r2
    297c:	003f5306 	br	26cc <_malloc_r+0x498>
    2980:	3083ffcc 	andi	r2,r6,4095
    2984:	103f181e 	bne	r2,zero,25e8 <_malloc_r+0x3b4>
    2988:	99000217 	ldw	r4,8(r19)
    298c:	b545883a 	add	r2,r22,r21
    2990:	10800054 	ori	r2,r2,1
    2994:	20800115 	stw	r2,4(r4)
    2998:	003f3e06 	br	2694 <_malloc_r+0x460>
    299c:	01003f84 	movi	r4,254
    29a0:	02001fc4 	movi	r8,127
    29a4:	01c01f84 	movi	r7,126
    29a8:	003e4006 	br	22ac <_malloc_r+0x78>
    29ac:	00800074 	movhi	r2,1
    29b0:	108d8004 	addi	r2,r2,13824
    29b4:	15000015 	stw	r20,0(r2)
    29b8:	003f1106 	br	2600 <_malloc_r+0x3cc>
    29bc:	00800044 	movi	r2,1
    29c0:	002b883a 	mov	r21,zero
    29c4:	003f1f06 	br	2644 <_malloc_r+0x410>
    29c8:	81400204 	addi	r5,r16,8
    29cc:	9009883a 	mov	r4,r18
    29d0:	00070840 	call	7084 <_free_r>
    29d4:	00800074 	movhi	r2,1
    29d8:	10946504 	addi	r2,r2,20884
    29dc:	10c00017 	ldw	r3,0(r2)
    29e0:	003f2c06 	br	2694 <_malloc_r+0x460>
    29e4:	00c05504 	movi	r3,340
    29e8:	18800536 	bltu	r3,r2,2a00 <_malloc_r+0x7cc>
    29ec:	3804d3fa 	srli	r2,r7,15
    29f0:	11401e04 	addi	r5,r2,120
    29f4:	10c01dc4 	addi	r3,r2,119
    29f8:	294b883a 	add	r5,r5,r5
    29fc:	003f5606 	br	2758 <_malloc_r+0x524>
    2a00:	00c15504 	movi	r3,1364
    2a04:	18800536 	bltu	r3,r2,2a1c <_malloc_r+0x7e8>
    2a08:	3804d4ba 	srli	r2,r7,18
    2a0c:	11401f44 	addi	r5,r2,125
    2a10:	10c01f04 	addi	r3,r2,124
    2a14:	294b883a 	add	r5,r5,r5
    2a18:	003f4f06 	br	2758 <_malloc_r+0x524>
    2a1c:	01403f84 	movi	r5,254
    2a20:	00c01f84 	movi	r3,126
    2a24:	003f4c06 	br	2758 <_malloc_r+0x524>
    2a28:	98800117 	ldw	r2,4(r19)
    2a2c:	003fa006 	br	28b0 <_malloc_r+0x67c>
    2a30:	8808d0fa 	srli	r4,r17,3
    2a34:	20800044 	addi	r2,r4,1
    2a38:	1085883a 	add	r2,r2,r2
    2a3c:	003e9006 	br	2480 <_malloc_r+0x24c>

00002a40 <_printf_r>:
    2a40:	defffd04 	addi	sp,sp,-12
    2a44:	2805883a 	mov	r2,r5
    2a48:	dfc00015 	stw	ra,0(sp)
    2a4c:	d9800115 	stw	r6,4(sp)
    2a50:	d9c00215 	stw	r7,8(sp)
    2a54:	21400217 	ldw	r5,8(r4)
    2a58:	d9c00104 	addi	r7,sp,4
    2a5c:	100d883a 	mov	r6,r2
    2a60:	0002c6c0 	call	2c6c <___vfprintf_internal_r>
    2a64:	dfc00017 	ldw	ra,0(sp)
    2a68:	dec00304 	addi	sp,sp,12
    2a6c:	f800283a 	ret

00002a70 <printf>:
    2a70:	defffc04 	addi	sp,sp,-16
    2a74:	dfc00015 	stw	ra,0(sp)
    2a78:	d9400115 	stw	r5,4(sp)
    2a7c:	d9800215 	stw	r6,8(sp)
    2a80:	d9c00315 	stw	r7,12(sp)
    2a84:	00800074 	movhi	r2,1
    2a88:	108d8304 	addi	r2,r2,13836
    2a8c:	10800017 	ldw	r2,0(r2)
    2a90:	200b883a 	mov	r5,r4
    2a94:	d9800104 	addi	r6,sp,4
    2a98:	11000217 	ldw	r4,8(r2)
    2a9c:	0004e640 	call	4e64 <__vfprintf_internal>
    2aa0:	dfc00017 	ldw	ra,0(sp)
    2aa4:	dec00404 	addi	sp,sp,16
    2aa8:	f800283a 	ret

00002aac <_puts_r>:
    2aac:	defff604 	addi	sp,sp,-40
    2ab0:	dc000715 	stw	r16,28(sp)
    2ab4:	2021883a 	mov	r16,r4
    2ab8:	2809883a 	mov	r4,r5
    2abc:	dc400815 	stw	r17,32(sp)
    2ac0:	dfc00915 	stw	ra,36(sp)
    2ac4:	2823883a 	mov	r17,r5
    2ac8:	0002bd40 	call	2bd4 <strlen>
    2acc:	10c00044 	addi	r3,r2,1
    2ad0:	d8800115 	stw	r2,4(sp)
    2ad4:	00800074 	movhi	r2,1
    2ad8:	10861704 	addi	r2,r2,6236
    2adc:	d8800215 	stw	r2,8(sp)
    2ae0:	00800044 	movi	r2,1
    2ae4:	d8800315 	stw	r2,12(sp)
    2ae8:	00800084 	movi	r2,2
    2aec:	dc400015 	stw	r17,0(sp)
    2af0:	d8c00615 	stw	r3,24(sp)
    2af4:	dec00415 	stw	sp,16(sp)
    2af8:	d8800515 	stw	r2,20(sp)
    2afc:	80000226 	beq	r16,zero,2b08 <_puts_r+0x5c>
    2b00:	80800e17 	ldw	r2,56(r16)
    2b04:	10001426 	beq	r2,zero,2b58 <_puts_r+0xac>
    2b08:	81400217 	ldw	r5,8(r16)
    2b0c:	2880030b 	ldhu	r2,12(r5)
    2b10:	10c8000c 	andi	r3,r2,8192
    2b14:	1800061e 	bne	r3,zero,2b30 <_puts_r+0x84>
    2b18:	29001917 	ldw	r4,100(r5)
    2b1c:	00f7ffc4 	movi	r3,-8193
    2b20:	10880014 	ori	r2,r2,8192
    2b24:	20c6703a 	and	r3,r4,r3
    2b28:	2880030d 	sth	r2,12(r5)
    2b2c:	28c01915 	stw	r3,100(r5)
    2b30:	d9800404 	addi	r6,sp,16
    2b34:	8009883a 	mov	r4,r16
    2b38:	00073940 	call	7394 <__sfvwrite_r>
    2b3c:	1000091e 	bne	r2,zero,2b64 <_puts_r+0xb8>
    2b40:	00800284 	movi	r2,10
    2b44:	dfc00917 	ldw	ra,36(sp)
    2b48:	dc400817 	ldw	r17,32(sp)
    2b4c:	dc000717 	ldw	r16,28(sp)
    2b50:	dec00a04 	addi	sp,sp,40
    2b54:	f800283a 	ret
    2b58:	8009883a 	mov	r4,r16
    2b5c:	0006f100 	call	6f10 <__sinit>
    2b60:	003fe906 	br	2b08 <_puts_r+0x5c>
    2b64:	00bfffc4 	movi	r2,-1
    2b68:	003ff606 	br	2b44 <_puts_r+0x98>

00002b6c <puts>:
    2b6c:	00800074 	movhi	r2,1
    2b70:	108d8304 	addi	r2,r2,13836
    2b74:	200b883a 	mov	r5,r4
    2b78:	11000017 	ldw	r4,0(r2)
    2b7c:	0002aac1 	jmpi	2aac <_puts_r>

00002b80 <_sbrk_r>:
    2b80:	defffd04 	addi	sp,sp,-12
    2b84:	dc000015 	stw	r16,0(sp)
    2b88:	04000074 	movhi	r16,1
    2b8c:	dc400115 	stw	r17,4(sp)
    2b90:	84145804 	addi	r16,r16,20832
    2b94:	2023883a 	mov	r17,r4
    2b98:	2809883a 	mov	r4,r5
    2b9c:	dfc00215 	stw	ra,8(sp)
    2ba0:	80000015 	stw	zero,0(r16)
    2ba4:	000f1000 	call	f100 <sbrk>
    2ba8:	00ffffc4 	movi	r3,-1
    2bac:	10c00526 	beq	r2,r3,2bc4 <_sbrk_r+0x44>
    2bb0:	dfc00217 	ldw	ra,8(sp)
    2bb4:	dc400117 	ldw	r17,4(sp)
    2bb8:	dc000017 	ldw	r16,0(sp)
    2bbc:	dec00304 	addi	sp,sp,12
    2bc0:	f800283a 	ret
    2bc4:	80c00017 	ldw	r3,0(r16)
    2bc8:	183ff926 	beq	r3,zero,2bb0 <_sbrk_r+0x30>
    2bcc:	88c00015 	stw	r3,0(r17)
    2bd0:	003ff706 	br	2bb0 <_sbrk_r+0x30>

00002bd4 <strlen>:
    2bd4:	208000cc 	andi	r2,r4,3
    2bd8:	10002026 	beq	r2,zero,2c5c <strlen+0x88>
    2bdc:	20800007 	ldb	r2,0(r4)
    2be0:	10002026 	beq	r2,zero,2c64 <strlen+0x90>
    2be4:	2005883a 	mov	r2,r4
    2be8:	00000206 	br	2bf4 <strlen+0x20>
    2bec:	10c00007 	ldb	r3,0(r2)
    2bf0:	18001826 	beq	r3,zero,2c54 <strlen+0x80>
    2bf4:	10800044 	addi	r2,r2,1
    2bf8:	10c000cc 	andi	r3,r2,3
    2bfc:	183ffb1e 	bne	r3,zero,2bec <strlen+0x18>
    2c00:	10c00017 	ldw	r3,0(r2)
    2c04:	01ffbff4 	movhi	r7,65279
    2c08:	39ffbfc4 	addi	r7,r7,-257
    2c0c:	00ca303a 	nor	r5,zero,r3
    2c10:	01a02074 	movhi	r6,32897
    2c14:	19c7883a 	add	r3,r3,r7
    2c18:	31a02004 	addi	r6,r6,-32640
    2c1c:	1946703a 	and	r3,r3,r5
    2c20:	1986703a 	and	r3,r3,r6
    2c24:	1800091e 	bne	r3,zero,2c4c <strlen+0x78>
    2c28:	10800104 	addi	r2,r2,4
    2c2c:	10c00017 	ldw	r3,0(r2)
    2c30:	19cb883a 	add	r5,r3,r7
    2c34:	00c6303a 	nor	r3,zero,r3
    2c38:	28c6703a 	and	r3,r5,r3
    2c3c:	1986703a 	and	r3,r3,r6
    2c40:	183ff926 	beq	r3,zero,2c28 <strlen+0x54>
    2c44:	00000106 	br	2c4c <strlen+0x78>
    2c48:	10800044 	addi	r2,r2,1
    2c4c:	10c00007 	ldb	r3,0(r2)
    2c50:	183ffd1e 	bne	r3,zero,2c48 <strlen+0x74>
    2c54:	1105c83a 	sub	r2,r2,r4
    2c58:	f800283a 	ret
    2c5c:	2005883a 	mov	r2,r4
    2c60:	003fe706 	br	2c00 <strlen+0x2c>
    2c64:	0005883a 	mov	r2,zero
    2c68:	f800283a 	ret

00002c6c <___vfprintf_internal_r>:
    2c6c:	deffb804 	addi	sp,sp,-288
    2c70:	dfc04715 	stw	ra,284(sp)
    2c74:	ddc04515 	stw	r23,276(sp)
    2c78:	dd404315 	stw	r21,268(sp)
    2c7c:	d9002c15 	stw	r4,176(sp)
    2c80:	282f883a 	mov	r23,r5
    2c84:	302b883a 	mov	r21,r6
    2c88:	d9c02d15 	stw	r7,180(sp)
    2c8c:	df004615 	stw	fp,280(sp)
    2c90:	dd804415 	stw	r22,272(sp)
    2c94:	dd004215 	stw	r20,264(sp)
    2c98:	dcc04115 	stw	r19,260(sp)
    2c9c:	dc804015 	stw	r18,256(sp)
    2ca0:	dc403f15 	stw	r17,252(sp)
    2ca4:	dc003e15 	stw	r16,248(sp)
    2ca8:	0007a840 	call	7a84 <_localeconv_r>
    2cac:	10800017 	ldw	r2,0(r2)
    2cb0:	1009883a 	mov	r4,r2
    2cb4:	d8803415 	stw	r2,208(sp)
    2cb8:	0002bd40 	call	2bd4 <strlen>
    2cbc:	d8803715 	stw	r2,220(sp)
    2cc0:	d8802c17 	ldw	r2,176(sp)
    2cc4:	10000226 	beq	r2,zero,2cd0 <___vfprintf_internal_r+0x64>
    2cc8:	10800e17 	ldw	r2,56(r2)
    2ccc:	1000f926 	beq	r2,zero,30b4 <___vfprintf_internal_r+0x448>
    2cd0:	b880030b 	ldhu	r2,12(r23)
    2cd4:	10c8000c 	andi	r3,r2,8192
    2cd8:	1800061e 	bne	r3,zero,2cf4 <___vfprintf_internal_r+0x88>
    2cdc:	b9001917 	ldw	r4,100(r23)
    2ce0:	00f7ffc4 	movi	r3,-8193
    2ce4:	10880014 	ori	r2,r2,8192
    2ce8:	20c6703a 	and	r3,r4,r3
    2cec:	b880030d 	sth	r2,12(r23)
    2cf0:	b8c01915 	stw	r3,100(r23)
    2cf4:	10c0020c 	andi	r3,r2,8
    2cf8:	1800c126 	beq	r3,zero,3000 <___vfprintf_internal_r+0x394>
    2cfc:	b8c00417 	ldw	r3,16(r23)
    2d00:	1800bf26 	beq	r3,zero,3000 <___vfprintf_internal_r+0x394>
    2d04:	1080068c 	andi	r2,r2,26
    2d08:	00c00284 	movi	r3,10
    2d0c:	10c0c426 	beq	r2,r3,3020 <___vfprintf_internal_r+0x3b4>
    2d10:	d8c00404 	addi	r3,sp,16
    2d14:	05000074 	movhi	r20,1
    2d18:	d9001e04 	addi	r4,sp,120
    2d1c:	a5062884 	addi	r20,r20,6306
    2d20:	d8c01e15 	stw	r3,120(sp)
    2d24:	d8002015 	stw	zero,128(sp)
    2d28:	d8001f15 	stw	zero,124(sp)
    2d2c:	d8003315 	stw	zero,204(sp)
    2d30:	d8003615 	stw	zero,216(sp)
    2d34:	d8003815 	stw	zero,224(sp)
    2d38:	1811883a 	mov	r8,r3
    2d3c:	d8003915 	stw	zero,228(sp)
    2d40:	d8003a15 	stw	zero,232(sp)
    2d44:	d8002f15 	stw	zero,188(sp)
    2d48:	d9002815 	stw	r4,160(sp)
    2d4c:	a8800007 	ldb	r2,0(r21)
    2d50:	10027b26 	beq	r2,zero,3740 <___vfprintf_internal_r+0xad4>
    2d54:	00c00944 	movi	r3,37
    2d58:	a821883a 	mov	r16,r21
    2d5c:	10c0021e 	bne	r2,r3,2d68 <___vfprintf_internal_r+0xfc>
    2d60:	00001406 	br	2db4 <___vfprintf_internal_r+0x148>
    2d64:	10c00326 	beq	r2,r3,2d74 <___vfprintf_internal_r+0x108>
    2d68:	84000044 	addi	r16,r16,1
    2d6c:	80800007 	ldb	r2,0(r16)
    2d70:	103ffc1e 	bne	r2,zero,2d64 <___vfprintf_internal_r+0xf8>
    2d74:	8563c83a 	sub	r17,r16,r21
    2d78:	88000e26 	beq	r17,zero,2db4 <___vfprintf_internal_r+0x148>
    2d7c:	d8c02017 	ldw	r3,128(sp)
    2d80:	d8801f17 	ldw	r2,124(sp)
    2d84:	45400015 	stw	r21,0(r8)
    2d88:	1c47883a 	add	r3,r3,r17
    2d8c:	10800044 	addi	r2,r2,1
    2d90:	d8c02015 	stw	r3,128(sp)
    2d94:	44400115 	stw	r17,4(r8)
    2d98:	d8801f15 	stw	r2,124(sp)
    2d9c:	00c001c4 	movi	r3,7
    2da0:	1880a716 	blt	r3,r2,3040 <___vfprintf_internal_r+0x3d4>
    2da4:	42000204 	addi	r8,r8,8
    2da8:	d9402f17 	ldw	r5,188(sp)
    2dac:	2c4b883a 	add	r5,r5,r17
    2db0:	d9402f15 	stw	r5,188(sp)
    2db4:	80800007 	ldb	r2,0(r16)
    2db8:	1000a826 	beq	r2,zero,305c <___vfprintf_internal_r+0x3f0>
    2dbc:	84400047 	ldb	r17,1(r16)
    2dc0:	00bfffc4 	movi	r2,-1
    2dc4:	85400044 	addi	r21,r16,1
    2dc8:	d8002785 	stb	zero,158(sp)
    2dcc:	0007883a 	mov	r3,zero
    2dd0:	000f883a 	mov	r7,zero
    2dd4:	d8802915 	stw	r2,164(sp)
    2dd8:	d8003115 	stw	zero,196(sp)
    2ddc:	0025883a 	mov	r18,zero
    2de0:	01401604 	movi	r5,88
    2de4:	01800244 	movi	r6,9
    2de8:	02800a84 	movi	r10,42
    2dec:	02401b04 	movi	r9,108
    2df0:	ad400044 	addi	r21,r21,1
    2df4:	88bff804 	addi	r2,r17,-32
    2df8:	28830436 	bltu	r5,r2,3a0c <___vfprintf_internal_r+0xda0>
    2dfc:	100490ba 	slli	r2,r2,2
    2e00:	01000034 	movhi	r4,0
    2e04:	210b8504 	addi	r4,r4,11796
    2e08:	1105883a 	add	r2,r2,r4
    2e0c:	10800017 	ldw	r2,0(r2)
    2e10:	1000683a 	jmp	r2
    2e14:	0000392c 	andhi	zero,zero,228
    2e18:	00003a0c 	andi	zero,zero,232
    2e1c:	00003a0c 	andi	zero,zero,232
    2e20:	0000394c 	andi	zero,zero,229
    2e24:	00003a0c 	andi	zero,zero,232
    2e28:	00003a0c 	andi	zero,zero,232
    2e2c:	00003a0c 	andi	zero,zero,232
    2e30:	00003a0c 	andi	zero,zero,232
    2e34:	00003a0c 	andi	zero,zero,232
    2e38:	00003a0c 	andi	zero,zero,232
    2e3c:	000030c0 	call	30c <init_camera+0x8c>
    2e40:	00003868 	cmpgeui	zero,zero,225
    2e44:	00003a0c 	andi	zero,zero,232
    2e48:	00002f88 	cmpgei	zero,zero,190
    2e4c:	000030e8 	cmpgeui	zero,zero,195
    2e50:	00003a0c 	andi	zero,zero,232
    2e54:	00003128 	cmpgeui	zero,zero,196
    2e58:	00003134 	movhi	zero,196
    2e5c:	00003134 	movhi	zero,196
    2e60:	00003134 	movhi	zero,196
    2e64:	00003134 	movhi	zero,196
    2e68:	00003134 	movhi	zero,196
    2e6c:	00003134 	movhi	zero,196
    2e70:	00003134 	movhi	zero,196
    2e74:	00003134 	movhi	zero,196
    2e78:	00003134 	movhi	zero,196
    2e7c:	00003a0c 	andi	zero,zero,232
    2e80:	00003a0c 	andi	zero,zero,232
    2e84:	00003a0c 	andi	zero,zero,232
    2e88:	00003a0c 	andi	zero,zero,232
    2e8c:	00003a0c 	andi	zero,zero,232
    2e90:	00003a0c 	andi	zero,zero,232
    2e94:	00003a0c 	andi	zero,zero,232
    2e98:	00003a0c 	andi	zero,zero,232
    2e9c:	00003a0c 	andi	zero,zero,232
    2ea0:	00003a0c 	andi	zero,zero,232
    2ea4:	00003168 	cmpgeui	zero,zero,197
    2ea8:	00003224 	muli	zero,zero,200
    2eac:	00003a0c 	andi	zero,zero,232
    2eb0:	00003224 	muli	zero,zero,200
    2eb4:	00003a0c 	andi	zero,zero,232
    2eb8:	00003a0c 	andi	zero,zero,232
    2ebc:	00003a0c 	andi	zero,zero,232
    2ec0:	00003a0c 	andi	zero,zero,232
    2ec4:	000032c4 	movi	zero,203
    2ec8:	00003a0c 	andi	zero,zero,232
    2ecc:	00003a0c 	andi	zero,zero,232
    2ed0:	000032d0 	cmplti	zero,zero,203
    2ed4:	00003a0c 	andi	zero,zero,232
    2ed8:	00003a0c 	andi	zero,zero,232
    2edc:	00003a0c 	andi	zero,zero,232
    2ee0:	00003a0c 	andi	zero,zero,232
    2ee4:	00003a0c 	andi	zero,zero,232
    2ee8:	00003748 	cmpgei	zero,zero,221
    2eec:	00003a0c 	andi	zero,zero,232
    2ef0:	00003a0c 	andi	zero,zero,232
    2ef4:	000037a8 	cmpgeui	zero,zero,222
    2ef8:	00003a0c 	andi	zero,zero,232
    2efc:	00003a0c 	andi	zero,zero,232
    2f00:	00003a0c 	andi	zero,zero,232
    2f04:	00003a0c 	andi	zero,zero,232
    2f08:	00003a0c 	andi	zero,zero,232
    2f0c:	00003a0c 	andi	zero,zero,232
    2f10:	00003a0c 	andi	zero,zero,232
    2f14:	00003a0c 	andi	zero,zero,232
    2f18:	00003a0c 	andi	zero,zero,232
    2f1c:	00003a0c 	andi	zero,zero,232
    2f20:	000039b8 	rdprs	zero,zero,230
    2f24:	00003958 	cmpnei	zero,zero,229
    2f28:	00003224 	muli	zero,zero,200
    2f2c:	00003224 	muli	zero,zero,200
    2f30:	00003224 	muli	zero,zero,200
    2f34:	00003968 	cmpgeui	zero,zero,229
    2f38:	00003958 	cmpnei	zero,zero,229
    2f3c:	00003a0c 	andi	zero,zero,232
    2f40:	00003a0c 	andi	zero,zero,232
    2f44:	00003974 	movhi	zero,229
    2f48:	00003a0c 	andi	zero,zero,232
    2f4c:	00003984 	movi	zero,230
    2f50:	00003858 	cmpnei	zero,zero,225
    2f54:	00002f94 	movui	zero,190
    2f58:	00003878 	rdprs	zero,zero,225
    2f5c:	00003a0c 	andi	zero,zero,232
    2f60:	00003884 	movi	zero,226
    2f64:	00003a0c 	andi	zero,zero,232
    2f68:	000038e0 	cmpeqi	zero,zero,227
    2f6c:	00003a0c 	andi	zero,zero,232
    2f70:	00003a0c 	andi	zero,zero,232
    2f74:	000038f0 	cmpltui	zero,zero,227
    2f78:	d9003117 	ldw	r4,196(sp)
    2f7c:	d8802d15 	stw	r2,180(sp)
    2f80:	0109c83a 	sub	r4,zero,r4
    2f84:	d9003115 	stw	r4,196(sp)
    2f88:	94800114 	ori	r18,r18,4
    2f8c:	ac400007 	ldb	r17,0(r21)
    2f90:	003f9706 	br	2df0 <___vfprintf_internal_r+0x184>
    2f94:	00800c04 	movi	r2,48
    2f98:	d9002d17 	ldw	r4,180(sp)
    2f9c:	d9402917 	ldw	r5,164(sp)
    2fa0:	d8802705 	stb	r2,156(sp)
    2fa4:	00801e04 	movi	r2,120
    2fa8:	d8802745 	stb	r2,157(sp)
    2fac:	d8002785 	stb	zero,158(sp)
    2fb0:	20c00104 	addi	r3,r4,4
    2fb4:	24c00017 	ldw	r19,0(r4)
    2fb8:	002d883a 	mov	r22,zero
    2fbc:	90800094 	ori	r2,r18,2
    2fc0:	28029a16 	blt	r5,zero,3a2c <___vfprintf_internal_r+0xdc0>
    2fc4:	00bfdfc4 	movi	r2,-129
    2fc8:	90a4703a 	and	r18,r18,r2
    2fcc:	d8c02d15 	stw	r3,180(sp)
    2fd0:	94800094 	ori	r18,r18,2
    2fd4:	9802871e 	bne	r19,zero,39f4 <___vfprintf_internal_r+0xd88>
    2fd8:	00800074 	movhi	r2,1
    2fdc:	10862104 	addi	r2,r2,6276
    2fe0:	d8803915 	stw	r2,228(sp)
    2fe4:	04401e04 	movi	r17,120
    2fe8:	d8802917 	ldw	r2,164(sp)
    2fec:	0039883a 	mov	fp,zero
    2ff0:	1001e926 	beq	r2,zero,3798 <___vfprintf_internal_r+0xb2c>
    2ff4:	0027883a 	mov	r19,zero
    2ff8:	002d883a 	mov	r22,zero
    2ffc:	00020506 	br	3814 <___vfprintf_internal_r+0xba8>
    3000:	d9002c17 	ldw	r4,176(sp)
    3004:	b80b883a 	mov	r5,r23
    3008:	0004f3c0 	call	4f3c <__swsetup_r>
    300c:	1005ac1e 	bne	r2,zero,46c0 <___vfprintf_internal_r+0x1a54>
    3010:	b880030b 	ldhu	r2,12(r23)
    3014:	00c00284 	movi	r3,10
    3018:	1080068c 	andi	r2,r2,26
    301c:	10ff3c1e 	bne	r2,r3,2d10 <___vfprintf_internal_r+0xa4>
    3020:	b880038f 	ldh	r2,14(r23)
    3024:	103f3a16 	blt	r2,zero,2d10 <___vfprintf_internal_r+0xa4>
    3028:	d9c02d17 	ldw	r7,180(sp)
    302c:	d9002c17 	ldw	r4,176(sp)
    3030:	a80d883a 	mov	r6,r21
    3034:	b80b883a 	mov	r5,r23
    3038:	0004e800 	call	4e80 <__sbprintf>
    303c:	00001106 	br	3084 <___vfprintf_internal_r+0x418>
    3040:	d9002c17 	ldw	r4,176(sp)
    3044:	d9801e04 	addi	r6,sp,120
    3048:	b80b883a 	mov	r5,r23
    304c:	0009a080 	call	9a08 <__sprint_r>
    3050:	1000081e 	bne	r2,zero,3074 <___vfprintf_internal_r+0x408>
    3054:	da000404 	addi	r8,sp,16
    3058:	003f5306 	br	2da8 <___vfprintf_internal_r+0x13c>
    305c:	d8802017 	ldw	r2,128(sp)
    3060:	10000426 	beq	r2,zero,3074 <___vfprintf_internal_r+0x408>
    3064:	d9002c17 	ldw	r4,176(sp)
    3068:	d9801e04 	addi	r6,sp,120
    306c:	b80b883a 	mov	r5,r23
    3070:	0009a080 	call	9a08 <__sprint_r>
    3074:	b880030b 	ldhu	r2,12(r23)
    3078:	1080100c 	andi	r2,r2,64
    307c:	1005901e 	bne	r2,zero,46c0 <___vfprintf_internal_r+0x1a54>
    3080:	d8802f17 	ldw	r2,188(sp)
    3084:	dfc04717 	ldw	ra,284(sp)
    3088:	df004617 	ldw	fp,280(sp)
    308c:	ddc04517 	ldw	r23,276(sp)
    3090:	dd804417 	ldw	r22,272(sp)
    3094:	dd404317 	ldw	r21,268(sp)
    3098:	dd004217 	ldw	r20,264(sp)
    309c:	dcc04117 	ldw	r19,260(sp)
    30a0:	dc804017 	ldw	r18,256(sp)
    30a4:	dc403f17 	ldw	r17,252(sp)
    30a8:	dc003e17 	ldw	r16,248(sp)
    30ac:	dec04804 	addi	sp,sp,288
    30b0:	f800283a 	ret
    30b4:	d9002c17 	ldw	r4,176(sp)
    30b8:	0006f100 	call	6f10 <__sinit>
    30bc:	003f0406 	br	2cd0 <___vfprintf_internal_r+0x64>
    30c0:	d8802d17 	ldw	r2,180(sp)
    30c4:	d9002d17 	ldw	r4,180(sp)
    30c8:	10800017 	ldw	r2,0(r2)
    30cc:	d8803115 	stw	r2,196(sp)
    30d0:	20800104 	addi	r2,r4,4
    30d4:	d9003117 	ldw	r4,196(sp)
    30d8:	203fa716 	blt	r4,zero,2f78 <___vfprintf_internal_r+0x30c>
    30dc:	d8802d15 	stw	r2,180(sp)
    30e0:	ac400007 	ldb	r17,0(r21)
    30e4:	003f4206 	br	2df0 <___vfprintf_internal_r+0x184>
    30e8:	ac400007 	ldb	r17,0(r21)
    30ec:	aac00044 	addi	r11,r21,1
    30f0:	8a872826 	beq	r17,r10,4d94 <___vfprintf_internal_r+0x2128>
    30f4:	88bff404 	addi	r2,r17,-48
    30f8:	0009883a 	mov	r4,zero
    30fc:	30867d36 	bltu	r6,r2,4af4 <___vfprintf_internal_r+0x1e88>
    3100:	5c400007 	ldb	r17,0(r11)
    3104:	210002a4 	muli	r4,r4,10
    3108:	5d400044 	addi	r21,r11,1
    310c:	a817883a 	mov	r11,r21
    3110:	2089883a 	add	r4,r4,r2
    3114:	88bff404 	addi	r2,r17,-48
    3118:	30bff92e 	bgeu	r6,r2,3100 <___vfprintf_internal_r+0x494>
    311c:	2005c916 	blt	r4,zero,4844 <___vfprintf_internal_r+0x1bd8>
    3120:	d9002915 	stw	r4,164(sp)
    3124:	003f3306 	br	2df4 <___vfprintf_internal_r+0x188>
    3128:	94802014 	ori	r18,r18,128
    312c:	ac400007 	ldb	r17,0(r21)
    3130:	003f2f06 	br	2df0 <___vfprintf_internal_r+0x184>
    3134:	a809883a 	mov	r4,r21
    3138:	d8003115 	stw	zero,196(sp)
    313c:	88bff404 	addi	r2,r17,-48
    3140:	0017883a 	mov	r11,zero
    3144:	24400007 	ldb	r17,0(r4)
    3148:	5ac002a4 	muli	r11,r11,10
    314c:	ad400044 	addi	r21,r21,1
    3150:	a809883a 	mov	r4,r21
    3154:	12d7883a 	add	r11,r2,r11
    3158:	88bff404 	addi	r2,r17,-48
    315c:	30bff92e 	bgeu	r6,r2,3144 <___vfprintf_internal_r+0x4d8>
    3160:	dac03115 	stw	r11,196(sp)
    3164:	003f2306 	br	2df4 <___vfprintf_internal_r+0x188>
    3168:	18c03fcc 	andi	r3,r3,255
    316c:	18072b1e 	bne	r3,zero,4e1c <___vfprintf_internal_r+0x21b0>
    3170:	94800414 	ori	r18,r18,16
    3174:	9080080c 	andi	r2,r18,32
    3178:	10037b26 	beq	r2,zero,3f68 <___vfprintf_internal_r+0x12fc>
    317c:	d9402d17 	ldw	r5,180(sp)
    3180:	28800117 	ldw	r2,4(r5)
    3184:	2cc00017 	ldw	r19,0(r5)
    3188:	29400204 	addi	r5,r5,8
    318c:	d9402d15 	stw	r5,180(sp)
    3190:	102d883a 	mov	r22,r2
    3194:	10044b16 	blt	r2,zero,42c4 <___vfprintf_internal_r+0x1658>
    3198:	d9402917 	ldw	r5,164(sp)
    319c:	df002783 	ldbu	fp,158(sp)
    31a0:	2803bc16 	blt	r5,zero,4094 <___vfprintf_internal_r+0x1428>
    31a4:	00ffdfc4 	movi	r3,-129
    31a8:	9d84b03a 	or	r2,r19,r22
    31ac:	90e4703a 	and	r18,r18,r3
    31b0:	10017726 	beq	r2,zero,3790 <___vfprintf_internal_r+0xb24>
    31b4:	b0038326 	beq	r22,zero,3fc4 <___vfprintf_internal_r+0x1358>
    31b8:	dc402a15 	stw	r17,168(sp)
    31bc:	dc001e04 	addi	r16,sp,120
    31c0:	b023883a 	mov	r17,r22
    31c4:	402d883a 	mov	r22,r8
    31c8:	9809883a 	mov	r4,r19
    31cc:	880b883a 	mov	r5,r17
    31d0:	01800284 	movi	r6,10
    31d4:	000f883a 	mov	r7,zero
    31d8:	000be000 	call	be00 <__umoddi3>
    31dc:	10800c04 	addi	r2,r2,48
    31e0:	843fffc4 	addi	r16,r16,-1
    31e4:	9809883a 	mov	r4,r19
    31e8:	880b883a 	mov	r5,r17
    31ec:	80800005 	stb	r2,0(r16)
    31f0:	01800284 	movi	r6,10
    31f4:	000f883a 	mov	r7,zero
    31f8:	000b8880 	call	b888 <__udivdi3>
    31fc:	1027883a 	mov	r19,r2
    3200:	10c4b03a 	or	r2,r2,r3
    3204:	1823883a 	mov	r17,r3
    3208:	103fef1e 	bne	r2,zero,31c8 <___vfprintf_internal_r+0x55c>
    320c:	d8c02817 	ldw	r3,160(sp)
    3210:	dc402a17 	ldw	r17,168(sp)
    3214:	b011883a 	mov	r8,r22
    3218:	1c07c83a 	sub	r3,r3,r16
    321c:	d8c02e15 	stw	r3,184(sp)
    3220:	00005906 	br	3388 <___vfprintf_internal_r+0x71c>
    3224:	18c03fcc 	andi	r3,r3,255
    3228:	1806fa1e 	bne	r3,zero,4e14 <___vfprintf_internal_r+0x21a8>
    322c:	9080020c 	andi	r2,r18,8
    3230:	10048a26 	beq	r2,zero,445c <___vfprintf_internal_r+0x17f0>
    3234:	d8c02d17 	ldw	r3,180(sp)
    3238:	d9002d17 	ldw	r4,180(sp)
    323c:	d9402d17 	ldw	r5,180(sp)
    3240:	18c00017 	ldw	r3,0(r3)
    3244:	21000117 	ldw	r4,4(r4)
    3248:	29400204 	addi	r5,r5,8
    324c:	d8c03615 	stw	r3,216(sp)
    3250:	d9003815 	stw	r4,224(sp)
    3254:	d9402d15 	stw	r5,180(sp)
    3258:	d9003617 	ldw	r4,216(sp)
    325c:	d9403817 	ldw	r5,224(sp)
    3260:	da003d15 	stw	r8,244(sp)
    3264:	04000044 	movi	r16,1
    3268:	00096800 	call	9680 <__fpclassifyd>
    326c:	da003d17 	ldw	r8,244(sp)
    3270:	14041f1e 	bne	r2,r16,42f0 <___vfprintf_internal_r+0x1684>
    3274:	d9003617 	ldw	r4,216(sp)
    3278:	d9403817 	ldw	r5,224(sp)
    327c:	000d883a 	mov	r6,zero
    3280:	000f883a 	mov	r7,zero
    3284:	000d6300 	call	d630 <__ledf2>
    3288:	da003d17 	ldw	r8,244(sp)
    328c:	1005be16 	blt	r2,zero,4988 <___vfprintf_internal_r+0x1d1c>
    3290:	df002783 	ldbu	fp,158(sp)
    3294:	008011c4 	movi	r2,71
    3298:	1445330e 	bge	r2,r17,4768 <___vfprintf_internal_r+0x1afc>
    329c:	04000074 	movhi	r16,1
    32a0:	84061904 	addi	r16,r16,6244
    32a4:	00c000c4 	movi	r3,3
    32a8:	00bfdfc4 	movi	r2,-129
    32ac:	d8c02a15 	stw	r3,168(sp)
    32b0:	90a4703a 	and	r18,r18,r2
    32b4:	d8c02e15 	stw	r3,184(sp)
    32b8:	d8002915 	stw	zero,164(sp)
    32bc:	d8003215 	stw	zero,200(sp)
    32c0:	00003706 	br	33a0 <___vfprintf_internal_r+0x734>
    32c4:	94800214 	ori	r18,r18,8
    32c8:	ac400007 	ldb	r17,0(r21)
    32cc:	003ec806 	br	2df0 <___vfprintf_internal_r+0x184>
    32d0:	18c03fcc 	andi	r3,r3,255
    32d4:	1806db1e 	bne	r3,zero,4e44 <___vfprintf_internal_r+0x21d8>
    32d8:	94800414 	ori	r18,r18,16
    32dc:	9080080c 	andi	r2,r18,32
    32e0:	1002d826 	beq	r2,zero,3e44 <___vfprintf_internal_r+0x11d8>
    32e4:	d9402d17 	ldw	r5,180(sp)
    32e8:	d8c02917 	ldw	r3,164(sp)
    32ec:	d8002785 	stb	zero,158(sp)
    32f0:	28800204 	addi	r2,r5,8
    32f4:	2cc00017 	ldw	r19,0(r5)
    32f8:	2d800117 	ldw	r22,4(r5)
    32fc:	18048f16 	blt	r3,zero,453c <___vfprintf_internal_r+0x18d0>
    3300:	013fdfc4 	movi	r4,-129
    3304:	9d86b03a 	or	r3,r19,r22
    3308:	d8802d15 	stw	r2,180(sp)
    330c:	9124703a 	and	r18,r18,r4
    3310:	1802d91e 	bne	r3,zero,3e78 <___vfprintf_internal_r+0x120c>
    3314:	d8c02917 	ldw	r3,164(sp)
    3318:	0039883a 	mov	fp,zero
    331c:	1805c326 	beq	r3,zero,4a2c <___vfprintf_internal_r+0x1dc0>
    3320:	0027883a 	mov	r19,zero
    3324:	002d883a 	mov	r22,zero
    3328:	dc001e04 	addi	r16,sp,120
    332c:	9806d0fa 	srli	r3,r19,3
    3330:	b008977a 	slli	r4,r22,29
    3334:	b02cd0fa 	srli	r22,r22,3
    3338:	9cc001cc 	andi	r19,r19,7
    333c:	98800c04 	addi	r2,r19,48
    3340:	843fffc4 	addi	r16,r16,-1
    3344:	20e6b03a 	or	r19,r4,r3
    3348:	80800005 	stb	r2,0(r16)
    334c:	9d86b03a 	or	r3,r19,r22
    3350:	183ff61e 	bne	r3,zero,332c <___vfprintf_internal_r+0x6c0>
    3354:	90c0004c 	andi	r3,r18,1
    3358:	18013b26 	beq	r3,zero,3848 <___vfprintf_internal_r+0xbdc>
    335c:	10803fcc 	andi	r2,r2,255
    3360:	1080201c 	xori	r2,r2,128
    3364:	10bfe004 	addi	r2,r2,-128
    3368:	00c00c04 	movi	r3,48
    336c:	10c13626 	beq	r2,r3,3848 <___vfprintf_internal_r+0xbdc>
    3370:	80ffffc5 	stb	r3,-1(r16)
    3374:	d8c02817 	ldw	r3,160(sp)
    3378:	80bfffc4 	addi	r2,r16,-1
    337c:	1021883a 	mov	r16,r2
    3380:	1887c83a 	sub	r3,r3,r2
    3384:	d8c02e15 	stw	r3,184(sp)
    3388:	d8802e17 	ldw	r2,184(sp)
    338c:	d9002917 	ldw	r4,164(sp)
    3390:	1100010e 	bge	r2,r4,3398 <___vfprintf_internal_r+0x72c>
    3394:	2005883a 	mov	r2,r4
    3398:	d8802a15 	stw	r2,168(sp)
    339c:	d8003215 	stw	zero,200(sp)
    33a0:	e7003fcc 	andi	fp,fp,255
    33a4:	e700201c 	xori	fp,fp,128
    33a8:	e73fe004 	addi	fp,fp,-128
    33ac:	e0000326 	beq	fp,zero,33bc <___vfprintf_internal_r+0x750>
    33b0:	d8c02a17 	ldw	r3,168(sp)
    33b4:	18c00044 	addi	r3,r3,1
    33b8:	d8c02a15 	stw	r3,168(sp)
    33bc:	90c0008c 	andi	r3,r18,2
    33c0:	d8c02b15 	stw	r3,172(sp)
    33c4:	18000326 	beq	r3,zero,33d4 <___vfprintf_internal_r+0x768>
    33c8:	d8c02a17 	ldw	r3,168(sp)
    33cc:	18c00084 	addi	r3,r3,2
    33d0:	d8c02a15 	stw	r3,168(sp)
    33d4:	90c0210c 	andi	r3,r18,132
    33d8:	d8c03015 	stw	r3,192(sp)
    33dc:	1801a31e 	bne	r3,zero,3a6c <___vfprintf_internal_r+0xe00>
    33e0:	d9003117 	ldw	r4,196(sp)
    33e4:	d8c02a17 	ldw	r3,168(sp)
    33e8:	20e7c83a 	sub	r19,r4,r3
    33ec:	04c19f0e 	bge	zero,r19,3a6c <___vfprintf_internal_r+0xe00>
    33f0:	02400404 	movi	r9,16
    33f4:	d8c02017 	ldw	r3,128(sp)
    33f8:	d8801f17 	ldw	r2,124(sp)
    33fc:	4cc50d0e 	bge	r9,r19,4834 <___vfprintf_internal_r+0x1bc8>
    3400:	01400074 	movhi	r5,1
    3404:	29462c84 	addi	r5,r5,6322
    3408:	dc403b15 	stw	r17,236(sp)
    340c:	d9403515 	stw	r5,212(sp)
    3410:	9823883a 	mov	r17,r19
    3414:	482d883a 	mov	r22,r9
    3418:	9027883a 	mov	r19,r18
    341c:	070001c4 	movi	fp,7
    3420:	8025883a 	mov	r18,r16
    3424:	dc002c17 	ldw	r16,176(sp)
    3428:	00000306 	br	3438 <___vfprintf_internal_r+0x7cc>
    342c:	8c7ffc04 	addi	r17,r17,-16
    3430:	42000204 	addi	r8,r8,8
    3434:	b440130e 	bge	r22,r17,3484 <___vfprintf_internal_r+0x818>
    3438:	01000074 	movhi	r4,1
    343c:	18c00404 	addi	r3,r3,16
    3440:	10800044 	addi	r2,r2,1
    3444:	21062c84 	addi	r4,r4,6322
    3448:	41000015 	stw	r4,0(r8)
    344c:	45800115 	stw	r22,4(r8)
    3450:	d8c02015 	stw	r3,128(sp)
    3454:	d8801f15 	stw	r2,124(sp)
    3458:	e0bff40e 	bge	fp,r2,342c <___vfprintf_internal_r+0x7c0>
    345c:	d9801e04 	addi	r6,sp,120
    3460:	b80b883a 	mov	r5,r23
    3464:	8009883a 	mov	r4,r16
    3468:	0009a080 	call	9a08 <__sprint_r>
    346c:	103f011e 	bne	r2,zero,3074 <___vfprintf_internal_r+0x408>
    3470:	8c7ffc04 	addi	r17,r17,-16
    3474:	d8c02017 	ldw	r3,128(sp)
    3478:	d8801f17 	ldw	r2,124(sp)
    347c:	da000404 	addi	r8,sp,16
    3480:	b47fed16 	blt	r22,r17,3438 <___vfprintf_internal_r+0x7cc>
    3484:	9021883a 	mov	r16,r18
    3488:	9825883a 	mov	r18,r19
    348c:	8827883a 	mov	r19,r17
    3490:	dc403b17 	ldw	r17,236(sp)
    3494:	d9403517 	ldw	r5,212(sp)
    3498:	98c7883a 	add	r3,r19,r3
    349c:	10800044 	addi	r2,r2,1
    34a0:	41400015 	stw	r5,0(r8)
    34a4:	44c00115 	stw	r19,4(r8)
    34a8:	d8c02015 	stw	r3,128(sp)
    34ac:	d8801f15 	stw	r2,124(sp)
    34b0:	010001c4 	movi	r4,7
    34b4:	2082a316 	blt	r4,r2,3f44 <___vfprintf_internal_r+0x12d8>
    34b8:	df002787 	ldb	fp,158(sp)
    34bc:	42000204 	addi	r8,r8,8
    34c0:	e0000c26 	beq	fp,zero,34f4 <___vfprintf_internal_r+0x888>
    34c4:	d8801f17 	ldw	r2,124(sp)
    34c8:	d9002784 	addi	r4,sp,158
    34cc:	18c00044 	addi	r3,r3,1
    34d0:	10800044 	addi	r2,r2,1
    34d4:	41000015 	stw	r4,0(r8)
    34d8:	01000044 	movi	r4,1
    34dc:	41000115 	stw	r4,4(r8)
    34e0:	d8c02015 	stw	r3,128(sp)
    34e4:	d8801f15 	stw	r2,124(sp)
    34e8:	010001c4 	movi	r4,7
    34ec:	20823c16 	blt	r4,r2,3de0 <___vfprintf_internal_r+0x1174>
    34f0:	42000204 	addi	r8,r8,8
    34f4:	d8802b17 	ldw	r2,172(sp)
    34f8:	10000c26 	beq	r2,zero,352c <___vfprintf_internal_r+0x8c0>
    34fc:	d8801f17 	ldw	r2,124(sp)
    3500:	d9002704 	addi	r4,sp,156
    3504:	18c00084 	addi	r3,r3,2
    3508:	10800044 	addi	r2,r2,1
    350c:	41000015 	stw	r4,0(r8)
    3510:	01000084 	movi	r4,2
    3514:	41000115 	stw	r4,4(r8)
    3518:	d8c02015 	stw	r3,128(sp)
    351c:	d8801f15 	stw	r2,124(sp)
    3520:	010001c4 	movi	r4,7
    3524:	20823616 	blt	r4,r2,3e00 <___vfprintf_internal_r+0x1194>
    3528:	42000204 	addi	r8,r8,8
    352c:	d9003017 	ldw	r4,192(sp)
    3530:	00802004 	movi	r2,128
    3534:	20819926 	beq	r4,r2,3b9c <___vfprintf_internal_r+0xf30>
    3538:	d9402917 	ldw	r5,164(sp)
    353c:	d8802e17 	ldw	r2,184(sp)
    3540:	28adc83a 	sub	r22,r5,r2
    3544:	0580310e 	bge	zero,r22,360c <___vfprintf_internal_r+0x9a0>
    3548:	07000404 	movi	fp,16
    354c:	d8801f17 	ldw	r2,124(sp)
    3550:	e584140e 	bge	fp,r22,45a4 <___vfprintf_internal_r+0x1938>
    3554:	01400074 	movhi	r5,1
    3558:	29462884 	addi	r5,r5,6306
    355c:	dc402915 	stw	r17,164(sp)
    3560:	d9402b15 	stw	r5,172(sp)
    3564:	b023883a 	mov	r17,r22
    3568:	04c001c4 	movi	r19,7
    356c:	a82d883a 	mov	r22,r21
    3570:	902b883a 	mov	r21,r18
    3574:	8025883a 	mov	r18,r16
    3578:	dc002c17 	ldw	r16,176(sp)
    357c:	00000306 	br	358c <___vfprintf_internal_r+0x920>
    3580:	8c7ffc04 	addi	r17,r17,-16
    3584:	42000204 	addi	r8,r8,8
    3588:	e440110e 	bge	fp,r17,35d0 <___vfprintf_internal_r+0x964>
    358c:	18c00404 	addi	r3,r3,16
    3590:	10800044 	addi	r2,r2,1
    3594:	45000015 	stw	r20,0(r8)
    3598:	47000115 	stw	fp,4(r8)
    359c:	d8c02015 	stw	r3,128(sp)
    35a0:	d8801f15 	stw	r2,124(sp)
    35a4:	98bff60e 	bge	r19,r2,3580 <___vfprintf_internal_r+0x914>
    35a8:	d9801e04 	addi	r6,sp,120
    35ac:	b80b883a 	mov	r5,r23
    35b0:	8009883a 	mov	r4,r16
    35b4:	0009a080 	call	9a08 <__sprint_r>
    35b8:	103eae1e 	bne	r2,zero,3074 <___vfprintf_internal_r+0x408>
    35bc:	8c7ffc04 	addi	r17,r17,-16
    35c0:	d8c02017 	ldw	r3,128(sp)
    35c4:	d8801f17 	ldw	r2,124(sp)
    35c8:	da000404 	addi	r8,sp,16
    35cc:	e47fef16 	blt	fp,r17,358c <___vfprintf_internal_r+0x920>
    35d0:	9021883a 	mov	r16,r18
    35d4:	a825883a 	mov	r18,r21
    35d8:	b02b883a 	mov	r21,r22
    35dc:	882d883a 	mov	r22,r17
    35e0:	dc402917 	ldw	r17,164(sp)
    35e4:	d9002b17 	ldw	r4,172(sp)
    35e8:	1d87883a 	add	r3,r3,r22
    35ec:	10800044 	addi	r2,r2,1
    35f0:	41000015 	stw	r4,0(r8)
    35f4:	45800115 	stw	r22,4(r8)
    35f8:	d8c02015 	stw	r3,128(sp)
    35fc:	d8801f15 	stw	r2,124(sp)
    3600:	010001c4 	movi	r4,7
    3604:	2081ee16 	blt	r4,r2,3dc0 <___vfprintf_internal_r+0x1154>
    3608:	42000204 	addi	r8,r8,8
    360c:	9080400c 	andi	r2,r18,256
    3610:	1001181e 	bne	r2,zero,3a74 <___vfprintf_internal_r+0xe08>
    3614:	d9402e17 	ldw	r5,184(sp)
    3618:	d8801f17 	ldw	r2,124(sp)
    361c:	44000015 	stw	r16,0(r8)
    3620:	1947883a 	add	r3,r3,r5
    3624:	10800044 	addi	r2,r2,1
    3628:	41400115 	stw	r5,4(r8)
    362c:	d8c02015 	stw	r3,128(sp)
    3630:	d8801f15 	stw	r2,124(sp)
    3634:	010001c4 	movi	r4,7
    3638:	2081d316 	blt	r4,r2,3d88 <___vfprintf_internal_r+0x111c>
    363c:	42000204 	addi	r8,r8,8
    3640:	9480010c 	andi	r18,r18,4
    3644:	90003226 	beq	r18,zero,3710 <___vfprintf_internal_r+0xaa4>
    3648:	d9403117 	ldw	r5,196(sp)
    364c:	d8802a17 	ldw	r2,168(sp)
    3650:	28a1c83a 	sub	r16,r5,r2
    3654:	04002e0e 	bge	zero,r16,3710 <___vfprintf_internal_r+0xaa4>
    3658:	04400404 	movi	r17,16
    365c:	d8801f17 	ldw	r2,124(sp)
    3660:	8c04a20e 	bge	r17,r16,48ec <___vfprintf_internal_r+0x1c80>
    3664:	01400074 	movhi	r5,1
    3668:	29462c84 	addi	r5,r5,6322
    366c:	d9403515 	stw	r5,212(sp)
    3670:	048001c4 	movi	r18,7
    3674:	dcc02c17 	ldw	r19,176(sp)
    3678:	00000306 	br	3688 <___vfprintf_internal_r+0xa1c>
    367c:	843ffc04 	addi	r16,r16,-16
    3680:	42000204 	addi	r8,r8,8
    3684:	8c00130e 	bge	r17,r16,36d4 <___vfprintf_internal_r+0xa68>
    3688:	01000074 	movhi	r4,1
    368c:	18c00404 	addi	r3,r3,16
    3690:	10800044 	addi	r2,r2,1
    3694:	21062c84 	addi	r4,r4,6322
    3698:	41000015 	stw	r4,0(r8)
    369c:	44400115 	stw	r17,4(r8)
    36a0:	d8c02015 	stw	r3,128(sp)
    36a4:	d8801f15 	stw	r2,124(sp)
    36a8:	90bff40e 	bge	r18,r2,367c <___vfprintf_internal_r+0xa10>
    36ac:	d9801e04 	addi	r6,sp,120
    36b0:	b80b883a 	mov	r5,r23
    36b4:	9809883a 	mov	r4,r19
    36b8:	0009a080 	call	9a08 <__sprint_r>
    36bc:	103e6d1e 	bne	r2,zero,3074 <___vfprintf_internal_r+0x408>
    36c0:	843ffc04 	addi	r16,r16,-16
    36c4:	d8c02017 	ldw	r3,128(sp)
    36c8:	d8801f17 	ldw	r2,124(sp)
    36cc:	da000404 	addi	r8,sp,16
    36d0:	8c3fed16 	blt	r17,r16,3688 <___vfprintf_internal_r+0xa1c>
    36d4:	d9403517 	ldw	r5,212(sp)
    36d8:	1c07883a 	add	r3,r3,r16
    36dc:	10800044 	addi	r2,r2,1
    36e0:	41400015 	stw	r5,0(r8)
    36e4:	44000115 	stw	r16,4(r8)
    36e8:	d8c02015 	stw	r3,128(sp)
    36ec:	d8801f15 	stw	r2,124(sp)
    36f0:	010001c4 	movi	r4,7
    36f4:	2080060e 	bge	r4,r2,3710 <___vfprintf_internal_r+0xaa4>
    36f8:	d9002c17 	ldw	r4,176(sp)
    36fc:	d9801e04 	addi	r6,sp,120
    3700:	b80b883a 	mov	r5,r23
    3704:	0009a080 	call	9a08 <__sprint_r>
    3708:	103e5a1e 	bne	r2,zero,3074 <___vfprintf_internal_r+0x408>
    370c:	d8c02017 	ldw	r3,128(sp)
    3710:	d8803117 	ldw	r2,196(sp)
    3714:	d9002a17 	ldw	r4,168(sp)
    3718:	1100010e 	bge	r2,r4,3720 <___vfprintf_internal_r+0xab4>
    371c:	2005883a 	mov	r2,r4
    3720:	d9402f17 	ldw	r5,188(sp)
    3724:	288b883a 	add	r5,r5,r2
    3728:	d9402f15 	stw	r5,188(sp)
    372c:	18019e1e 	bne	r3,zero,3da8 <___vfprintf_internal_r+0x113c>
    3730:	a8800007 	ldb	r2,0(r21)
    3734:	d8001f15 	stw	zero,124(sp)
    3738:	da000404 	addi	r8,sp,16
    373c:	103d851e 	bne	r2,zero,2d54 <___vfprintf_internal_r+0xe8>
    3740:	a821883a 	mov	r16,r21
    3744:	003d9b06 	br	2db4 <___vfprintf_internal_r+0x148>
    3748:	18c03fcc 	andi	r3,r3,255
    374c:	1805c11e 	bne	r3,zero,4e54 <___vfprintf_internal_r+0x21e8>
    3750:	94800414 	ori	r18,r18,16
    3754:	9080080c 	andi	r2,r18,32
    3758:	10020c26 	beq	r2,zero,3f8c <___vfprintf_internal_r+0x1320>
    375c:	d8802d17 	ldw	r2,180(sp)
    3760:	d9002917 	ldw	r4,164(sp)
    3764:	d8002785 	stb	zero,158(sp)
    3768:	10c00204 	addi	r3,r2,8
    376c:	14c00017 	ldw	r19,0(r2)
    3770:	15800117 	ldw	r22,4(r2)
    3774:	20040f16 	blt	r4,zero,47b4 <___vfprintf_internal_r+0x1b48>
    3778:	013fdfc4 	movi	r4,-129
    377c:	9d84b03a 	or	r2,r19,r22
    3780:	d8c02d15 	stw	r3,180(sp)
    3784:	9124703a 	and	r18,r18,r4
    3788:	0039883a 	mov	fp,zero
    378c:	103e891e 	bne	r2,zero,31b4 <___vfprintf_internal_r+0x548>
    3790:	d9002917 	ldw	r4,164(sp)
    3794:	2002c11e 	bne	r4,zero,429c <___vfprintf_internal_r+0x1630>
    3798:	d8002915 	stw	zero,164(sp)
    379c:	d8002e15 	stw	zero,184(sp)
    37a0:	dc001e04 	addi	r16,sp,120
    37a4:	003ef806 	br	3388 <___vfprintf_internal_r+0x71c>
    37a8:	18c03fcc 	andi	r3,r3,255
    37ac:	18059d1e 	bne	r3,zero,4e24 <___vfprintf_internal_r+0x21b8>
    37b0:	01400074 	movhi	r5,1
    37b4:	29461c04 	addi	r5,r5,6256
    37b8:	d9403915 	stw	r5,228(sp)
    37bc:	9080080c 	andi	r2,r18,32
    37c0:	10005226 	beq	r2,zero,390c <___vfprintf_internal_r+0xca0>
    37c4:	d8802d17 	ldw	r2,180(sp)
    37c8:	14c00017 	ldw	r19,0(r2)
    37cc:	15800117 	ldw	r22,4(r2)
    37d0:	10800204 	addi	r2,r2,8
    37d4:	d8802d15 	stw	r2,180(sp)
    37d8:	9080004c 	andi	r2,r18,1
    37dc:	10019026 	beq	r2,zero,3e20 <___vfprintf_internal_r+0x11b4>
    37e0:	9d84b03a 	or	r2,r19,r22
    37e4:	10036926 	beq	r2,zero,458c <___vfprintf_internal_r+0x1920>
    37e8:	d8c02917 	ldw	r3,164(sp)
    37ec:	00800c04 	movi	r2,48
    37f0:	d8802705 	stb	r2,156(sp)
    37f4:	dc402745 	stb	r17,157(sp)
    37f8:	d8002785 	stb	zero,158(sp)
    37fc:	90800094 	ori	r2,r18,2
    3800:	18045d16 	blt	r3,zero,4978 <___vfprintf_internal_r+0x1d0c>
    3804:	00bfdfc4 	movi	r2,-129
    3808:	90a4703a 	and	r18,r18,r2
    380c:	94800094 	ori	r18,r18,2
    3810:	0039883a 	mov	fp,zero
    3814:	d9003917 	ldw	r4,228(sp)
    3818:	dc001e04 	addi	r16,sp,120
    381c:	988003cc 	andi	r2,r19,15
    3820:	b006973a 	slli	r3,r22,28
    3824:	2085883a 	add	r2,r4,r2
    3828:	9826d13a 	srli	r19,r19,4
    382c:	10800003 	ldbu	r2,0(r2)
    3830:	b02cd13a 	srli	r22,r22,4
    3834:	843fffc4 	addi	r16,r16,-1
    3838:	1ce6b03a 	or	r19,r3,r19
    383c:	80800005 	stb	r2,0(r16)
    3840:	9d84b03a 	or	r2,r19,r22
    3844:	103ff51e 	bne	r2,zero,381c <___vfprintf_internal_r+0xbb0>
    3848:	d8c02817 	ldw	r3,160(sp)
    384c:	1c07c83a 	sub	r3,r3,r16
    3850:	d8c02e15 	stw	r3,184(sp)
    3854:	003ecc06 	br	3388 <___vfprintf_internal_r+0x71c>
    3858:	18c03fcc 	andi	r3,r3,255
    385c:	183e9f26 	beq	r3,zero,32dc <___vfprintf_internal_r+0x670>
    3860:	d9c02785 	stb	r7,158(sp)
    3864:	003e9d06 	br	32dc <___vfprintf_internal_r+0x670>
    3868:	00c00044 	movi	r3,1
    386c:	01c00ac4 	movi	r7,43
    3870:	ac400007 	ldb	r17,0(r21)
    3874:	003d5e06 	br	2df0 <___vfprintf_internal_r+0x184>
    3878:	94800814 	ori	r18,r18,32
    387c:	ac400007 	ldb	r17,0(r21)
    3880:	003d5b06 	br	2df0 <___vfprintf_internal_r+0x184>
    3884:	d8c02d17 	ldw	r3,180(sp)
    3888:	d8002785 	stb	zero,158(sp)
    388c:	1c000017 	ldw	r16,0(r3)
    3890:	1cc00104 	addi	r19,r3,4
    3894:	80041926 	beq	r16,zero,48fc <___vfprintf_internal_r+0x1c90>
    3898:	d9002917 	ldw	r4,164(sp)
    389c:	2003d016 	blt	r4,zero,47e0 <___vfprintf_internal_r+0x1b74>
    38a0:	200d883a 	mov	r6,r4
    38a4:	000b883a 	mov	r5,zero
    38a8:	8009883a 	mov	r4,r16
    38ac:	da003d15 	stw	r8,244(sp)
    38b0:	0007c700 	call	7c70 <memchr>
    38b4:	da003d17 	ldw	r8,244(sp)
    38b8:	10045426 	beq	r2,zero,4a0c <___vfprintf_internal_r+0x1da0>
    38bc:	1405c83a 	sub	r2,r2,r16
    38c0:	d8802e15 	stw	r2,184(sp)
    38c4:	1003cc16 	blt	r2,zero,47f8 <___vfprintf_internal_r+0x1b8c>
    38c8:	df002783 	ldbu	fp,158(sp)
    38cc:	d8802a15 	stw	r2,168(sp)
    38d0:	dcc02d15 	stw	r19,180(sp)
    38d4:	d8002915 	stw	zero,164(sp)
    38d8:	d8003215 	stw	zero,200(sp)
    38dc:	003eb006 	br	33a0 <___vfprintf_internal_r+0x734>
    38e0:	18c03fcc 	andi	r3,r3,255
    38e4:	183f9b26 	beq	r3,zero,3754 <___vfprintf_internal_r+0xae8>
    38e8:	d9c02785 	stb	r7,158(sp)
    38ec:	003f9906 	br	3754 <___vfprintf_internal_r+0xae8>
    38f0:	18c03fcc 	andi	r3,r3,255
    38f4:	1805551e 	bne	r3,zero,4e4c <___vfprintf_internal_r+0x21e0>
    38f8:	01400074 	movhi	r5,1
    38fc:	29462104 	addi	r5,r5,6276
    3900:	d9403915 	stw	r5,228(sp)
    3904:	9080080c 	andi	r2,r18,32
    3908:	103fae1e 	bne	r2,zero,37c4 <___vfprintf_internal_r+0xb58>
    390c:	9080040c 	andi	r2,r18,16
    3910:	1002de26 	beq	r2,zero,448c <___vfprintf_internal_r+0x1820>
    3914:	d8c02d17 	ldw	r3,180(sp)
    3918:	002d883a 	mov	r22,zero
    391c:	1cc00017 	ldw	r19,0(r3)
    3920:	18c00104 	addi	r3,r3,4
    3924:	d8c02d15 	stw	r3,180(sp)
    3928:	003fab06 	br	37d8 <___vfprintf_internal_r+0xb6c>
    392c:	38803fcc 	andi	r2,r7,255
    3930:	1080201c 	xori	r2,r2,128
    3934:	10bfe004 	addi	r2,r2,-128
    3938:	1002d21e 	bne	r2,zero,4484 <___vfprintf_internal_r+0x1818>
    393c:	00c00044 	movi	r3,1
    3940:	01c00804 	movi	r7,32
    3944:	ac400007 	ldb	r17,0(r21)
    3948:	003d2906 	br	2df0 <___vfprintf_internal_r+0x184>
    394c:	94800054 	ori	r18,r18,1
    3950:	ac400007 	ldb	r17,0(r21)
    3954:	003d2606 	br	2df0 <___vfprintf_internal_r+0x184>
    3958:	18c03fcc 	andi	r3,r3,255
    395c:	183e0526 	beq	r3,zero,3174 <___vfprintf_internal_r+0x508>
    3960:	d9c02785 	stb	r7,158(sp)
    3964:	003e0306 	br	3174 <___vfprintf_internal_r+0x508>
    3968:	94801014 	ori	r18,r18,64
    396c:	ac400007 	ldb	r17,0(r21)
    3970:	003d1f06 	br	2df0 <___vfprintf_internal_r+0x184>
    3974:	ac400007 	ldb	r17,0(r21)
    3978:	8a438726 	beq	r17,r9,4798 <___vfprintf_internal_r+0x1b2c>
    397c:	94800414 	ori	r18,r18,16
    3980:	003d1b06 	br	2df0 <___vfprintf_internal_r+0x184>
    3984:	18c03fcc 	andi	r3,r3,255
    3988:	1805341e 	bne	r3,zero,4e5c <___vfprintf_internal_r+0x21f0>
    398c:	9080080c 	andi	r2,r18,32
    3990:	1002cd26 	beq	r2,zero,44c8 <___vfprintf_internal_r+0x185c>
    3994:	d9402d17 	ldw	r5,180(sp)
    3998:	d9002f17 	ldw	r4,188(sp)
    399c:	28800017 	ldw	r2,0(r5)
    39a0:	2007d7fa 	srai	r3,r4,31
    39a4:	29400104 	addi	r5,r5,4
    39a8:	d9402d15 	stw	r5,180(sp)
    39ac:	11000015 	stw	r4,0(r2)
    39b0:	10c00115 	stw	r3,4(r2)
    39b4:	003ce506 	br	2d4c <___vfprintf_internal_r+0xe0>
    39b8:	d8c02d17 	ldw	r3,180(sp)
    39bc:	d9002d17 	ldw	r4,180(sp)
    39c0:	d8002785 	stb	zero,158(sp)
    39c4:	18800017 	ldw	r2,0(r3)
    39c8:	21000104 	addi	r4,r4,4
    39cc:	00c00044 	movi	r3,1
    39d0:	d8c02a15 	stw	r3,168(sp)
    39d4:	d8801405 	stb	r2,80(sp)
    39d8:	d9002d15 	stw	r4,180(sp)
    39dc:	d8c02e15 	stw	r3,184(sp)
    39e0:	d8002915 	stw	zero,164(sp)
    39e4:	d8003215 	stw	zero,200(sp)
    39e8:	dc001404 	addi	r16,sp,80
    39ec:	0039883a 	mov	fp,zero
    39f0:	003e7206 	br	33bc <___vfprintf_internal_r+0x750>
    39f4:	01000074 	movhi	r4,1
    39f8:	21062104 	addi	r4,r4,6276
    39fc:	0039883a 	mov	fp,zero
    3a00:	d9003915 	stw	r4,228(sp)
    3a04:	04401e04 	movi	r17,120
    3a08:	003f8206 	br	3814 <___vfprintf_internal_r+0xba8>
    3a0c:	18c03fcc 	andi	r3,r3,255
    3a10:	1805061e 	bne	r3,zero,4e2c <___vfprintf_internal_r+0x21c0>
    3a14:	883d9126 	beq	r17,zero,305c <___vfprintf_internal_r+0x3f0>
    3a18:	00c00044 	movi	r3,1
    3a1c:	d8c02a15 	stw	r3,168(sp)
    3a20:	dc401405 	stb	r17,80(sp)
    3a24:	d8002785 	stb	zero,158(sp)
    3a28:	003fec06 	br	39dc <___vfprintf_internal_r+0xd70>
    3a2c:	01400074 	movhi	r5,1
    3a30:	29462104 	addi	r5,r5,6276
    3a34:	d9403915 	stw	r5,228(sp)
    3a38:	d8c02d15 	stw	r3,180(sp)
    3a3c:	1025883a 	mov	r18,r2
    3a40:	04401e04 	movi	r17,120
    3a44:	9d84b03a 	or	r2,r19,r22
    3a48:	1000fc1e 	bne	r2,zero,3e3c <___vfprintf_internal_r+0x11d0>
    3a4c:	0039883a 	mov	fp,zero
    3a50:	00800084 	movi	r2,2
    3a54:	10803fcc 	andi	r2,r2,255
    3a58:	00c00044 	movi	r3,1
    3a5c:	10c20f26 	beq	r2,r3,429c <___vfprintf_internal_r+0x1630>
    3a60:	00c00084 	movi	r3,2
    3a64:	10fd6326 	beq	r2,r3,2ff4 <___vfprintf_internal_r+0x388>
    3a68:	003e2d06 	br	3320 <___vfprintf_internal_r+0x6b4>
    3a6c:	d8c02017 	ldw	r3,128(sp)
    3a70:	003e9306 	br	34c0 <___vfprintf_internal_r+0x854>
    3a74:	00801944 	movi	r2,101
    3a78:	14407e0e 	bge	r2,r17,3c74 <___vfprintf_internal_r+0x1008>
    3a7c:	d9003617 	ldw	r4,216(sp)
    3a80:	d9403817 	ldw	r5,224(sp)
    3a84:	000d883a 	mov	r6,zero
    3a88:	000f883a 	mov	r7,zero
    3a8c:	d8c03c15 	stw	r3,240(sp)
    3a90:	da003d15 	stw	r8,244(sp)
    3a94:	000d4cc0 	call	d4cc <__eqdf2>
    3a98:	d8c03c17 	ldw	r3,240(sp)
    3a9c:	da003d17 	ldw	r8,244(sp)
    3aa0:	1000f71e 	bne	r2,zero,3e80 <___vfprintf_internal_r+0x1214>
    3aa4:	d8801f17 	ldw	r2,124(sp)
    3aa8:	01000074 	movhi	r4,1
    3aac:	21062804 	addi	r4,r4,6304
    3ab0:	18c00044 	addi	r3,r3,1
    3ab4:	10800044 	addi	r2,r2,1
    3ab8:	41000015 	stw	r4,0(r8)
    3abc:	01000044 	movi	r4,1
    3ac0:	41000115 	stw	r4,4(r8)
    3ac4:	d8c02015 	stw	r3,128(sp)
    3ac8:	d8801f15 	stw	r2,124(sp)
    3acc:	010001c4 	movi	r4,7
    3ad0:	2082b816 	blt	r4,r2,45b4 <___vfprintf_internal_r+0x1948>
    3ad4:	42000204 	addi	r8,r8,8
    3ad8:	d8802617 	ldw	r2,152(sp)
    3adc:	d9403317 	ldw	r5,204(sp)
    3ae0:	11400216 	blt	r2,r5,3aec <___vfprintf_internal_r+0xe80>
    3ae4:	9080004c 	andi	r2,r18,1
    3ae8:	103ed526 	beq	r2,zero,3640 <___vfprintf_internal_r+0x9d4>
    3aec:	d8803717 	ldw	r2,220(sp)
    3af0:	d9003417 	ldw	r4,208(sp)
    3af4:	d9403717 	ldw	r5,220(sp)
    3af8:	1887883a 	add	r3,r3,r2
    3afc:	d8801f17 	ldw	r2,124(sp)
    3b00:	41000015 	stw	r4,0(r8)
    3b04:	41400115 	stw	r5,4(r8)
    3b08:	10800044 	addi	r2,r2,1
    3b0c:	d8c02015 	stw	r3,128(sp)
    3b10:	d8801f15 	stw	r2,124(sp)
    3b14:	010001c4 	movi	r4,7
    3b18:	20832916 	blt	r4,r2,47c0 <___vfprintf_internal_r+0x1b54>
    3b1c:	42000204 	addi	r8,r8,8
    3b20:	d8803317 	ldw	r2,204(sp)
    3b24:	143fffc4 	addi	r16,r2,-1
    3b28:	043ec50e 	bge	zero,r16,3640 <___vfprintf_internal_r+0x9d4>
    3b2c:	04400404 	movi	r17,16
    3b30:	d8801f17 	ldw	r2,124(sp)
    3b34:	8c00880e 	bge	r17,r16,3d58 <___vfprintf_internal_r+0x10ec>
    3b38:	01400074 	movhi	r5,1
    3b3c:	29462884 	addi	r5,r5,6306
    3b40:	d9402b15 	stw	r5,172(sp)
    3b44:	058001c4 	movi	r22,7
    3b48:	dcc02c17 	ldw	r19,176(sp)
    3b4c:	00000306 	br	3b5c <___vfprintf_internal_r+0xef0>
    3b50:	42000204 	addi	r8,r8,8
    3b54:	843ffc04 	addi	r16,r16,-16
    3b58:	8c00820e 	bge	r17,r16,3d64 <___vfprintf_internal_r+0x10f8>
    3b5c:	18c00404 	addi	r3,r3,16
    3b60:	10800044 	addi	r2,r2,1
    3b64:	45000015 	stw	r20,0(r8)
    3b68:	44400115 	stw	r17,4(r8)
    3b6c:	d8c02015 	stw	r3,128(sp)
    3b70:	d8801f15 	stw	r2,124(sp)
    3b74:	b0bff60e 	bge	r22,r2,3b50 <___vfprintf_internal_r+0xee4>
    3b78:	d9801e04 	addi	r6,sp,120
    3b7c:	b80b883a 	mov	r5,r23
    3b80:	9809883a 	mov	r4,r19
    3b84:	0009a080 	call	9a08 <__sprint_r>
    3b88:	103d3a1e 	bne	r2,zero,3074 <___vfprintf_internal_r+0x408>
    3b8c:	d8c02017 	ldw	r3,128(sp)
    3b90:	d8801f17 	ldw	r2,124(sp)
    3b94:	da000404 	addi	r8,sp,16
    3b98:	003fee06 	br	3b54 <___vfprintf_internal_r+0xee8>
    3b9c:	d9403117 	ldw	r5,196(sp)
    3ba0:	d8802a17 	ldw	r2,168(sp)
    3ba4:	28adc83a 	sub	r22,r5,r2
    3ba8:	05be630e 	bge	zero,r22,3538 <___vfprintf_internal_r+0x8cc>
    3bac:	07000404 	movi	fp,16
    3bb0:	d8801f17 	ldw	r2,124(sp)
    3bb4:	e5838f0e 	bge	fp,r22,49f4 <___vfprintf_internal_r+0x1d88>
    3bb8:	01400074 	movhi	r5,1
    3bbc:	29462884 	addi	r5,r5,6306
    3bc0:	dc403015 	stw	r17,192(sp)
    3bc4:	d9402b15 	stw	r5,172(sp)
    3bc8:	b023883a 	mov	r17,r22
    3bcc:	04c001c4 	movi	r19,7
    3bd0:	a82d883a 	mov	r22,r21
    3bd4:	902b883a 	mov	r21,r18
    3bd8:	8025883a 	mov	r18,r16
    3bdc:	dc002c17 	ldw	r16,176(sp)
    3be0:	00000306 	br	3bf0 <___vfprintf_internal_r+0xf84>
    3be4:	8c7ffc04 	addi	r17,r17,-16
    3be8:	42000204 	addi	r8,r8,8
    3bec:	e440110e 	bge	fp,r17,3c34 <___vfprintf_internal_r+0xfc8>
    3bf0:	18c00404 	addi	r3,r3,16
    3bf4:	10800044 	addi	r2,r2,1
    3bf8:	45000015 	stw	r20,0(r8)
    3bfc:	47000115 	stw	fp,4(r8)
    3c00:	d8c02015 	stw	r3,128(sp)
    3c04:	d8801f15 	stw	r2,124(sp)
    3c08:	98bff60e 	bge	r19,r2,3be4 <___vfprintf_internal_r+0xf78>
    3c0c:	d9801e04 	addi	r6,sp,120
    3c10:	b80b883a 	mov	r5,r23
    3c14:	8009883a 	mov	r4,r16
    3c18:	0009a080 	call	9a08 <__sprint_r>
    3c1c:	103d151e 	bne	r2,zero,3074 <___vfprintf_internal_r+0x408>
    3c20:	8c7ffc04 	addi	r17,r17,-16
    3c24:	d8c02017 	ldw	r3,128(sp)
    3c28:	d8801f17 	ldw	r2,124(sp)
    3c2c:	da000404 	addi	r8,sp,16
    3c30:	e47fef16 	blt	fp,r17,3bf0 <___vfprintf_internal_r+0xf84>
    3c34:	9021883a 	mov	r16,r18
    3c38:	a825883a 	mov	r18,r21
    3c3c:	b02b883a 	mov	r21,r22
    3c40:	882d883a 	mov	r22,r17
    3c44:	dc403017 	ldw	r17,192(sp)
    3c48:	d9002b17 	ldw	r4,172(sp)
    3c4c:	1d87883a 	add	r3,r3,r22
    3c50:	10800044 	addi	r2,r2,1
    3c54:	41000015 	stw	r4,0(r8)
    3c58:	45800115 	stw	r22,4(r8)
    3c5c:	d8c02015 	stw	r3,128(sp)
    3c60:	d8801f15 	stw	r2,124(sp)
    3c64:	010001c4 	movi	r4,7
    3c68:	20818e16 	blt	r4,r2,42a4 <___vfprintf_internal_r+0x1638>
    3c6c:	42000204 	addi	r8,r8,8
    3c70:	003e3106 	br	3538 <___vfprintf_internal_r+0x8cc>
    3c74:	d9403317 	ldw	r5,204(sp)
    3c78:	00800044 	movi	r2,1
    3c7c:	18c00044 	addi	r3,r3,1
    3c80:	1141530e 	bge	r2,r5,41d0 <___vfprintf_internal_r+0x1564>
    3c84:	dc401f17 	ldw	r17,124(sp)
    3c88:	00800044 	movi	r2,1
    3c8c:	40800115 	stw	r2,4(r8)
    3c90:	8c400044 	addi	r17,r17,1
    3c94:	44000015 	stw	r16,0(r8)
    3c98:	d8c02015 	stw	r3,128(sp)
    3c9c:	dc401f15 	stw	r17,124(sp)
    3ca0:	008001c4 	movi	r2,7
    3ca4:	14416b16 	blt	r2,r17,4254 <___vfprintf_internal_r+0x15e8>
    3ca8:	42000204 	addi	r8,r8,8
    3cac:	d8803717 	ldw	r2,220(sp)
    3cb0:	d9003417 	ldw	r4,208(sp)
    3cb4:	8c400044 	addi	r17,r17,1
    3cb8:	10c7883a 	add	r3,r2,r3
    3cbc:	40800115 	stw	r2,4(r8)
    3cc0:	41000015 	stw	r4,0(r8)
    3cc4:	d8c02015 	stw	r3,128(sp)
    3cc8:	dc401f15 	stw	r17,124(sp)
    3ccc:	008001c4 	movi	r2,7
    3cd0:	14416916 	blt	r2,r17,4278 <___vfprintf_internal_r+0x160c>
    3cd4:	45800204 	addi	r22,r8,8
    3cd8:	d9003617 	ldw	r4,216(sp)
    3cdc:	d9403817 	ldw	r5,224(sp)
    3ce0:	000d883a 	mov	r6,zero
    3ce4:	000f883a 	mov	r7,zero
    3ce8:	d8c03c15 	stw	r3,240(sp)
    3cec:	000d4cc0 	call	d4cc <__eqdf2>
    3cf0:	d8c03c17 	ldw	r3,240(sp)
    3cf4:	1000bc26 	beq	r2,zero,3fe8 <___vfprintf_internal_r+0x137c>
    3cf8:	d9403317 	ldw	r5,204(sp)
    3cfc:	84000044 	addi	r16,r16,1
    3d00:	8c400044 	addi	r17,r17,1
    3d04:	28bfffc4 	addi	r2,r5,-1
    3d08:	1887883a 	add	r3,r3,r2
    3d0c:	b0800115 	stw	r2,4(r22)
    3d10:	b4000015 	stw	r16,0(r22)
    3d14:	d8c02015 	stw	r3,128(sp)
    3d18:	dc401f15 	stw	r17,124(sp)
    3d1c:	008001c4 	movi	r2,7
    3d20:	14414316 	blt	r2,r17,4230 <___vfprintf_internal_r+0x15c4>
    3d24:	b5800204 	addi	r22,r22,8
    3d28:	d9003a17 	ldw	r4,232(sp)
    3d2c:	df0022c4 	addi	fp,sp,139
    3d30:	8c400044 	addi	r17,r17,1
    3d34:	20c7883a 	add	r3,r4,r3
    3d38:	b7000015 	stw	fp,0(r22)
    3d3c:	b1000115 	stw	r4,4(r22)
    3d40:	d8c02015 	stw	r3,128(sp)
    3d44:	dc401f15 	stw	r17,124(sp)
    3d48:	008001c4 	movi	r2,7
    3d4c:	14400e16 	blt	r2,r17,3d88 <___vfprintf_internal_r+0x111c>
    3d50:	b2000204 	addi	r8,r22,8
    3d54:	003e3a06 	br	3640 <___vfprintf_internal_r+0x9d4>
    3d58:	01000074 	movhi	r4,1
    3d5c:	21062884 	addi	r4,r4,6306
    3d60:	d9002b15 	stw	r4,172(sp)
    3d64:	d9002b17 	ldw	r4,172(sp)
    3d68:	1c07883a 	add	r3,r3,r16
    3d6c:	44000115 	stw	r16,4(r8)
    3d70:	41000015 	stw	r4,0(r8)
    3d74:	10800044 	addi	r2,r2,1
    3d78:	d8c02015 	stw	r3,128(sp)
    3d7c:	d8801f15 	stw	r2,124(sp)
    3d80:	010001c4 	movi	r4,7
    3d84:	20be2d0e 	bge	r4,r2,363c <___vfprintf_internal_r+0x9d0>
    3d88:	d9002c17 	ldw	r4,176(sp)
    3d8c:	d9801e04 	addi	r6,sp,120
    3d90:	b80b883a 	mov	r5,r23
    3d94:	0009a080 	call	9a08 <__sprint_r>
    3d98:	103cb61e 	bne	r2,zero,3074 <___vfprintf_internal_r+0x408>
    3d9c:	d8c02017 	ldw	r3,128(sp)
    3da0:	da000404 	addi	r8,sp,16
    3da4:	003e2606 	br	3640 <___vfprintf_internal_r+0x9d4>
    3da8:	d9002c17 	ldw	r4,176(sp)
    3dac:	d9801e04 	addi	r6,sp,120
    3db0:	b80b883a 	mov	r5,r23
    3db4:	0009a080 	call	9a08 <__sprint_r>
    3db8:	103e5d26 	beq	r2,zero,3730 <___vfprintf_internal_r+0xac4>
    3dbc:	003cad06 	br	3074 <___vfprintf_internal_r+0x408>
    3dc0:	d9002c17 	ldw	r4,176(sp)
    3dc4:	d9801e04 	addi	r6,sp,120
    3dc8:	b80b883a 	mov	r5,r23
    3dcc:	0009a080 	call	9a08 <__sprint_r>
    3dd0:	103ca81e 	bne	r2,zero,3074 <___vfprintf_internal_r+0x408>
    3dd4:	d8c02017 	ldw	r3,128(sp)
    3dd8:	da000404 	addi	r8,sp,16
    3ddc:	003e0b06 	br	360c <___vfprintf_internal_r+0x9a0>
    3de0:	d9002c17 	ldw	r4,176(sp)
    3de4:	d9801e04 	addi	r6,sp,120
    3de8:	b80b883a 	mov	r5,r23
    3dec:	0009a080 	call	9a08 <__sprint_r>
    3df0:	103ca01e 	bne	r2,zero,3074 <___vfprintf_internal_r+0x408>
    3df4:	d8c02017 	ldw	r3,128(sp)
    3df8:	da000404 	addi	r8,sp,16
    3dfc:	003dbd06 	br	34f4 <___vfprintf_internal_r+0x888>
    3e00:	d9002c17 	ldw	r4,176(sp)
    3e04:	d9801e04 	addi	r6,sp,120
    3e08:	b80b883a 	mov	r5,r23
    3e0c:	0009a080 	call	9a08 <__sprint_r>
    3e10:	103c981e 	bne	r2,zero,3074 <___vfprintf_internal_r+0x408>
    3e14:	d8c02017 	ldw	r3,128(sp)
    3e18:	da000404 	addi	r8,sp,16
    3e1c:	003dc306 	br	352c <___vfprintf_internal_r+0x8c0>
    3e20:	d8802917 	ldw	r2,164(sp)
    3e24:	d8002785 	stb	zero,158(sp)
    3e28:	103f0616 	blt	r2,zero,3a44 <___vfprintf_internal_r+0xdd8>
    3e2c:	00ffdfc4 	movi	r3,-129
    3e30:	9d84b03a 	or	r2,r19,r22
    3e34:	90e4703a 	and	r18,r18,r3
    3e38:	103c6b26 	beq	r2,zero,2fe8 <___vfprintf_internal_r+0x37c>
    3e3c:	0039883a 	mov	fp,zero
    3e40:	003e7406 	br	3814 <___vfprintf_internal_r+0xba8>
    3e44:	9080040c 	andi	r2,r18,16
    3e48:	1001b326 	beq	r2,zero,4518 <___vfprintf_internal_r+0x18ac>
    3e4c:	d9002d17 	ldw	r4,180(sp)
    3e50:	d9402917 	ldw	r5,164(sp)
    3e54:	d8002785 	stb	zero,158(sp)
    3e58:	20800104 	addi	r2,r4,4
    3e5c:	24c00017 	ldw	r19,0(r4)
    3e60:	002d883a 	mov	r22,zero
    3e64:	2801b516 	blt	r5,zero,453c <___vfprintf_internal_r+0x18d0>
    3e68:	00ffdfc4 	movi	r3,-129
    3e6c:	d8802d15 	stw	r2,180(sp)
    3e70:	90e4703a 	and	r18,r18,r3
    3e74:	983d2726 	beq	r19,zero,3314 <___vfprintf_internal_r+0x6a8>
    3e78:	0039883a 	mov	fp,zero
    3e7c:	003d2a06 	br	3328 <___vfprintf_internal_r+0x6bc>
    3e80:	dc402617 	ldw	r17,152(sp)
    3e84:	0441d30e 	bge	zero,r17,45d4 <___vfprintf_internal_r+0x1968>
    3e88:	dc403217 	ldw	r17,200(sp)
    3e8c:	d8803317 	ldw	r2,204(sp)
    3e90:	1440010e 	bge	r2,r17,3e98 <___vfprintf_internal_r+0x122c>
    3e94:	1023883a 	mov	r17,r2
    3e98:	04400a0e 	bge	zero,r17,3ec4 <___vfprintf_internal_r+0x1258>
    3e9c:	d8801f17 	ldw	r2,124(sp)
    3ea0:	1c47883a 	add	r3,r3,r17
    3ea4:	44000015 	stw	r16,0(r8)
    3ea8:	10800044 	addi	r2,r2,1
    3eac:	44400115 	stw	r17,4(r8)
    3eb0:	d8c02015 	stw	r3,128(sp)
    3eb4:	d8801f15 	stw	r2,124(sp)
    3eb8:	010001c4 	movi	r4,7
    3ebc:	20826516 	blt	r4,r2,4854 <___vfprintf_internal_r+0x1be8>
    3ec0:	42000204 	addi	r8,r8,8
    3ec4:	88026116 	blt	r17,zero,484c <___vfprintf_internal_r+0x1be0>
    3ec8:	d9003217 	ldw	r4,200(sp)
    3ecc:	2463c83a 	sub	r17,r4,r17
    3ed0:	04407b0e 	bge	zero,r17,40c0 <___vfprintf_internal_r+0x1454>
    3ed4:	05800404 	movi	r22,16
    3ed8:	d8801f17 	ldw	r2,124(sp)
    3edc:	b4419d0e 	bge	r22,r17,4554 <___vfprintf_internal_r+0x18e8>
    3ee0:	01000074 	movhi	r4,1
    3ee4:	21062884 	addi	r4,r4,6306
    3ee8:	d9002b15 	stw	r4,172(sp)
    3eec:	070001c4 	movi	fp,7
    3ef0:	dcc02c17 	ldw	r19,176(sp)
    3ef4:	00000306 	br	3f04 <___vfprintf_internal_r+0x1298>
    3ef8:	42000204 	addi	r8,r8,8
    3efc:	8c7ffc04 	addi	r17,r17,-16
    3f00:	b441970e 	bge	r22,r17,4560 <___vfprintf_internal_r+0x18f4>
    3f04:	18c00404 	addi	r3,r3,16
    3f08:	10800044 	addi	r2,r2,1
    3f0c:	45000015 	stw	r20,0(r8)
    3f10:	45800115 	stw	r22,4(r8)
    3f14:	d8c02015 	stw	r3,128(sp)
    3f18:	d8801f15 	stw	r2,124(sp)
    3f1c:	e0bff60e 	bge	fp,r2,3ef8 <___vfprintf_internal_r+0x128c>
    3f20:	d9801e04 	addi	r6,sp,120
    3f24:	b80b883a 	mov	r5,r23
    3f28:	9809883a 	mov	r4,r19
    3f2c:	0009a080 	call	9a08 <__sprint_r>
    3f30:	103c501e 	bne	r2,zero,3074 <___vfprintf_internal_r+0x408>
    3f34:	d8c02017 	ldw	r3,128(sp)
    3f38:	d8801f17 	ldw	r2,124(sp)
    3f3c:	da000404 	addi	r8,sp,16
    3f40:	003fee06 	br	3efc <___vfprintf_internal_r+0x1290>
    3f44:	d9002c17 	ldw	r4,176(sp)
    3f48:	d9801e04 	addi	r6,sp,120
    3f4c:	b80b883a 	mov	r5,r23
    3f50:	0009a080 	call	9a08 <__sprint_r>
    3f54:	103c471e 	bne	r2,zero,3074 <___vfprintf_internal_r+0x408>
    3f58:	d8c02017 	ldw	r3,128(sp)
    3f5c:	df002787 	ldb	fp,158(sp)
    3f60:	da000404 	addi	r8,sp,16
    3f64:	003d5606 	br	34c0 <___vfprintf_internal_r+0x854>
    3f68:	9080040c 	andi	r2,r18,16
    3f6c:	10016126 	beq	r2,zero,44f4 <___vfprintf_internal_r+0x1888>
    3f70:	d8802d17 	ldw	r2,180(sp)
    3f74:	14c00017 	ldw	r19,0(r2)
    3f78:	10800104 	addi	r2,r2,4
    3f7c:	d8802d15 	stw	r2,180(sp)
    3f80:	982dd7fa 	srai	r22,r19,31
    3f84:	b005883a 	mov	r2,r22
    3f88:	003c8206 	br	3194 <___vfprintf_internal_r+0x528>
    3f8c:	9080040c 	andi	r2,r18,16
    3f90:	10003526 	beq	r2,zero,4068 <___vfprintf_internal_r+0x13fc>
    3f94:	d9402d17 	ldw	r5,180(sp)
    3f98:	d8c02917 	ldw	r3,164(sp)
    3f9c:	d8002785 	stb	zero,158(sp)
    3fa0:	28800104 	addi	r2,r5,4
    3fa4:	2cc00017 	ldw	r19,0(r5)
    3fa8:	002d883a 	mov	r22,zero
    3fac:	18003716 	blt	r3,zero,408c <___vfprintf_internal_r+0x1420>
    3fb0:	00ffdfc4 	movi	r3,-129
    3fb4:	d8802d15 	stw	r2,180(sp)
    3fb8:	90e4703a 	and	r18,r18,r3
    3fbc:	0039883a 	mov	fp,zero
    3fc0:	983df326 	beq	r19,zero,3790 <___vfprintf_internal_r+0xb24>
    3fc4:	00800244 	movi	r2,9
    3fc8:	14fc7b36 	bltu	r2,r19,31b8 <___vfprintf_internal_r+0x54c>
    3fcc:	d8c02817 	ldw	r3,160(sp)
    3fd0:	dc001dc4 	addi	r16,sp,119
    3fd4:	9cc00c04 	addi	r19,r19,48
    3fd8:	1c07c83a 	sub	r3,r3,r16
    3fdc:	dcc01dc5 	stb	r19,119(sp)
    3fe0:	d8c02e15 	stw	r3,184(sp)
    3fe4:	003ce806 	br	3388 <___vfprintf_internal_r+0x71c>
    3fe8:	d8803317 	ldw	r2,204(sp)
    3fec:	143fffc4 	addi	r16,r2,-1
    3ff0:	043f4d0e 	bge	zero,r16,3d28 <___vfprintf_internal_r+0x10bc>
    3ff4:	07000404 	movi	fp,16
    3ff8:	e400810e 	bge	fp,r16,4200 <___vfprintf_internal_r+0x1594>
    3ffc:	01400074 	movhi	r5,1
    4000:	29462884 	addi	r5,r5,6306
    4004:	d9402b15 	stw	r5,172(sp)
    4008:	01c001c4 	movi	r7,7
    400c:	dcc02c17 	ldw	r19,176(sp)
    4010:	00000306 	br	4020 <___vfprintf_internal_r+0x13b4>
    4014:	b5800204 	addi	r22,r22,8
    4018:	843ffc04 	addi	r16,r16,-16
    401c:	e4007b0e 	bge	fp,r16,420c <___vfprintf_internal_r+0x15a0>
    4020:	18c00404 	addi	r3,r3,16
    4024:	8c400044 	addi	r17,r17,1
    4028:	b5000015 	stw	r20,0(r22)
    402c:	b7000115 	stw	fp,4(r22)
    4030:	d8c02015 	stw	r3,128(sp)
    4034:	dc401f15 	stw	r17,124(sp)
    4038:	3c7ff60e 	bge	r7,r17,4014 <___vfprintf_internal_r+0x13a8>
    403c:	d9801e04 	addi	r6,sp,120
    4040:	b80b883a 	mov	r5,r23
    4044:	9809883a 	mov	r4,r19
    4048:	d9c03c15 	stw	r7,240(sp)
    404c:	0009a080 	call	9a08 <__sprint_r>
    4050:	d9c03c17 	ldw	r7,240(sp)
    4054:	103c071e 	bne	r2,zero,3074 <___vfprintf_internal_r+0x408>
    4058:	d8c02017 	ldw	r3,128(sp)
    405c:	dc401f17 	ldw	r17,124(sp)
    4060:	dd800404 	addi	r22,sp,16
    4064:	003fec06 	br	4018 <___vfprintf_internal_r+0x13ac>
    4068:	9080100c 	andi	r2,r18,64
    406c:	d8002785 	stb	zero,158(sp)
    4070:	10010e26 	beq	r2,zero,44ac <___vfprintf_internal_r+0x1840>
    4074:	d9002d17 	ldw	r4,180(sp)
    4078:	d9402917 	ldw	r5,164(sp)
    407c:	002d883a 	mov	r22,zero
    4080:	20800104 	addi	r2,r4,4
    4084:	24c0000b 	ldhu	r19,0(r4)
    4088:	283fc90e 	bge	r5,zero,3fb0 <___vfprintf_internal_r+0x1344>
    408c:	d8802d15 	stw	r2,180(sp)
    4090:	0039883a 	mov	fp,zero
    4094:	9d84b03a 	or	r2,r19,r22
    4098:	103c461e 	bne	r2,zero,31b4 <___vfprintf_internal_r+0x548>
    409c:	00800044 	movi	r2,1
    40a0:	003e6c06 	br	3a54 <___vfprintf_internal_r+0xde8>
    40a4:	d9002c17 	ldw	r4,176(sp)
    40a8:	d9801e04 	addi	r6,sp,120
    40ac:	b80b883a 	mov	r5,r23
    40b0:	0009a080 	call	9a08 <__sprint_r>
    40b4:	103bef1e 	bne	r2,zero,3074 <___vfprintf_internal_r+0x408>
    40b8:	d8c02017 	ldw	r3,128(sp)
    40bc:	da000404 	addi	r8,sp,16
    40c0:	d9003217 	ldw	r4,200(sp)
    40c4:	d8802617 	ldw	r2,152(sp)
    40c8:	d9403317 	ldw	r5,204(sp)
    40cc:	8123883a 	add	r17,r16,r4
    40d0:	11400216 	blt	r2,r5,40dc <___vfprintf_internal_r+0x1470>
    40d4:	9100004c 	andi	r4,r18,1
    40d8:	20000d26 	beq	r4,zero,4110 <___vfprintf_internal_r+0x14a4>
    40dc:	d9003717 	ldw	r4,220(sp)
    40e0:	d9403417 	ldw	r5,208(sp)
    40e4:	1907883a 	add	r3,r3,r4
    40e8:	d9001f17 	ldw	r4,124(sp)
    40ec:	41400015 	stw	r5,0(r8)
    40f0:	d9403717 	ldw	r5,220(sp)
    40f4:	21000044 	addi	r4,r4,1
    40f8:	d8c02015 	stw	r3,128(sp)
    40fc:	41400115 	stw	r5,4(r8)
    4100:	d9001f15 	stw	r4,124(sp)
    4104:	014001c4 	movi	r5,7
    4108:	2901e816 	blt	r5,r4,48ac <___vfprintf_internal_r+0x1c40>
    410c:	42000204 	addi	r8,r8,8
    4110:	d9003317 	ldw	r4,204(sp)
    4114:	8121883a 	add	r16,r16,r4
    4118:	2085c83a 	sub	r2,r4,r2
    411c:	8461c83a 	sub	r16,r16,r17
    4120:	1400010e 	bge	r2,r16,4128 <___vfprintf_internal_r+0x14bc>
    4124:	1021883a 	mov	r16,r2
    4128:	04000a0e 	bge	zero,r16,4154 <___vfprintf_internal_r+0x14e8>
    412c:	d9001f17 	ldw	r4,124(sp)
    4130:	1c07883a 	add	r3,r3,r16
    4134:	44400015 	stw	r17,0(r8)
    4138:	21000044 	addi	r4,r4,1
    413c:	44000115 	stw	r16,4(r8)
    4140:	d8c02015 	stw	r3,128(sp)
    4144:	d9001f15 	stw	r4,124(sp)
    4148:	014001c4 	movi	r5,7
    414c:	2901fb16 	blt	r5,r4,493c <___vfprintf_internal_r+0x1cd0>
    4150:	42000204 	addi	r8,r8,8
    4154:	8001f716 	blt	r16,zero,4934 <___vfprintf_internal_r+0x1cc8>
    4158:	1421c83a 	sub	r16,r2,r16
    415c:	043d380e 	bge	zero,r16,3640 <___vfprintf_internal_r+0x9d4>
    4160:	04400404 	movi	r17,16
    4164:	d8801f17 	ldw	r2,124(sp)
    4168:	8c3efb0e 	bge	r17,r16,3d58 <___vfprintf_internal_r+0x10ec>
    416c:	01400074 	movhi	r5,1
    4170:	29462884 	addi	r5,r5,6306
    4174:	d9402b15 	stw	r5,172(sp)
    4178:	058001c4 	movi	r22,7
    417c:	dcc02c17 	ldw	r19,176(sp)
    4180:	00000306 	br	4190 <___vfprintf_internal_r+0x1524>
    4184:	42000204 	addi	r8,r8,8
    4188:	843ffc04 	addi	r16,r16,-16
    418c:	8c3ef50e 	bge	r17,r16,3d64 <___vfprintf_internal_r+0x10f8>
    4190:	18c00404 	addi	r3,r3,16
    4194:	10800044 	addi	r2,r2,1
    4198:	45000015 	stw	r20,0(r8)
    419c:	44400115 	stw	r17,4(r8)
    41a0:	d8c02015 	stw	r3,128(sp)
    41a4:	d8801f15 	stw	r2,124(sp)
    41a8:	b0bff60e 	bge	r22,r2,4184 <___vfprintf_internal_r+0x1518>
    41ac:	d9801e04 	addi	r6,sp,120
    41b0:	b80b883a 	mov	r5,r23
    41b4:	9809883a 	mov	r4,r19
    41b8:	0009a080 	call	9a08 <__sprint_r>
    41bc:	103bad1e 	bne	r2,zero,3074 <___vfprintf_internal_r+0x408>
    41c0:	d8c02017 	ldw	r3,128(sp)
    41c4:	d8801f17 	ldw	r2,124(sp)
    41c8:	da000404 	addi	r8,sp,16
    41cc:	003fee06 	br	4188 <___vfprintf_internal_r+0x151c>
    41d0:	9088703a 	and	r4,r18,r2
    41d4:	203eab1e 	bne	r4,zero,3c84 <___vfprintf_internal_r+0x1018>
    41d8:	dc401f17 	ldw	r17,124(sp)
    41dc:	40800115 	stw	r2,4(r8)
    41e0:	44000015 	stw	r16,0(r8)
    41e4:	8c400044 	addi	r17,r17,1
    41e8:	d8c02015 	stw	r3,128(sp)
    41ec:	dc401f15 	stw	r17,124(sp)
    41f0:	008001c4 	movi	r2,7
    41f4:	14400e16 	blt	r2,r17,4230 <___vfprintf_internal_r+0x15c4>
    41f8:	45800204 	addi	r22,r8,8
    41fc:	003eca06 	br	3d28 <___vfprintf_internal_r+0x10bc>
    4200:	01000074 	movhi	r4,1
    4204:	21062884 	addi	r4,r4,6306
    4208:	d9002b15 	stw	r4,172(sp)
    420c:	d8802b17 	ldw	r2,172(sp)
    4210:	1c07883a 	add	r3,r3,r16
    4214:	8c400044 	addi	r17,r17,1
    4218:	b0800015 	stw	r2,0(r22)
    421c:	b4000115 	stw	r16,4(r22)
    4220:	d8c02015 	stw	r3,128(sp)
    4224:	dc401f15 	stw	r17,124(sp)
    4228:	008001c4 	movi	r2,7
    422c:	147ebd0e 	bge	r2,r17,3d24 <___vfprintf_internal_r+0x10b8>
    4230:	d9002c17 	ldw	r4,176(sp)
    4234:	d9801e04 	addi	r6,sp,120
    4238:	b80b883a 	mov	r5,r23
    423c:	0009a080 	call	9a08 <__sprint_r>
    4240:	103b8c1e 	bne	r2,zero,3074 <___vfprintf_internal_r+0x408>
    4244:	d8c02017 	ldw	r3,128(sp)
    4248:	dc401f17 	ldw	r17,124(sp)
    424c:	dd800404 	addi	r22,sp,16
    4250:	003eb506 	br	3d28 <___vfprintf_internal_r+0x10bc>
    4254:	d9002c17 	ldw	r4,176(sp)
    4258:	d9801e04 	addi	r6,sp,120
    425c:	b80b883a 	mov	r5,r23
    4260:	0009a080 	call	9a08 <__sprint_r>
    4264:	103b831e 	bne	r2,zero,3074 <___vfprintf_internal_r+0x408>
    4268:	d8c02017 	ldw	r3,128(sp)
    426c:	dc401f17 	ldw	r17,124(sp)
    4270:	da000404 	addi	r8,sp,16
    4274:	003e8d06 	br	3cac <___vfprintf_internal_r+0x1040>
    4278:	d9002c17 	ldw	r4,176(sp)
    427c:	d9801e04 	addi	r6,sp,120
    4280:	b80b883a 	mov	r5,r23
    4284:	0009a080 	call	9a08 <__sprint_r>
    4288:	103b7a1e 	bne	r2,zero,3074 <___vfprintf_internal_r+0x408>
    428c:	d8c02017 	ldw	r3,128(sp)
    4290:	dc401f17 	ldw	r17,124(sp)
    4294:	dd800404 	addi	r22,sp,16
    4298:	003e8f06 	br	3cd8 <___vfprintf_internal_r+0x106c>
    429c:	0027883a 	mov	r19,zero
    42a0:	003f4a06 	br	3fcc <___vfprintf_internal_r+0x1360>
    42a4:	d9002c17 	ldw	r4,176(sp)
    42a8:	d9801e04 	addi	r6,sp,120
    42ac:	b80b883a 	mov	r5,r23
    42b0:	0009a080 	call	9a08 <__sprint_r>
    42b4:	103b6f1e 	bne	r2,zero,3074 <___vfprintf_internal_r+0x408>
    42b8:	d8c02017 	ldw	r3,128(sp)
    42bc:	da000404 	addi	r8,sp,16
    42c0:	003c9d06 	br	3538 <___vfprintf_internal_r+0x8cc>
    42c4:	04e7c83a 	sub	r19,zero,r19
    42c8:	9804c03a 	cmpne	r2,r19,zero
    42cc:	05adc83a 	sub	r22,zero,r22
    42d0:	b0adc83a 	sub	r22,r22,r2
    42d4:	d8802917 	ldw	r2,164(sp)
    42d8:	07000b44 	movi	fp,45
    42dc:	df002785 	stb	fp,158(sp)
    42e0:	10017b16 	blt	r2,zero,48d0 <___vfprintf_internal_r+0x1c64>
    42e4:	00bfdfc4 	movi	r2,-129
    42e8:	90a4703a 	and	r18,r18,r2
    42ec:	003bb106 	br	31b4 <___vfprintf_internal_r+0x548>
    42f0:	d9003617 	ldw	r4,216(sp)
    42f4:	d9403817 	ldw	r5,224(sp)
    42f8:	da003d15 	stw	r8,244(sp)
    42fc:	00096800 	call	9680 <__fpclassifyd>
    4300:	da003d17 	ldw	r8,244(sp)
    4304:	1000f026 	beq	r2,zero,46c8 <___vfprintf_internal_r+0x1a5c>
    4308:	d9002917 	ldw	r4,164(sp)
    430c:	05bff7c4 	movi	r22,-33
    4310:	00bfffc4 	movi	r2,-1
    4314:	8dac703a 	and	r22,r17,r22
    4318:	20820026 	beq	r4,r2,4b1c <___vfprintf_internal_r+0x1eb0>
    431c:	008011c4 	movi	r2,71
    4320:	b081f726 	beq	r22,r2,4b00 <___vfprintf_internal_r+0x1e94>
    4324:	d9003817 	ldw	r4,224(sp)
    4328:	90c04014 	ori	r3,r18,256
    432c:	d8c02b15 	stw	r3,172(sp)
    4330:	20021516 	blt	r4,zero,4b88 <___vfprintf_internal_r+0x1f1c>
    4334:	dcc03817 	ldw	r19,224(sp)
    4338:	d8002a05 	stb	zero,168(sp)
    433c:	00801984 	movi	r2,102
    4340:	8881f926 	beq	r17,r2,4b28 <___vfprintf_internal_r+0x1ebc>
    4344:	00801184 	movi	r2,70
    4348:	88821c26 	beq	r17,r2,4bbc <___vfprintf_internal_r+0x1f50>
    434c:	00801144 	movi	r2,69
    4350:	b081ef26 	beq	r22,r2,4b10 <___vfprintf_internal_r+0x1ea4>
    4354:	d8c02917 	ldw	r3,164(sp)
    4358:	d8802104 	addi	r2,sp,132
    435c:	d8800315 	stw	r2,12(sp)
    4360:	d9403617 	ldw	r5,216(sp)
    4364:	d8802504 	addi	r2,sp,148
    4368:	d9002c17 	ldw	r4,176(sp)
    436c:	d8800215 	stw	r2,8(sp)
    4370:	d8802604 	addi	r2,sp,152
    4374:	d8c00015 	stw	r3,0(sp)
    4378:	d8800115 	stw	r2,4(sp)
    437c:	01c00084 	movi	r7,2
    4380:	980d883a 	mov	r6,r19
    4384:	d8c03c15 	stw	r3,240(sp)
    4388:	da003d15 	stw	r8,244(sp)
    438c:	00052900 	call	5290 <_dtoa_r>
    4390:	1021883a 	mov	r16,r2
    4394:	008019c4 	movi	r2,103
    4398:	d8c03c17 	ldw	r3,240(sp)
    439c:	da003d17 	ldw	r8,244(sp)
    43a0:	88817126 	beq	r17,r2,4968 <___vfprintf_internal_r+0x1cfc>
    43a4:	008011c4 	movi	r2,71
    43a8:	88829226 	beq	r17,r2,4df4 <___vfprintf_internal_r+0x2188>
    43ac:	80f9883a 	add	fp,r16,r3
    43b0:	d9003617 	ldw	r4,216(sp)
    43b4:	000d883a 	mov	r6,zero
    43b8:	000f883a 	mov	r7,zero
    43bc:	980b883a 	mov	r5,r19
    43c0:	da003d15 	stw	r8,244(sp)
    43c4:	000d4cc0 	call	d4cc <__eqdf2>
    43c8:	da003d17 	ldw	r8,244(sp)
    43cc:	10018d26 	beq	r2,zero,4a04 <___vfprintf_internal_r+0x1d98>
    43d0:	d8802117 	ldw	r2,132(sp)
    43d4:	1700062e 	bgeu	r2,fp,43f0 <___vfprintf_internal_r+0x1784>
    43d8:	01000c04 	movi	r4,48
    43dc:	10c00044 	addi	r3,r2,1
    43e0:	d8c02115 	stw	r3,132(sp)
    43e4:	11000005 	stb	r4,0(r2)
    43e8:	d8802117 	ldw	r2,132(sp)
    43ec:	173ffb36 	bltu	r2,fp,43dc <___vfprintf_internal_r+0x1770>
    43f0:	1405c83a 	sub	r2,r2,r16
    43f4:	d8803315 	stw	r2,204(sp)
    43f8:	008011c4 	movi	r2,71
    43fc:	b0817626 	beq	r22,r2,49d8 <___vfprintf_internal_r+0x1d6c>
    4400:	00801944 	movi	r2,101
    4404:	1442810e 	bge	r2,r17,4e0c <___vfprintf_internal_r+0x21a0>
    4408:	d8c02617 	ldw	r3,152(sp)
    440c:	00801984 	movi	r2,102
    4410:	d8c03215 	stw	r3,200(sp)
    4414:	8881fe26 	beq	r17,r2,4c10 <___vfprintf_internal_r+0x1fa4>
    4418:	d8c03217 	ldw	r3,200(sp)
    441c:	d9003317 	ldw	r4,204(sp)
    4420:	1901dd16 	blt	r3,r4,4b98 <___vfprintf_internal_r+0x1f2c>
    4424:	9480004c 	andi	r18,r18,1
    4428:	90022b1e 	bne	r18,zero,4cd8 <___vfprintf_internal_r+0x206c>
    442c:	1805883a 	mov	r2,r3
    4430:	18028016 	blt	r3,zero,4e34 <___vfprintf_internal_r+0x21c8>
    4434:	d8c03217 	ldw	r3,200(sp)
    4438:	044019c4 	movi	r17,103
    443c:	d8c02e15 	stw	r3,184(sp)
    4440:	df002a07 	ldb	fp,168(sp)
    4444:	e001531e 	bne	fp,zero,4994 <___vfprintf_internal_r+0x1d28>
    4448:	df002783 	ldbu	fp,158(sp)
    444c:	d8802a15 	stw	r2,168(sp)
    4450:	dc802b17 	ldw	r18,172(sp)
    4454:	d8002915 	stw	zero,164(sp)
    4458:	003bd106 	br	33a0 <___vfprintf_internal_r+0x734>
    445c:	d8802d17 	ldw	r2,180(sp)
    4460:	d8c02d17 	ldw	r3,180(sp)
    4464:	d9002d17 	ldw	r4,180(sp)
    4468:	10800017 	ldw	r2,0(r2)
    446c:	18c00117 	ldw	r3,4(r3)
    4470:	21000204 	addi	r4,r4,8
    4474:	d8803615 	stw	r2,216(sp)
    4478:	d8c03815 	stw	r3,224(sp)
    447c:	d9002d15 	stw	r4,180(sp)
    4480:	003b7506 	br	3258 <___vfprintf_internal_r+0x5ec>
    4484:	ac400007 	ldb	r17,0(r21)
    4488:	003a5906 	br	2df0 <___vfprintf_internal_r+0x184>
    448c:	9080100c 	andi	r2,r18,64
    4490:	1000a826 	beq	r2,zero,4734 <___vfprintf_internal_r+0x1ac8>
    4494:	d9002d17 	ldw	r4,180(sp)
    4498:	002d883a 	mov	r22,zero
    449c:	24c0000b 	ldhu	r19,0(r4)
    44a0:	21000104 	addi	r4,r4,4
    44a4:	d9002d15 	stw	r4,180(sp)
    44a8:	003ccb06 	br	37d8 <___vfprintf_internal_r+0xb6c>
    44ac:	d8c02d17 	ldw	r3,180(sp)
    44b0:	d9002917 	ldw	r4,164(sp)
    44b4:	002d883a 	mov	r22,zero
    44b8:	18800104 	addi	r2,r3,4
    44bc:	1cc00017 	ldw	r19,0(r3)
    44c0:	203ebb0e 	bge	r4,zero,3fb0 <___vfprintf_internal_r+0x1344>
    44c4:	003ef106 	br	408c <___vfprintf_internal_r+0x1420>
    44c8:	9080040c 	andi	r2,r18,16
    44cc:	1000921e 	bne	r2,zero,4718 <___vfprintf_internal_r+0x1aac>
    44d0:	9480100c 	andi	r18,r18,64
    44d4:	90013926 	beq	r18,zero,49bc <___vfprintf_internal_r+0x1d50>
    44d8:	d9002d17 	ldw	r4,180(sp)
    44dc:	d9402f17 	ldw	r5,188(sp)
    44e0:	20800017 	ldw	r2,0(r4)
    44e4:	21000104 	addi	r4,r4,4
    44e8:	d9002d15 	stw	r4,180(sp)
    44ec:	1140000d 	sth	r5,0(r2)
    44f0:	003a1606 	br	2d4c <___vfprintf_internal_r+0xe0>
    44f4:	9080100c 	andi	r2,r18,64
    44f8:	10008026 	beq	r2,zero,46fc <___vfprintf_internal_r+0x1a90>
    44fc:	d8c02d17 	ldw	r3,180(sp)
    4500:	1cc0000f 	ldh	r19,0(r3)
    4504:	18c00104 	addi	r3,r3,4
    4508:	d8c02d15 	stw	r3,180(sp)
    450c:	982dd7fa 	srai	r22,r19,31
    4510:	b005883a 	mov	r2,r22
    4514:	003b1f06 	br	3194 <___vfprintf_internal_r+0x528>
    4518:	9080100c 	andi	r2,r18,64
    451c:	d8002785 	stb	zero,158(sp)
    4520:	10008a1e 	bne	r2,zero,474c <___vfprintf_internal_r+0x1ae0>
    4524:	d9402d17 	ldw	r5,180(sp)
    4528:	d8c02917 	ldw	r3,164(sp)
    452c:	002d883a 	mov	r22,zero
    4530:	28800104 	addi	r2,r5,4
    4534:	2cc00017 	ldw	r19,0(r5)
    4538:	183e4b0e 	bge	r3,zero,3e68 <___vfprintf_internal_r+0x11fc>
    453c:	9d86b03a 	or	r3,r19,r22
    4540:	d8802d15 	stw	r2,180(sp)
    4544:	183e4c1e 	bne	r3,zero,3e78 <___vfprintf_internal_r+0x120c>
    4548:	0039883a 	mov	fp,zero
    454c:	0005883a 	mov	r2,zero
    4550:	003d4006 	br	3a54 <___vfprintf_internal_r+0xde8>
    4554:	01400074 	movhi	r5,1
    4558:	29462884 	addi	r5,r5,6306
    455c:	d9402b15 	stw	r5,172(sp)
    4560:	d9402b17 	ldw	r5,172(sp)
    4564:	1c47883a 	add	r3,r3,r17
    4568:	10800044 	addi	r2,r2,1
    456c:	41400015 	stw	r5,0(r8)
    4570:	44400115 	stw	r17,4(r8)
    4574:	d8c02015 	stw	r3,128(sp)
    4578:	d8801f15 	stw	r2,124(sp)
    457c:	010001c4 	movi	r4,7
    4580:	20bec816 	blt	r4,r2,40a4 <___vfprintf_internal_r+0x1438>
    4584:	42000204 	addi	r8,r8,8
    4588:	003ecd06 	br	40c0 <___vfprintf_internal_r+0x1454>
    458c:	d9002917 	ldw	r4,164(sp)
    4590:	d8002785 	stb	zero,158(sp)
    4594:	203d2d16 	blt	r4,zero,3a4c <___vfprintf_internal_r+0xde0>
    4598:	00bfdfc4 	movi	r2,-129
    459c:	90a4703a 	and	r18,r18,r2
    45a0:	003a9106 	br	2fe8 <___vfprintf_internal_r+0x37c>
    45a4:	01000074 	movhi	r4,1
    45a8:	21062884 	addi	r4,r4,6306
    45ac:	d9002b15 	stw	r4,172(sp)
    45b0:	003c0c06 	br	35e4 <___vfprintf_internal_r+0x978>
    45b4:	d9002c17 	ldw	r4,176(sp)
    45b8:	d9801e04 	addi	r6,sp,120
    45bc:	b80b883a 	mov	r5,r23
    45c0:	0009a080 	call	9a08 <__sprint_r>
    45c4:	103aab1e 	bne	r2,zero,3074 <___vfprintf_internal_r+0x408>
    45c8:	d8c02017 	ldw	r3,128(sp)
    45cc:	da000404 	addi	r8,sp,16
    45d0:	003d4106 	br	3ad8 <___vfprintf_internal_r+0xe6c>
    45d4:	d8801f17 	ldw	r2,124(sp)
    45d8:	01400074 	movhi	r5,1
    45dc:	01000044 	movi	r4,1
    45e0:	18c00044 	addi	r3,r3,1
    45e4:	10800044 	addi	r2,r2,1
    45e8:	29462804 	addi	r5,r5,6304
    45ec:	41000115 	stw	r4,4(r8)
    45f0:	41400015 	stw	r5,0(r8)
    45f4:	d8c02015 	stw	r3,128(sp)
    45f8:	d8801f15 	stw	r2,124(sp)
    45fc:	010001c4 	movi	r4,7
    4600:	20805c16 	blt	r4,r2,4774 <___vfprintf_internal_r+0x1b08>
    4604:	42000204 	addi	r8,r8,8
    4608:	8800041e 	bne	r17,zero,461c <___vfprintf_internal_r+0x19b0>
    460c:	d8803317 	ldw	r2,204(sp)
    4610:	1000021e 	bne	r2,zero,461c <___vfprintf_internal_r+0x19b0>
    4614:	9080004c 	andi	r2,r18,1
    4618:	103c0926 	beq	r2,zero,3640 <___vfprintf_internal_r+0x9d4>
    461c:	d9003717 	ldw	r4,220(sp)
    4620:	d8801f17 	ldw	r2,124(sp)
    4624:	d9403417 	ldw	r5,208(sp)
    4628:	20c7883a 	add	r3,r4,r3
    462c:	10800044 	addi	r2,r2,1
    4630:	41000115 	stw	r4,4(r8)
    4634:	41400015 	stw	r5,0(r8)
    4638:	d8c02015 	stw	r3,128(sp)
    463c:	d8801f15 	stw	r2,124(sp)
    4640:	010001c4 	movi	r4,7
    4644:	20812116 	blt	r4,r2,4acc <___vfprintf_internal_r+0x1e60>
    4648:	42000204 	addi	r8,r8,8
    464c:	0463c83a 	sub	r17,zero,r17
    4650:	0440730e 	bge	zero,r17,4820 <___vfprintf_internal_r+0x1bb4>
    4654:	05800404 	movi	r22,16
    4658:	b440860e 	bge	r22,r17,4874 <___vfprintf_internal_r+0x1c08>
    465c:	01400074 	movhi	r5,1
    4660:	29462884 	addi	r5,r5,6306
    4664:	d9402b15 	stw	r5,172(sp)
    4668:	070001c4 	movi	fp,7
    466c:	dcc02c17 	ldw	r19,176(sp)
    4670:	00000306 	br	4680 <___vfprintf_internal_r+0x1a14>
    4674:	42000204 	addi	r8,r8,8
    4678:	8c7ffc04 	addi	r17,r17,-16
    467c:	b440800e 	bge	r22,r17,4880 <___vfprintf_internal_r+0x1c14>
    4680:	18c00404 	addi	r3,r3,16
    4684:	10800044 	addi	r2,r2,1
    4688:	45000015 	stw	r20,0(r8)
    468c:	45800115 	stw	r22,4(r8)
    4690:	d8c02015 	stw	r3,128(sp)
    4694:	d8801f15 	stw	r2,124(sp)
    4698:	e0bff60e 	bge	fp,r2,4674 <___vfprintf_internal_r+0x1a08>
    469c:	d9801e04 	addi	r6,sp,120
    46a0:	b80b883a 	mov	r5,r23
    46a4:	9809883a 	mov	r4,r19
    46a8:	0009a080 	call	9a08 <__sprint_r>
    46ac:	103a711e 	bne	r2,zero,3074 <___vfprintf_internal_r+0x408>
    46b0:	d8c02017 	ldw	r3,128(sp)
    46b4:	d8801f17 	ldw	r2,124(sp)
    46b8:	da000404 	addi	r8,sp,16
    46bc:	003fee06 	br	4678 <___vfprintf_internal_r+0x1a0c>
    46c0:	00bfffc4 	movi	r2,-1
    46c4:	003a6f06 	br	3084 <___vfprintf_internal_r+0x418>
    46c8:	008011c4 	movi	r2,71
    46cc:	1440b816 	blt	r2,r17,49b0 <___vfprintf_internal_r+0x1d44>
    46d0:	04000074 	movhi	r16,1
    46d4:	84061a04 	addi	r16,r16,6248
    46d8:	00c000c4 	movi	r3,3
    46dc:	00bfdfc4 	movi	r2,-129
    46e0:	d8c02a15 	stw	r3,168(sp)
    46e4:	90a4703a 	and	r18,r18,r2
    46e8:	df002783 	ldbu	fp,158(sp)
    46ec:	d8c02e15 	stw	r3,184(sp)
    46f0:	d8002915 	stw	zero,164(sp)
    46f4:	d8003215 	stw	zero,200(sp)
    46f8:	003b2906 	br	33a0 <___vfprintf_internal_r+0x734>
    46fc:	d9002d17 	ldw	r4,180(sp)
    4700:	24c00017 	ldw	r19,0(r4)
    4704:	21000104 	addi	r4,r4,4
    4708:	d9002d15 	stw	r4,180(sp)
    470c:	982dd7fa 	srai	r22,r19,31
    4710:	b005883a 	mov	r2,r22
    4714:	003a9f06 	br	3194 <___vfprintf_internal_r+0x528>
    4718:	d9402d17 	ldw	r5,180(sp)
    471c:	d8c02f17 	ldw	r3,188(sp)
    4720:	28800017 	ldw	r2,0(r5)
    4724:	29400104 	addi	r5,r5,4
    4728:	d9402d15 	stw	r5,180(sp)
    472c:	10c00015 	stw	r3,0(r2)
    4730:	00398606 	br	2d4c <___vfprintf_internal_r+0xe0>
    4734:	d9402d17 	ldw	r5,180(sp)
    4738:	002d883a 	mov	r22,zero
    473c:	2cc00017 	ldw	r19,0(r5)
    4740:	29400104 	addi	r5,r5,4
    4744:	d9402d15 	stw	r5,180(sp)
    4748:	003c2306 	br	37d8 <___vfprintf_internal_r+0xb6c>
    474c:	d8c02d17 	ldw	r3,180(sp)
    4750:	d9002917 	ldw	r4,164(sp)
    4754:	002d883a 	mov	r22,zero
    4758:	18800104 	addi	r2,r3,4
    475c:	1cc0000b 	ldhu	r19,0(r3)
    4760:	203dc10e 	bge	r4,zero,3e68 <___vfprintf_internal_r+0x11fc>
    4764:	003f7506 	br	453c <___vfprintf_internal_r+0x18d0>
    4768:	04000074 	movhi	r16,1
    476c:	84061804 	addi	r16,r16,6240
    4770:	003acc06 	br	32a4 <___vfprintf_internal_r+0x638>
    4774:	d9002c17 	ldw	r4,176(sp)
    4778:	d9801e04 	addi	r6,sp,120
    477c:	b80b883a 	mov	r5,r23
    4780:	0009a080 	call	9a08 <__sprint_r>
    4784:	103a3b1e 	bne	r2,zero,3074 <___vfprintf_internal_r+0x408>
    4788:	dc402617 	ldw	r17,152(sp)
    478c:	d8c02017 	ldw	r3,128(sp)
    4790:	da000404 	addi	r8,sp,16
    4794:	003f9c06 	br	4608 <___vfprintf_internal_r+0x199c>
    4798:	ac400043 	ldbu	r17,1(r21)
    479c:	94800814 	ori	r18,r18,32
    47a0:	ad400044 	addi	r21,r21,1
    47a4:	8c403fcc 	andi	r17,r17,255
    47a8:	8c40201c 	xori	r17,r17,128
    47ac:	8c7fe004 	addi	r17,r17,-128
    47b0:	00398f06 	br	2df0 <___vfprintf_internal_r+0x184>
    47b4:	d8c02d15 	stw	r3,180(sp)
    47b8:	0039883a 	mov	fp,zero
    47bc:	003e3506 	br	4094 <___vfprintf_internal_r+0x1428>
    47c0:	d9002c17 	ldw	r4,176(sp)
    47c4:	d9801e04 	addi	r6,sp,120
    47c8:	b80b883a 	mov	r5,r23
    47cc:	0009a080 	call	9a08 <__sprint_r>
    47d0:	103a281e 	bne	r2,zero,3074 <___vfprintf_internal_r+0x408>
    47d4:	d8c02017 	ldw	r3,128(sp)
    47d8:	da000404 	addi	r8,sp,16
    47dc:	003cd006 	br	3b20 <___vfprintf_internal_r+0xeb4>
    47e0:	8009883a 	mov	r4,r16
    47e4:	da003d15 	stw	r8,244(sp)
    47e8:	0002bd40 	call	2bd4 <strlen>
    47ec:	d8802e15 	stw	r2,184(sp)
    47f0:	da003d17 	ldw	r8,244(sp)
    47f4:	103c340e 	bge	r2,zero,38c8 <___vfprintf_internal_r+0xc5c>
    47f8:	0005883a 	mov	r2,zero
    47fc:	003c3206 	br	38c8 <___vfprintf_internal_r+0xc5c>
    4800:	d9002c17 	ldw	r4,176(sp)
    4804:	d9801e04 	addi	r6,sp,120
    4808:	b80b883a 	mov	r5,r23
    480c:	0009a080 	call	9a08 <__sprint_r>
    4810:	103a181e 	bne	r2,zero,3074 <___vfprintf_internal_r+0x408>
    4814:	d8c02017 	ldw	r3,128(sp)
    4818:	d8801f17 	ldw	r2,124(sp)
    481c:	da000404 	addi	r8,sp,16
    4820:	d9403317 	ldw	r5,204(sp)
    4824:	10800044 	addi	r2,r2,1
    4828:	44000015 	stw	r16,0(r8)
    482c:	28c7883a 	add	r3,r5,r3
    4830:	003b7d06 	br	3628 <___vfprintf_internal_r+0x9bc>
    4834:	01000074 	movhi	r4,1
    4838:	21062c84 	addi	r4,r4,6322
    483c:	d9003515 	stw	r4,212(sp)
    4840:	003b1406 	br	3494 <___vfprintf_internal_r+0x828>
    4844:	013fffc4 	movi	r4,-1
    4848:	003a3506 	br	3120 <___vfprintf_internal_r+0x4b4>
    484c:	0023883a 	mov	r17,zero
    4850:	003d9d06 	br	3ec8 <___vfprintf_internal_r+0x125c>
    4854:	d9002c17 	ldw	r4,176(sp)
    4858:	d9801e04 	addi	r6,sp,120
    485c:	b80b883a 	mov	r5,r23
    4860:	0009a080 	call	9a08 <__sprint_r>
    4864:	103a031e 	bne	r2,zero,3074 <___vfprintf_internal_r+0x408>
    4868:	d8c02017 	ldw	r3,128(sp)
    486c:	da000404 	addi	r8,sp,16
    4870:	003d9406 	br	3ec4 <___vfprintf_internal_r+0x1258>
    4874:	01000074 	movhi	r4,1
    4878:	21062884 	addi	r4,r4,6306
    487c:	d9002b15 	stw	r4,172(sp)
    4880:	d9002b17 	ldw	r4,172(sp)
    4884:	1c47883a 	add	r3,r3,r17
    4888:	10800044 	addi	r2,r2,1
    488c:	41000015 	stw	r4,0(r8)
    4890:	44400115 	stw	r17,4(r8)
    4894:	d8c02015 	stw	r3,128(sp)
    4898:	d8801f15 	stw	r2,124(sp)
    489c:	010001c4 	movi	r4,7
    48a0:	20bfd716 	blt	r4,r2,4800 <___vfprintf_internal_r+0x1b94>
    48a4:	42000204 	addi	r8,r8,8
    48a8:	003fdd06 	br	4820 <___vfprintf_internal_r+0x1bb4>
    48ac:	d9002c17 	ldw	r4,176(sp)
    48b0:	d9801e04 	addi	r6,sp,120
    48b4:	b80b883a 	mov	r5,r23
    48b8:	0009a080 	call	9a08 <__sprint_r>
    48bc:	1039ed1e 	bne	r2,zero,3074 <___vfprintf_internal_r+0x408>
    48c0:	d8802617 	ldw	r2,152(sp)
    48c4:	d8c02017 	ldw	r3,128(sp)
    48c8:	da000404 	addi	r8,sp,16
    48cc:	003e1006 	br	4110 <___vfprintf_internal_r+0x14a4>
    48d0:	00800044 	movi	r2,1
    48d4:	10803fcc 	andi	r2,r2,255
    48d8:	00c00044 	movi	r3,1
    48dc:	10fa3526 	beq	r2,r3,31b4 <___vfprintf_internal_r+0x548>
    48e0:	00c00084 	movi	r3,2
    48e4:	10fbcb26 	beq	r2,r3,3814 <___vfprintf_internal_r+0xba8>
    48e8:	003a8f06 	br	3328 <___vfprintf_internal_r+0x6bc>
    48ec:	01000074 	movhi	r4,1
    48f0:	21062c84 	addi	r4,r4,6322
    48f4:	d9003515 	stw	r4,212(sp)
    48f8:	003b7606 	br	36d4 <___vfprintf_internal_r+0xa68>
    48fc:	d8802917 	ldw	r2,164(sp)
    4900:	00c00184 	movi	r3,6
    4904:	1880012e 	bgeu	r3,r2,490c <___vfprintf_internal_r+0x1ca0>
    4908:	1805883a 	mov	r2,r3
    490c:	d8802e15 	stw	r2,184(sp)
    4910:	1000ef16 	blt	r2,zero,4cd0 <___vfprintf_internal_r+0x2064>
    4914:	04000074 	movhi	r16,1
    4918:	d8802a15 	stw	r2,168(sp)
    491c:	dcc02d15 	stw	r19,180(sp)
    4920:	d8002915 	stw	zero,164(sp)
    4924:	d8003215 	stw	zero,200(sp)
    4928:	84062604 	addi	r16,r16,6296
    492c:	0039883a 	mov	fp,zero
    4930:	003aa206 	br	33bc <___vfprintf_internal_r+0x750>
    4934:	0021883a 	mov	r16,zero
    4938:	003e0706 	br	4158 <___vfprintf_internal_r+0x14ec>
    493c:	d9002c17 	ldw	r4,176(sp)
    4940:	d9801e04 	addi	r6,sp,120
    4944:	b80b883a 	mov	r5,r23
    4948:	0009a080 	call	9a08 <__sprint_r>
    494c:	1039c91e 	bne	r2,zero,3074 <___vfprintf_internal_r+0x408>
    4950:	d8802617 	ldw	r2,152(sp)
    4954:	d9403317 	ldw	r5,204(sp)
    4958:	d8c02017 	ldw	r3,128(sp)
    495c:	da000404 	addi	r8,sp,16
    4960:	2885c83a 	sub	r2,r5,r2
    4964:	003dfb06 	br	4154 <___vfprintf_internal_r+0x14e8>
    4968:	9080004c 	andi	r2,r18,1
    496c:	103e8f1e 	bne	r2,zero,43ac <___vfprintf_internal_r+0x1740>
    4970:	d8802117 	ldw	r2,132(sp)
    4974:	003e9e06 	br	43f0 <___vfprintf_internal_r+0x1784>
    4978:	1025883a 	mov	r18,r2
    497c:	0039883a 	mov	fp,zero
    4980:	00800084 	movi	r2,2
    4984:	003fd306 	br	48d4 <___vfprintf_internal_r+0x1c68>
    4988:	07000b44 	movi	fp,45
    498c:	df002785 	stb	fp,158(sp)
    4990:	003a4006 	br	3294 <___vfprintf_internal_r+0x628>
    4994:	00c00b44 	movi	r3,45
    4998:	d8c02785 	stb	r3,158(sp)
    499c:	d8802a15 	stw	r2,168(sp)
    49a0:	dc802b17 	ldw	r18,172(sp)
    49a4:	d8002915 	stw	zero,164(sp)
    49a8:	07000b44 	movi	fp,45
    49ac:	003a8006 	br	33b0 <___vfprintf_internal_r+0x744>
    49b0:	04000074 	movhi	r16,1
    49b4:	84061b04 	addi	r16,r16,6252
    49b8:	003f4706 	br	46d8 <___vfprintf_internal_r+0x1a6c>
    49bc:	d8c02d17 	ldw	r3,180(sp)
    49c0:	d9002f17 	ldw	r4,188(sp)
    49c4:	18800017 	ldw	r2,0(r3)
    49c8:	18c00104 	addi	r3,r3,4
    49cc:	d8c02d15 	stw	r3,180(sp)
    49d0:	11000015 	stw	r4,0(r2)
    49d4:	0038dd06 	br	2d4c <___vfprintf_internal_r+0xe0>
    49d8:	dd802617 	ldw	r22,152(sp)
    49dc:	00bfff44 	movi	r2,-3
    49e0:	b0801c16 	blt	r22,r2,4a54 <___vfprintf_internal_r+0x1de8>
    49e4:	d9402917 	ldw	r5,164(sp)
    49e8:	2d801a16 	blt	r5,r22,4a54 <___vfprintf_internal_r+0x1de8>
    49ec:	dd803215 	stw	r22,200(sp)
    49f0:	003e8906 	br	4418 <___vfprintf_internal_r+0x17ac>
    49f4:	01000074 	movhi	r4,1
    49f8:	21062884 	addi	r4,r4,6306
    49fc:	d9002b15 	stw	r4,172(sp)
    4a00:	003c9106 	br	3c48 <___vfprintf_internal_r+0xfdc>
    4a04:	e005883a 	mov	r2,fp
    4a08:	003e7906 	br	43f0 <___vfprintf_internal_r+0x1784>
    4a0c:	d9402917 	ldw	r5,164(sp)
    4a10:	df002783 	ldbu	fp,158(sp)
    4a14:	dcc02d15 	stw	r19,180(sp)
    4a18:	d9402a15 	stw	r5,168(sp)
    4a1c:	d9402e15 	stw	r5,184(sp)
    4a20:	d8002915 	stw	zero,164(sp)
    4a24:	d8003215 	stw	zero,200(sp)
    4a28:	003a5d06 	br	33a0 <___vfprintf_internal_r+0x734>
    4a2c:	9080004c 	andi	r2,r18,1
    4a30:	0039883a 	mov	fp,zero
    4a34:	10000426 	beq	r2,zero,4a48 <___vfprintf_internal_r+0x1ddc>
    4a38:	00800c04 	movi	r2,48
    4a3c:	dc001dc4 	addi	r16,sp,119
    4a40:	d8801dc5 	stb	r2,119(sp)
    4a44:	003b8006 	br	3848 <___vfprintf_internal_r+0xbdc>
    4a48:	d8002e15 	stw	zero,184(sp)
    4a4c:	dc001e04 	addi	r16,sp,120
    4a50:	003a4d06 	br	3388 <___vfprintf_internal_r+0x71c>
    4a54:	8c7fff84 	addi	r17,r17,-2
    4a58:	b5bfffc4 	addi	r22,r22,-1
    4a5c:	dd802615 	stw	r22,152(sp)
    4a60:	dc4022c5 	stb	r17,139(sp)
    4a64:	b000bf16 	blt	r22,zero,4d64 <___vfprintf_internal_r+0x20f8>
    4a68:	00800ac4 	movi	r2,43
    4a6c:	d8802305 	stb	r2,140(sp)
    4a70:	00800244 	movi	r2,9
    4a74:	15807016 	blt	r2,r22,4c38 <___vfprintf_internal_r+0x1fcc>
    4a78:	00800c04 	movi	r2,48
    4a7c:	b5800c04 	addi	r22,r22,48
    4a80:	d8802345 	stb	r2,141(sp)
    4a84:	dd802385 	stb	r22,142(sp)
    4a88:	d88023c4 	addi	r2,sp,143
    4a8c:	df0022c4 	addi	fp,sp,139
    4a90:	d8c03317 	ldw	r3,204(sp)
    4a94:	1739c83a 	sub	fp,r2,fp
    4a98:	d9003317 	ldw	r4,204(sp)
    4a9c:	e0c7883a 	add	r3,fp,r3
    4aa0:	df003a15 	stw	fp,232(sp)
    4aa4:	d8c02e15 	stw	r3,184(sp)
    4aa8:	00800044 	movi	r2,1
    4aac:	1100b30e 	bge	r2,r4,4d7c <___vfprintf_internal_r+0x2110>
    4ab0:	d8c02e17 	ldw	r3,184(sp)
    4ab4:	18c00044 	addi	r3,r3,1
    4ab8:	d8c02e15 	stw	r3,184(sp)
    4abc:	1805883a 	mov	r2,r3
    4ac0:	1800ac16 	blt	r3,zero,4d74 <___vfprintf_internal_r+0x2108>
    4ac4:	d8003215 	stw	zero,200(sp)
    4ac8:	003e5d06 	br	4440 <___vfprintf_internal_r+0x17d4>
    4acc:	d9002c17 	ldw	r4,176(sp)
    4ad0:	d9801e04 	addi	r6,sp,120
    4ad4:	b80b883a 	mov	r5,r23
    4ad8:	0009a080 	call	9a08 <__sprint_r>
    4adc:	1039651e 	bne	r2,zero,3074 <___vfprintf_internal_r+0x408>
    4ae0:	dc402617 	ldw	r17,152(sp)
    4ae4:	d8c02017 	ldw	r3,128(sp)
    4ae8:	d8801f17 	ldw	r2,124(sp)
    4aec:	da000404 	addi	r8,sp,16
    4af0:	003ed606 	br	464c <___vfprintf_internal_r+0x19e0>
    4af4:	582b883a 	mov	r21,r11
    4af8:	d8002915 	stw	zero,164(sp)
    4afc:	0038bd06 	br	2df4 <___vfprintf_internal_r+0x188>
    4b00:	d8802917 	ldw	r2,164(sp)
    4b04:	103e071e 	bne	r2,zero,4324 <___vfprintf_internal_r+0x16b8>
    4b08:	dc002915 	stw	r16,164(sp)
    4b0c:	003e0506 	br	4324 <___vfprintf_internal_r+0x16b8>
    4b10:	d9002917 	ldw	r4,164(sp)
    4b14:	20c00044 	addi	r3,r4,1
    4b18:	003e0f06 	br	4358 <___vfprintf_internal_r+0x16ec>
    4b1c:	01400184 	movi	r5,6
    4b20:	d9402915 	stw	r5,164(sp)
    4b24:	003dff06 	br	4324 <___vfprintf_internal_r+0x16b8>
    4b28:	d8802104 	addi	r2,sp,132
    4b2c:	d8800315 	stw	r2,12(sp)
    4b30:	d8802504 	addi	r2,sp,148
    4b34:	d8800215 	stw	r2,8(sp)
    4b38:	d8802604 	addi	r2,sp,152
    4b3c:	d8800115 	stw	r2,4(sp)
    4b40:	d8802917 	ldw	r2,164(sp)
    4b44:	d9403617 	ldw	r5,216(sp)
    4b48:	d9002c17 	ldw	r4,176(sp)
    4b4c:	d8800015 	stw	r2,0(sp)
    4b50:	01c000c4 	movi	r7,3
    4b54:	980d883a 	mov	r6,r19
    4b58:	da003d15 	stw	r8,244(sp)
    4b5c:	00052900 	call	5290 <_dtoa_r>
    4b60:	d8c02917 	ldw	r3,164(sp)
    4b64:	da003d17 	ldw	r8,244(sp)
    4b68:	1021883a 	mov	r16,r2
    4b6c:	10f9883a 	add	fp,r2,r3
    4b70:	81000007 	ldb	r4,0(r16)
    4b74:	00800c04 	movi	r2,48
    4b78:	20805e26 	beq	r4,r2,4cf4 <___vfprintf_internal_r+0x2088>
    4b7c:	d8c02617 	ldw	r3,152(sp)
    4b80:	e0f9883a 	add	fp,fp,r3
    4b84:	003e0a06 	br	43b0 <___vfprintf_internal_r+0x1744>
    4b88:	00c00b44 	movi	r3,45
    4b8c:	24e0003c 	xorhi	r19,r4,32768
    4b90:	d8c02a05 	stb	r3,168(sp)
    4b94:	003de906 	br	433c <___vfprintf_internal_r+0x16d0>
    4b98:	d8c03217 	ldw	r3,200(sp)
    4b9c:	00c07a0e 	bge	zero,r3,4d88 <___vfprintf_internal_r+0x211c>
    4ba0:	00800044 	movi	r2,1
    4ba4:	d9003317 	ldw	r4,204(sp)
    4ba8:	1105883a 	add	r2,r2,r4
    4bac:	d8802e15 	stw	r2,184(sp)
    4bb0:	10004e16 	blt	r2,zero,4cec <___vfprintf_internal_r+0x2080>
    4bb4:	044019c4 	movi	r17,103
    4bb8:	003e2106 	br	4440 <___vfprintf_internal_r+0x17d4>
    4bbc:	d9002917 	ldw	r4,164(sp)
    4bc0:	d8802104 	addi	r2,sp,132
    4bc4:	d8800315 	stw	r2,12(sp)
    4bc8:	d9000015 	stw	r4,0(sp)
    4bcc:	d8802504 	addi	r2,sp,148
    4bd0:	d9403617 	ldw	r5,216(sp)
    4bd4:	d9002c17 	ldw	r4,176(sp)
    4bd8:	d8800215 	stw	r2,8(sp)
    4bdc:	d8802604 	addi	r2,sp,152
    4be0:	d8800115 	stw	r2,4(sp)
    4be4:	01c000c4 	movi	r7,3
    4be8:	980d883a 	mov	r6,r19
    4bec:	da003d15 	stw	r8,244(sp)
    4bf0:	00052900 	call	5290 <_dtoa_r>
    4bf4:	d8c02917 	ldw	r3,164(sp)
    4bf8:	da003d17 	ldw	r8,244(sp)
    4bfc:	1021883a 	mov	r16,r2
    4c00:	00801184 	movi	r2,70
    4c04:	80f9883a 	add	fp,r16,r3
    4c08:	88bfd926 	beq	r17,r2,4b70 <___vfprintf_internal_r+0x1f04>
    4c0c:	003de806 	br	43b0 <___vfprintf_internal_r+0x1744>
    4c10:	d9002917 	ldw	r4,164(sp)
    4c14:	00c04d0e 	bge	zero,r3,4d4c <___vfprintf_internal_r+0x20e0>
    4c18:	2000441e 	bne	r4,zero,4d2c <___vfprintf_internal_r+0x20c0>
    4c1c:	9480004c 	andi	r18,r18,1
    4c20:	9000421e 	bne	r18,zero,4d2c <___vfprintf_internal_r+0x20c0>
    4c24:	1805883a 	mov	r2,r3
    4c28:	18007016 	blt	r3,zero,4dec <___vfprintf_internal_r+0x2180>
    4c2c:	d8c03217 	ldw	r3,200(sp)
    4c30:	d8c02e15 	stw	r3,184(sp)
    4c34:	003e0206 	br	4440 <___vfprintf_internal_r+0x17d4>
    4c38:	df0022c4 	addi	fp,sp,139
    4c3c:	dc002915 	stw	r16,164(sp)
    4c40:	4027883a 	mov	r19,r8
    4c44:	e021883a 	mov	r16,fp
    4c48:	b009883a 	mov	r4,r22
    4c4c:	01400284 	movi	r5,10
    4c50:	00020dc0 	call	20dc <__modsi3>
    4c54:	10800c04 	addi	r2,r2,48
    4c58:	843fffc4 	addi	r16,r16,-1
    4c5c:	b009883a 	mov	r4,r22
    4c60:	01400284 	movi	r5,10
    4c64:	80800005 	stb	r2,0(r16)
    4c68:	00020580 	call	2058 <__divsi3>
    4c6c:	102d883a 	mov	r22,r2
    4c70:	00800244 	movi	r2,9
    4c74:	15bff416 	blt	r2,r22,4c48 <___vfprintf_internal_r+0x1fdc>
    4c78:	9811883a 	mov	r8,r19
    4c7c:	b0800c04 	addi	r2,r22,48
    4c80:	8027883a 	mov	r19,r16
    4c84:	997fffc4 	addi	r5,r19,-1
    4c88:	98bfffc5 	stb	r2,-1(r19)
    4c8c:	dc002917 	ldw	r16,164(sp)
    4c90:	2f006a2e 	bgeu	r5,fp,4e3c <___vfprintf_internal_r+0x21d0>
    4c94:	d9c02384 	addi	r7,sp,142
    4c98:	3ccfc83a 	sub	r7,r7,r19
    4c9c:	d9002344 	addi	r4,sp,141
    4ca0:	e1cf883a 	add	r7,fp,r7
    4ca4:	00000106 	br	4cac <___vfprintf_internal_r+0x2040>
    4ca8:	28800003 	ldbu	r2,0(r5)
    4cac:	20800005 	stb	r2,0(r4)
    4cb0:	21000044 	addi	r4,r4,1
    4cb4:	29400044 	addi	r5,r5,1
    4cb8:	393ffb1e 	bne	r7,r4,4ca8 <___vfprintf_internal_r+0x203c>
    4cbc:	d8802304 	addi	r2,sp,140
    4cc0:	14c5c83a 	sub	r2,r2,r19
    4cc4:	d8c02344 	addi	r3,sp,141
    4cc8:	1885883a 	add	r2,r3,r2
    4ccc:	003f7006 	br	4a90 <___vfprintf_internal_r+0x1e24>
    4cd0:	0005883a 	mov	r2,zero
    4cd4:	003f0f06 	br	4914 <___vfprintf_internal_r+0x1ca8>
    4cd8:	d8c03217 	ldw	r3,200(sp)
    4cdc:	18c00044 	addi	r3,r3,1
    4ce0:	d8c02e15 	stw	r3,184(sp)
    4ce4:	1805883a 	mov	r2,r3
    4ce8:	183fb20e 	bge	r3,zero,4bb4 <___vfprintf_internal_r+0x1f48>
    4cec:	0005883a 	mov	r2,zero
    4cf0:	003fb006 	br	4bb4 <___vfprintf_internal_r+0x1f48>
    4cf4:	d9003617 	ldw	r4,216(sp)
    4cf8:	000d883a 	mov	r6,zero
    4cfc:	000f883a 	mov	r7,zero
    4d00:	980b883a 	mov	r5,r19
    4d04:	d8c03c15 	stw	r3,240(sp)
    4d08:	da003d15 	stw	r8,244(sp)
    4d0c:	000d4cc0 	call	d4cc <__eqdf2>
    4d10:	d8c03c17 	ldw	r3,240(sp)
    4d14:	da003d17 	ldw	r8,244(sp)
    4d18:	103f9826 	beq	r2,zero,4b7c <___vfprintf_internal_r+0x1f10>
    4d1c:	00800044 	movi	r2,1
    4d20:	10c7c83a 	sub	r3,r2,r3
    4d24:	d8c02615 	stw	r3,152(sp)
    4d28:	003f9506 	br	4b80 <___vfprintf_internal_r+0x1f14>
    4d2c:	d9002917 	ldw	r4,164(sp)
    4d30:	d8c03217 	ldw	r3,200(sp)
    4d34:	20800044 	addi	r2,r4,1
    4d38:	1885883a 	add	r2,r3,r2
    4d3c:	d8802e15 	stw	r2,184(sp)
    4d40:	103dbf0e 	bge	r2,zero,4440 <___vfprintf_internal_r+0x17d4>
    4d44:	0005883a 	mov	r2,zero
    4d48:	003dbd06 	br	4440 <___vfprintf_internal_r+0x17d4>
    4d4c:	2000211e 	bne	r4,zero,4dd4 <___vfprintf_internal_r+0x2168>
    4d50:	9480004c 	andi	r18,r18,1
    4d54:	90001f1e 	bne	r18,zero,4dd4 <___vfprintf_internal_r+0x2168>
    4d58:	00800044 	movi	r2,1
    4d5c:	d8802e15 	stw	r2,184(sp)
    4d60:	003db706 	br	4440 <___vfprintf_internal_r+0x17d4>
    4d64:	00800b44 	movi	r2,45
    4d68:	05adc83a 	sub	r22,zero,r22
    4d6c:	d8802305 	stb	r2,140(sp)
    4d70:	003f3f06 	br	4a70 <___vfprintf_internal_r+0x1e04>
    4d74:	0005883a 	mov	r2,zero
    4d78:	003f5206 	br	4ac4 <___vfprintf_internal_r+0x1e58>
    4d7c:	90a4703a 	and	r18,r18,r2
    4d80:	903f4e26 	beq	r18,zero,4abc <___vfprintf_internal_r+0x1e50>
    4d84:	003f4a06 	br	4ab0 <___vfprintf_internal_r+0x1e44>
    4d88:	00800084 	movi	r2,2
    4d8c:	10c5c83a 	sub	r2,r2,r3
    4d90:	003f8406 	br	4ba4 <___vfprintf_internal_r+0x1f38>
    4d94:	d8802d17 	ldw	r2,180(sp)
    4d98:	d9002d17 	ldw	r4,180(sp)
    4d9c:	ac400043 	ldbu	r17,1(r21)
    4da0:	10800017 	ldw	r2,0(r2)
    4da4:	582b883a 	mov	r21,r11
    4da8:	d8802915 	stw	r2,164(sp)
    4dac:	20800104 	addi	r2,r4,4
    4db0:	d9002917 	ldw	r4,164(sp)
    4db4:	d8802d15 	stw	r2,180(sp)
    4db8:	203e7a0e 	bge	r4,zero,47a4 <___vfprintf_internal_r+0x1b38>
    4dbc:	8c403fcc 	andi	r17,r17,255
    4dc0:	00bfffc4 	movi	r2,-1
    4dc4:	8c40201c 	xori	r17,r17,128
    4dc8:	d8802915 	stw	r2,164(sp)
    4dcc:	8c7fe004 	addi	r17,r17,-128
    4dd0:	00380706 	br	2df0 <___vfprintf_internal_r+0x184>
    4dd4:	d8c02917 	ldw	r3,164(sp)
    4dd8:	18c00084 	addi	r3,r3,2
    4ddc:	d8c02e15 	stw	r3,184(sp)
    4de0:	1805883a 	mov	r2,r3
    4de4:	183d960e 	bge	r3,zero,4440 <___vfprintf_internal_r+0x17d4>
    4de8:	003fd606 	br	4d44 <___vfprintf_internal_r+0x20d8>
    4dec:	0005883a 	mov	r2,zero
    4df0:	003f8e06 	br	4c2c <___vfprintf_internal_r+0x1fc0>
    4df4:	9080004c 	andi	r2,r18,1
    4df8:	103f811e 	bne	r2,zero,4c00 <___vfprintf_internal_r+0x1f94>
    4dfc:	d8802117 	ldw	r2,132(sp)
    4e00:	1405c83a 	sub	r2,r2,r16
    4e04:	d8803315 	stw	r2,204(sp)
    4e08:	b47ef326 	beq	r22,r17,49d8 <___vfprintf_internal_r+0x1d6c>
    4e0c:	dd802617 	ldw	r22,152(sp)
    4e10:	003f1106 	br	4a58 <___vfprintf_internal_r+0x1dec>
    4e14:	d9c02785 	stb	r7,158(sp)
    4e18:	00390406 	br	322c <___vfprintf_internal_r+0x5c0>
    4e1c:	d9c02785 	stb	r7,158(sp)
    4e20:	0038d306 	br	3170 <___vfprintf_internal_r+0x504>
    4e24:	d9c02785 	stb	r7,158(sp)
    4e28:	003a6106 	br	37b0 <___vfprintf_internal_r+0xb44>
    4e2c:	d9c02785 	stb	r7,158(sp)
    4e30:	003af806 	br	3a14 <___vfprintf_internal_r+0xda8>
    4e34:	0005883a 	mov	r2,zero
    4e38:	003d7e06 	br	4434 <___vfprintf_internal_r+0x17c8>
    4e3c:	d8802344 	addi	r2,sp,141
    4e40:	003f1306 	br	4a90 <___vfprintf_internal_r+0x1e24>
    4e44:	d9c02785 	stb	r7,158(sp)
    4e48:	00392306 	br	32d8 <___vfprintf_internal_r+0x66c>
    4e4c:	d9c02785 	stb	r7,158(sp)
    4e50:	003aa906 	br	38f8 <___vfprintf_internal_r+0xc8c>
    4e54:	d9c02785 	stb	r7,158(sp)
    4e58:	003a3d06 	br	3750 <___vfprintf_internal_r+0xae4>
    4e5c:	d9c02785 	stb	r7,158(sp)
    4e60:	003aca06 	br	398c <___vfprintf_internal_r+0xd20>

00004e64 <__vfprintf_internal>:
    4e64:	00800074 	movhi	r2,1
    4e68:	108d8304 	addi	r2,r2,13836
    4e6c:	300f883a 	mov	r7,r6
    4e70:	280d883a 	mov	r6,r5
    4e74:	200b883a 	mov	r5,r4
    4e78:	11000017 	ldw	r4,0(r2)
    4e7c:	0002c6c1 	jmpi	2c6c <___vfprintf_internal_r>

00004e80 <__sbprintf>:
    4e80:	2880030b 	ldhu	r2,12(r5)
    4e84:	2ac01917 	ldw	r11,100(r5)
    4e88:	2a80038b 	ldhu	r10,14(r5)
    4e8c:	2a400717 	ldw	r9,28(r5)
    4e90:	2a000917 	ldw	r8,36(r5)
    4e94:	defee204 	addi	sp,sp,-1144
    4e98:	00c10004 	movi	r3,1024
    4e9c:	dc011a15 	stw	r16,1128(sp)
    4ea0:	10bfff4c 	andi	r2,r2,65533
    4ea4:	2821883a 	mov	r16,r5
    4ea8:	d8cb883a 	add	r5,sp,r3
    4eac:	dc811c15 	stw	r18,1136(sp)
    4eb0:	dc411b15 	stw	r17,1132(sp)
    4eb4:	dfc11d15 	stw	ra,1140(sp)
    4eb8:	2025883a 	mov	r18,r4
    4ebc:	d881030d 	sth	r2,1036(sp)
    4ec0:	dac11915 	stw	r11,1124(sp)
    4ec4:	da81038d 	sth	r10,1038(sp)
    4ec8:	da410715 	stw	r9,1052(sp)
    4ecc:	da010915 	stw	r8,1060(sp)
    4ed0:	dec10015 	stw	sp,1024(sp)
    4ed4:	dec10415 	stw	sp,1040(sp)
    4ed8:	d8c10215 	stw	r3,1032(sp)
    4edc:	d8c10515 	stw	r3,1044(sp)
    4ee0:	d8010615 	stw	zero,1048(sp)
    4ee4:	0002c6c0 	call	2c6c <___vfprintf_internal_r>
    4ee8:	1023883a 	mov	r17,r2
    4eec:	10000416 	blt	r2,zero,4f00 <__sbprintf+0x80>
    4ef0:	d9410004 	addi	r5,sp,1024
    4ef4:	9009883a 	mov	r4,r18
    4ef8:	0006b340 	call	6b34 <_fflush_r>
    4efc:	10000d1e 	bne	r2,zero,4f34 <__sbprintf+0xb4>
    4f00:	d881030b 	ldhu	r2,1036(sp)
    4f04:	1080100c 	andi	r2,r2,64
    4f08:	10000326 	beq	r2,zero,4f18 <__sbprintf+0x98>
    4f0c:	8080030b 	ldhu	r2,12(r16)
    4f10:	10801014 	ori	r2,r2,64
    4f14:	8080030d 	sth	r2,12(r16)
    4f18:	8805883a 	mov	r2,r17
    4f1c:	dfc11d17 	ldw	ra,1140(sp)
    4f20:	dc811c17 	ldw	r18,1136(sp)
    4f24:	dc411b17 	ldw	r17,1132(sp)
    4f28:	dc011a17 	ldw	r16,1128(sp)
    4f2c:	dec11e04 	addi	sp,sp,1144
    4f30:	f800283a 	ret
    4f34:	047fffc4 	movi	r17,-1
    4f38:	003ff106 	br	4f00 <__sbprintf+0x80>

00004f3c <__swsetup_r>:
    4f3c:	00800074 	movhi	r2,1
    4f40:	defffd04 	addi	sp,sp,-12
    4f44:	108d8304 	addi	r2,r2,13836
    4f48:	dc400115 	stw	r17,4(sp)
    4f4c:	2023883a 	mov	r17,r4
    4f50:	11000017 	ldw	r4,0(r2)
    4f54:	dc000015 	stw	r16,0(sp)
    4f58:	dfc00215 	stw	ra,8(sp)
    4f5c:	2821883a 	mov	r16,r5
    4f60:	20000226 	beq	r4,zero,4f6c <__swsetup_r+0x30>
    4f64:	20800e17 	ldw	r2,56(r4)
    4f68:	10003126 	beq	r2,zero,5030 <__swsetup_r+0xf4>
    4f6c:	8080030b 	ldhu	r2,12(r16)
    4f70:	10c0020c 	andi	r3,r2,8
    4f74:	1009883a 	mov	r4,r2
    4f78:	18000f26 	beq	r3,zero,4fb8 <__swsetup_r+0x7c>
    4f7c:	80c00417 	ldw	r3,16(r16)
    4f80:	18001526 	beq	r3,zero,4fd8 <__swsetup_r+0x9c>
    4f84:	1100004c 	andi	r4,r2,1
    4f88:	20001c1e 	bne	r4,zero,4ffc <__swsetup_r+0xc0>
    4f8c:	1080008c 	andi	r2,r2,2
    4f90:	1000291e 	bne	r2,zero,5038 <__swsetup_r+0xfc>
    4f94:	80800517 	ldw	r2,20(r16)
    4f98:	80800215 	stw	r2,8(r16)
    4f9c:	18001c26 	beq	r3,zero,5010 <__swsetup_r+0xd4>
    4fa0:	0005883a 	mov	r2,zero
    4fa4:	dfc00217 	ldw	ra,8(sp)
    4fa8:	dc400117 	ldw	r17,4(sp)
    4fac:	dc000017 	ldw	r16,0(sp)
    4fb0:	dec00304 	addi	sp,sp,12
    4fb4:	f800283a 	ret
    4fb8:	2080040c 	andi	r2,r4,16
    4fbc:	10002e26 	beq	r2,zero,5078 <__swsetup_r+0x13c>
    4fc0:	2080010c 	andi	r2,r4,4
    4fc4:	10001e1e 	bne	r2,zero,5040 <__swsetup_r+0x104>
    4fc8:	80c00417 	ldw	r3,16(r16)
    4fcc:	20800214 	ori	r2,r4,8
    4fd0:	8080030d 	sth	r2,12(r16)
    4fd4:	183feb1e 	bne	r3,zero,4f84 <__swsetup_r+0x48>
    4fd8:	1100a00c 	andi	r4,r2,640
    4fdc:	01408004 	movi	r5,512
    4fe0:	217fe826 	beq	r4,r5,4f84 <__swsetup_r+0x48>
    4fe4:	800b883a 	mov	r5,r16
    4fe8:	8809883a 	mov	r4,r17
    4fec:	0007ab40 	call	7ab4 <__smakebuf_r>
    4ff0:	8080030b 	ldhu	r2,12(r16)
    4ff4:	80c00417 	ldw	r3,16(r16)
    4ff8:	003fe206 	br	4f84 <__swsetup_r+0x48>
    4ffc:	80800517 	ldw	r2,20(r16)
    5000:	80000215 	stw	zero,8(r16)
    5004:	0085c83a 	sub	r2,zero,r2
    5008:	80800615 	stw	r2,24(r16)
    500c:	183fe41e 	bne	r3,zero,4fa0 <__swsetup_r+0x64>
    5010:	80c0030b 	ldhu	r3,12(r16)
    5014:	0005883a 	mov	r2,zero
    5018:	1900200c 	andi	r4,r3,128
    501c:	203fe126 	beq	r4,zero,4fa4 <__swsetup_r+0x68>
    5020:	18c01014 	ori	r3,r3,64
    5024:	80c0030d 	sth	r3,12(r16)
    5028:	00bfffc4 	movi	r2,-1
    502c:	003fdd06 	br	4fa4 <__swsetup_r+0x68>
    5030:	0006f100 	call	6f10 <__sinit>
    5034:	003fcd06 	br	4f6c <__swsetup_r+0x30>
    5038:	0005883a 	mov	r2,zero
    503c:	003fd606 	br	4f98 <__swsetup_r+0x5c>
    5040:	81400c17 	ldw	r5,48(r16)
    5044:	28000626 	beq	r5,zero,5060 <__swsetup_r+0x124>
    5048:	80801004 	addi	r2,r16,64
    504c:	28800326 	beq	r5,r2,505c <__swsetup_r+0x120>
    5050:	8809883a 	mov	r4,r17
    5054:	00070840 	call	7084 <_free_r>
    5058:	8100030b 	ldhu	r4,12(r16)
    505c:	80000c15 	stw	zero,48(r16)
    5060:	80c00417 	ldw	r3,16(r16)
    5064:	00bff6c4 	movi	r2,-37
    5068:	1108703a 	and	r4,r2,r4
    506c:	80000115 	stw	zero,4(r16)
    5070:	80c00015 	stw	r3,0(r16)
    5074:	003fd506 	br	4fcc <__swsetup_r+0x90>
    5078:	00800244 	movi	r2,9
    507c:	88800015 	stw	r2,0(r17)
    5080:	20801014 	ori	r2,r4,64
    5084:	8080030d 	sth	r2,12(r16)
    5088:	00bfffc4 	movi	r2,-1
    508c:	003fc506 	br	4fa4 <__swsetup_r+0x68>

00005090 <quorem>:
    5090:	defff704 	addi	sp,sp,-36
    5094:	dc800215 	stw	r18,8(sp)
    5098:	20800417 	ldw	r2,16(r4)
    509c:	2c800417 	ldw	r18,16(r5)
    50a0:	dfc00815 	stw	ra,32(sp)
    50a4:	ddc00715 	stw	r23,28(sp)
    50a8:	dd800615 	stw	r22,24(sp)
    50ac:	dd400515 	stw	r21,20(sp)
    50b0:	dd000415 	stw	r20,16(sp)
    50b4:	dcc00315 	stw	r19,12(sp)
    50b8:	dc400115 	stw	r17,4(sp)
    50bc:	dc000015 	stw	r16,0(sp)
    50c0:	14807116 	blt	r2,r18,5288 <quorem+0x1f8>
    50c4:	94bfffc4 	addi	r18,r18,-1
    50c8:	94ad883a 	add	r22,r18,r18
    50cc:	b5ad883a 	add	r22,r22,r22
    50d0:	2c400504 	addi	r17,r5,20
    50d4:	8da9883a 	add	r20,r17,r22
    50d8:	25400504 	addi	r21,r4,20
    50dc:	282f883a 	mov	r23,r5
    50e0:	adad883a 	add	r22,r21,r22
    50e4:	a1400017 	ldw	r5,0(r20)
    50e8:	2021883a 	mov	r16,r4
    50ec:	b1000017 	ldw	r4,0(r22)
    50f0:	29400044 	addi	r5,r5,1
    50f4:	00021500 	call	2150 <__udivsi3>
    50f8:	1027883a 	mov	r19,r2
    50fc:	10002c26 	beq	r2,zero,51b0 <quorem+0x120>
    5100:	a813883a 	mov	r9,r21
    5104:	880b883a 	mov	r5,r17
    5108:	0009883a 	mov	r4,zero
    510c:	000d883a 	mov	r6,zero
    5110:	2a000017 	ldw	r8,0(r5)
    5114:	49c00017 	ldw	r7,0(r9)
    5118:	29400104 	addi	r5,r5,4
    511c:	40bfffcc 	andi	r2,r8,65535
    5120:	14c5383a 	mul	r2,r2,r19
    5124:	4010d43a 	srli	r8,r8,16
    5128:	38ffffcc 	andi	r3,r7,65535
    512c:	1105883a 	add	r2,r2,r4
    5130:	1008d43a 	srli	r4,r2,16
    5134:	44d1383a 	mul	r8,r8,r19
    5138:	198d883a 	add	r6,r3,r6
    513c:	10ffffcc 	andi	r3,r2,65535
    5140:	30c7c83a 	sub	r3,r6,r3
    5144:	380ed43a 	srli	r7,r7,16
    5148:	4105883a 	add	r2,r8,r4
    514c:	180dd43a 	srai	r6,r3,16
    5150:	113fffcc 	andi	r4,r2,65535
    5154:	390fc83a 	sub	r7,r7,r4
    5158:	398d883a 	add	r6,r7,r6
    515c:	300e943a 	slli	r7,r6,16
    5160:	18ffffcc 	andi	r3,r3,65535
    5164:	1008d43a 	srli	r4,r2,16
    5168:	38ceb03a 	or	r7,r7,r3
    516c:	49c00015 	stw	r7,0(r9)
    5170:	300dd43a 	srai	r6,r6,16
    5174:	4a400104 	addi	r9,r9,4
    5178:	a17fe52e 	bgeu	r20,r5,5110 <quorem+0x80>
    517c:	b0800017 	ldw	r2,0(r22)
    5180:	10000b1e 	bne	r2,zero,51b0 <quorem+0x120>
    5184:	b0bfff04 	addi	r2,r22,-4
    5188:	a880082e 	bgeu	r21,r2,51ac <quorem+0x11c>
    518c:	b0ffff17 	ldw	r3,-4(r22)
    5190:	18000326 	beq	r3,zero,51a0 <quorem+0x110>
    5194:	00000506 	br	51ac <quorem+0x11c>
    5198:	10c00017 	ldw	r3,0(r2)
    519c:	1800031e 	bne	r3,zero,51ac <quorem+0x11c>
    51a0:	10bfff04 	addi	r2,r2,-4
    51a4:	94bfffc4 	addi	r18,r18,-1
    51a8:	a8bffb36 	bltu	r21,r2,5198 <quorem+0x108>
    51ac:	84800415 	stw	r18,16(r16)
    51b0:	b80b883a 	mov	r5,r23
    51b4:	8009883a 	mov	r4,r16
    51b8:	00089e80 	call	89e8 <__mcmp>
    51bc:	10002616 	blt	r2,zero,5258 <quorem+0x1c8>
    51c0:	9cc00044 	addi	r19,r19,1
    51c4:	a805883a 	mov	r2,r21
    51c8:	000b883a 	mov	r5,zero
    51cc:	11000017 	ldw	r4,0(r2)
    51d0:	89800017 	ldw	r6,0(r17)
    51d4:	10800104 	addi	r2,r2,4
    51d8:	20ffffcc 	andi	r3,r4,65535
    51dc:	194b883a 	add	r5,r3,r5
    51e0:	30ffffcc 	andi	r3,r6,65535
    51e4:	28c7c83a 	sub	r3,r5,r3
    51e8:	300cd43a 	srli	r6,r6,16
    51ec:	2008d43a 	srli	r4,r4,16
    51f0:	180bd43a 	srai	r5,r3,16
    51f4:	18ffffcc 	andi	r3,r3,65535
    51f8:	2189c83a 	sub	r4,r4,r6
    51fc:	2149883a 	add	r4,r4,r5
    5200:	200c943a 	slli	r6,r4,16
    5204:	8c400104 	addi	r17,r17,4
    5208:	200bd43a 	srai	r5,r4,16
    520c:	30c6b03a 	or	r3,r6,r3
    5210:	10ffff15 	stw	r3,-4(r2)
    5214:	a47fed2e 	bgeu	r20,r17,51cc <quorem+0x13c>
    5218:	9485883a 	add	r2,r18,r18
    521c:	1085883a 	add	r2,r2,r2
    5220:	a887883a 	add	r3,r21,r2
    5224:	18800017 	ldw	r2,0(r3)
    5228:	10000b1e 	bne	r2,zero,5258 <quorem+0x1c8>
    522c:	18bfff04 	addi	r2,r3,-4
    5230:	a880082e 	bgeu	r21,r2,5254 <quorem+0x1c4>
    5234:	18ffff17 	ldw	r3,-4(r3)
    5238:	18000326 	beq	r3,zero,5248 <quorem+0x1b8>
    523c:	00000506 	br	5254 <quorem+0x1c4>
    5240:	10c00017 	ldw	r3,0(r2)
    5244:	1800031e 	bne	r3,zero,5254 <quorem+0x1c4>
    5248:	10bfff04 	addi	r2,r2,-4
    524c:	94bfffc4 	addi	r18,r18,-1
    5250:	a8bffb36 	bltu	r21,r2,5240 <quorem+0x1b0>
    5254:	84800415 	stw	r18,16(r16)
    5258:	9805883a 	mov	r2,r19
    525c:	dfc00817 	ldw	ra,32(sp)
    5260:	ddc00717 	ldw	r23,28(sp)
    5264:	dd800617 	ldw	r22,24(sp)
    5268:	dd400517 	ldw	r21,20(sp)
    526c:	dd000417 	ldw	r20,16(sp)
    5270:	dcc00317 	ldw	r19,12(sp)
    5274:	dc800217 	ldw	r18,8(sp)
    5278:	dc400117 	ldw	r17,4(sp)
    527c:	dc000017 	ldw	r16,0(sp)
    5280:	dec00904 	addi	sp,sp,36
    5284:	f800283a 	ret
    5288:	0005883a 	mov	r2,zero
    528c:	003ff306 	br	525c <quorem+0x1cc>

00005290 <_dtoa_r>:
    5290:	20801017 	ldw	r2,64(r4)
    5294:	deffde04 	addi	sp,sp,-136
    5298:	df002015 	stw	fp,128(sp)
    529c:	dcc01b15 	stw	r19,108(sp)
    52a0:	dc801a15 	stw	r18,104(sp)
    52a4:	dc401915 	stw	r17,100(sp)
    52a8:	dc001815 	stw	r16,96(sp)
    52ac:	dfc02115 	stw	ra,132(sp)
    52b0:	ddc01f15 	stw	r23,124(sp)
    52b4:	dd801e15 	stw	r22,120(sp)
    52b8:	dd401d15 	stw	r21,116(sp)
    52bc:	dd001c15 	stw	r20,112(sp)
    52c0:	d9c00315 	stw	r7,12(sp)
    52c4:	2039883a 	mov	fp,r4
    52c8:	3023883a 	mov	r17,r6
    52cc:	2825883a 	mov	r18,r5
    52d0:	dc002417 	ldw	r16,144(sp)
    52d4:	3027883a 	mov	r19,r6
    52d8:	10000826 	beq	r2,zero,52fc <_dtoa_r+0x6c>
    52dc:	21801117 	ldw	r6,68(r4)
    52e0:	00c00044 	movi	r3,1
    52e4:	100b883a 	mov	r5,r2
    52e8:	1986983a 	sll	r3,r3,r6
    52ec:	11800115 	stw	r6,4(r2)
    52f0:	10c00215 	stw	r3,8(r2)
    52f4:	00081c80 	call	81c8 <_Bfree>
    52f8:	e0001015 	stw	zero,64(fp)
    52fc:	88002e16 	blt	r17,zero,53b8 <_dtoa_r+0x128>
    5300:	80000015 	stw	zero,0(r16)
    5304:	889ffc2c 	andhi	r2,r17,32752
    5308:	00dffc34 	movhi	r3,32752
    530c:	10c01c26 	beq	r2,r3,5380 <_dtoa_r+0xf0>
    5310:	000d883a 	mov	r6,zero
    5314:	000f883a 	mov	r7,zero
    5318:	9009883a 	mov	r4,r18
    531c:	980b883a 	mov	r5,r19
    5320:	000d4cc0 	call	d4cc <__eqdf2>
    5324:	10002b1e 	bne	r2,zero,53d4 <_dtoa_r+0x144>
    5328:	d9c02317 	ldw	r7,140(sp)
    532c:	00800044 	movi	r2,1
    5330:	38800015 	stw	r2,0(r7)
    5334:	d8802517 	ldw	r2,148(sp)
    5338:	10019e26 	beq	r2,zero,59b4 <_dtoa_r+0x724>
    533c:	d8c02517 	ldw	r3,148(sp)
    5340:	00800074 	movhi	r2,1
    5344:	10862844 	addi	r2,r2,6305
    5348:	18800015 	stw	r2,0(r3)
    534c:	10bfffc4 	addi	r2,r2,-1
    5350:	dfc02117 	ldw	ra,132(sp)
    5354:	df002017 	ldw	fp,128(sp)
    5358:	ddc01f17 	ldw	r23,124(sp)
    535c:	dd801e17 	ldw	r22,120(sp)
    5360:	dd401d17 	ldw	r21,116(sp)
    5364:	dd001c17 	ldw	r20,112(sp)
    5368:	dcc01b17 	ldw	r19,108(sp)
    536c:	dc801a17 	ldw	r18,104(sp)
    5370:	dc401917 	ldw	r17,100(sp)
    5374:	dc001817 	ldw	r16,96(sp)
    5378:	dec02204 	addi	sp,sp,136
    537c:	f800283a 	ret
    5380:	d8c02317 	ldw	r3,140(sp)
    5384:	0089c3c4 	movi	r2,9999
    5388:	18800015 	stw	r2,0(r3)
    538c:	90017726 	beq	r18,zero,596c <_dtoa_r+0x6dc>
    5390:	00800074 	movhi	r2,1
    5394:	10863404 	addi	r2,r2,6352
    5398:	d9002517 	ldw	r4,148(sp)
    539c:	203fec26 	beq	r4,zero,5350 <_dtoa_r+0xc0>
    53a0:	10c000c7 	ldb	r3,3(r2)
    53a4:	1801781e 	bne	r3,zero,5988 <_dtoa_r+0x6f8>
    53a8:	10c000c4 	addi	r3,r2,3
    53ac:	d9802517 	ldw	r6,148(sp)
    53b0:	30c00015 	stw	r3,0(r6)
    53b4:	003fe606 	br	5350 <_dtoa_r+0xc0>
    53b8:	04e00034 	movhi	r19,32768
    53bc:	9cffffc4 	addi	r19,r19,-1
    53c0:	00800044 	movi	r2,1
    53c4:	8ce6703a 	and	r19,r17,r19
    53c8:	80800015 	stw	r2,0(r16)
    53cc:	9823883a 	mov	r17,r19
    53d0:	003fcc06 	br	5304 <_dtoa_r+0x74>
    53d4:	d8800204 	addi	r2,sp,8
    53d8:	d8800015 	stw	r2,0(sp)
    53dc:	d9c00104 	addi	r7,sp,4
    53e0:	900b883a 	mov	r5,r18
    53e4:	980d883a 	mov	r6,r19
    53e8:	e009883a 	mov	r4,fp
    53ec:	8820d53a 	srli	r16,r17,20
    53f0:	0008db40 	call	8db4 <__d2b>
    53f4:	d8800915 	stw	r2,36(sp)
    53f8:	8001651e 	bne	r16,zero,5990 <_dtoa_r+0x700>
    53fc:	dd800217 	ldw	r22,8(sp)
    5400:	dc000117 	ldw	r16,4(sp)
    5404:	00800804 	movi	r2,32
    5408:	b421883a 	add	r16,r22,r16
    540c:	80c10c84 	addi	r3,r16,1074
    5410:	10c2d10e 	bge	r2,r3,5f58 <_dtoa_r+0xcc8>
    5414:	00801004 	movi	r2,64
    5418:	81010484 	addi	r4,r16,1042
    541c:	10c7c83a 	sub	r3,r2,r3
    5420:	9108d83a 	srl	r4,r18,r4
    5424:	88e2983a 	sll	r17,r17,r3
    5428:	2448b03a 	or	r4,r4,r17
    542c:	000e8940 	call	e894 <__floatunsidf>
    5430:	017f8434 	movhi	r5,65040
    5434:	01800044 	movi	r6,1
    5438:	1009883a 	mov	r4,r2
    543c:	194b883a 	add	r5,r3,r5
    5440:	843fffc4 	addi	r16,r16,-1
    5444:	d9801115 	stw	r6,68(sp)
    5448:	000d883a 	mov	r6,zero
    544c:	01cffe34 	movhi	r7,16376
    5450:	000de3c0 	call	de3c <__subdf3>
    5454:	0198dbf4 	movhi	r6,25455
    5458:	01cff4f4 	movhi	r7,16339
    545c:	3190d844 	addi	r6,r6,17249
    5460:	39e1e9c4 	addi	r7,r7,-30809
    5464:	1009883a 	mov	r4,r2
    5468:	180b883a 	mov	r5,r3
    546c:	000d7240 	call	d724 <__muldf3>
    5470:	01a2d874 	movhi	r6,35681
    5474:	01cff1f4 	movhi	r7,16327
    5478:	31b22cc4 	addi	r6,r6,-14157
    547c:	39e28a04 	addi	r7,r7,-30168
    5480:	180b883a 	mov	r5,r3
    5484:	1009883a 	mov	r4,r2
    5488:	000c3380 	call	c338 <__adddf3>
    548c:	8009883a 	mov	r4,r16
    5490:	1029883a 	mov	r20,r2
    5494:	1823883a 	mov	r17,r3
    5498:	000e7b80 	call	e7b8 <__floatsidf>
    549c:	019427f4 	movhi	r6,20639
    54a0:	01cff4f4 	movhi	r7,16339
    54a4:	319e7ec4 	addi	r6,r6,31227
    54a8:	39d104c4 	addi	r7,r7,17427
    54ac:	1009883a 	mov	r4,r2
    54b0:	180b883a 	mov	r5,r3
    54b4:	000d7240 	call	d724 <__muldf3>
    54b8:	100d883a 	mov	r6,r2
    54bc:	180f883a 	mov	r7,r3
    54c0:	a009883a 	mov	r4,r20
    54c4:	880b883a 	mov	r5,r17
    54c8:	000c3380 	call	c338 <__adddf3>
    54cc:	1009883a 	mov	r4,r2
    54d0:	180b883a 	mov	r5,r3
    54d4:	1029883a 	mov	r20,r2
    54d8:	1823883a 	mov	r17,r3
    54dc:	000e7380 	call	e738 <__fixdfsi>
    54e0:	000d883a 	mov	r6,zero
    54e4:	000f883a 	mov	r7,zero
    54e8:	a009883a 	mov	r4,r20
    54ec:	880b883a 	mov	r5,r17
    54f0:	d8800515 	stw	r2,20(sp)
    54f4:	000d6300 	call	d630 <__ledf2>
    54f8:	10028716 	blt	r2,zero,5f18 <_dtoa_r+0xc88>
    54fc:	d8c00517 	ldw	r3,20(sp)
    5500:	00800584 	movi	r2,22
    5504:	10c27536 	bltu	r2,r3,5edc <_dtoa_r+0xc4c>
    5508:	180490fa 	slli	r2,r3,3
    550c:	00c00074 	movhi	r3,1
    5510:	18c65004 	addi	r3,r3,6464
    5514:	1885883a 	add	r2,r3,r2
    5518:	11000017 	ldw	r4,0(r2)
    551c:	11400117 	ldw	r5,4(r2)
    5520:	900d883a 	mov	r6,r18
    5524:	980f883a 	mov	r7,r19
    5528:	000d5540 	call	d554 <__gedf2>
    552c:	00828d0e 	bge	zero,r2,5f64 <_dtoa_r+0xcd4>
    5530:	d9000517 	ldw	r4,20(sp)
    5534:	d8000e15 	stw	zero,56(sp)
    5538:	213fffc4 	addi	r4,r4,-1
    553c:	d9000515 	stw	r4,20(sp)
    5540:	b42dc83a 	sub	r22,r22,r16
    5544:	b5bfffc4 	addi	r22,r22,-1
    5548:	b0026f16 	blt	r22,zero,5f08 <_dtoa_r+0xc78>
    554c:	d8000815 	stw	zero,32(sp)
    5550:	d9c00517 	ldw	r7,20(sp)
    5554:	38026416 	blt	r7,zero,5ee8 <_dtoa_r+0xc58>
    5558:	b1ed883a 	add	r22,r22,r7
    555c:	d9c00d15 	stw	r7,52(sp)
    5560:	d8000a15 	stw	zero,40(sp)
    5564:	d9800317 	ldw	r6,12(sp)
    5568:	00800244 	movi	r2,9
    556c:	11811436 	bltu	r2,r6,59c0 <_dtoa_r+0x730>
    5570:	00800144 	movi	r2,5
    5574:	1184e10e 	bge	r2,r6,68fc <_dtoa_r+0x166c>
    5578:	31bfff04 	addi	r6,r6,-4
    557c:	d9800315 	stw	r6,12(sp)
    5580:	0023883a 	mov	r17,zero
    5584:	d9800317 	ldw	r6,12(sp)
    5588:	008000c4 	movi	r2,3
    558c:	30836726 	beq	r6,r2,632c <_dtoa_r+0x109c>
    5590:	1183410e 	bge	r2,r6,6298 <_dtoa_r+0x1008>
    5594:	d9c00317 	ldw	r7,12(sp)
    5598:	00800104 	movi	r2,4
    559c:	38827c26 	beq	r7,r2,5f90 <_dtoa_r+0xd00>
    55a0:	00800144 	movi	r2,5
    55a4:	3884c41e 	bne	r7,r2,68b8 <_dtoa_r+0x1628>
    55a8:	00800044 	movi	r2,1
    55ac:	d8800b15 	stw	r2,44(sp)
    55b0:	d8c00517 	ldw	r3,20(sp)
    55b4:	d9002217 	ldw	r4,136(sp)
    55b8:	1907883a 	add	r3,r3,r4
    55bc:	19800044 	addi	r6,r3,1
    55c0:	d8c00c15 	stw	r3,48(sp)
    55c4:	d9800615 	stw	r6,24(sp)
    55c8:	0183a40e 	bge	zero,r6,645c <_dtoa_r+0x11cc>
    55cc:	d9800617 	ldw	r6,24(sp)
    55d0:	3021883a 	mov	r16,r6
    55d4:	e0001115 	stw	zero,68(fp)
    55d8:	008005c4 	movi	r2,23
    55dc:	1184c92e 	bgeu	r2,r6,6904 <_dtoa_r+0x1674>
    55e0:	00c00044 	movi	r3,1
    55e4:	00800104 	movi	r2,4
    55e8:	1085883a 	add	r2,r2,r2
    55ec:	11000504 	addi	r4,r2,20
    55f0:	180b883a 	mov	r5,r3
    55f4:	18c00044 	addi	r3,r3,1
    55f8:	313ffb2e 	bgeu	r6,r4,55e8 <_dtoa_r+0x358>
    55fc:	e1401115 	stw	r5,68(fp)
    5600:	e009883a 	mov	r4,fp
    5604:	00081200 	call	8120 <_Balloc>
    5608:	d8800715 	stw	r2,28(sp)
    560c:	e0801015 	stw	r2,64(fp)
    5610:	00800384 	movi	r2,14
    5614:	1400f736 	bltu	r2,r16,59f4 <_dtoa_r+0x764>
    5618:	8800f626 	beq	r17,zero,59f4 <_dtoa_r+0x764>
    561c:	d9c00517 	ldw	r7,20(sp)
    5620:	01c39a0e 	bge	zero,r7,648c <_dtoa_r+0x11fc>
    5624:	388003cc 	andi	r2,r7,15
    5628:	100490fa 	slli	r2,r2,3
    562c:	382bd13a 	srai	r21,r7,4
    5630:	00c00074 	movhi	r3,1
    5634:	18c65004 	addi	r3,r3,6464
    5638:	1885883a 	add	r2,r3,r2
    563c:	a8c0040c 	andi	r3,r21,16
    5640:	12400017 	ldw	r9,0(r2)
    5644:	12000117 	ldw	r8,4(r2)
    5648:	18037926 	beq	r3,zero,6430 <_dtoa_r+0x11a0>
    564c:	00800074 	movhi	r2,1
    5650:	10864604 	addi	r2,r2,6424
    5654:	11800817 	ldw	r6,32(r2)
    5658:	11c00917 	ldw	r7,36(r2)
    565c:	9009883a 	mov	r4,r18
    5660:	980b883a 	mov	r5,r19
    5664:	da001715 	stw	r8,92(sp)
    5668:	da401615 	stw	r9,88(sp)
    566c:	000cbe40 	call	cbe4 <__divdf3>
    5670:	da001717 	ldw	r8,92(sp)
    5674:	da401617 	ldw	r9,88(sp)
    5678:	ad4003cc 	andi	r21,r21,15
    567c:	040000c4 	movi	r16,3
    5680:	1023883a 	mov	r17,r2
    5684:	1829883a 	mov	r20,r3
    5688:	a8001126 	beq	r21,zero,56d0 <_dtoa_r+0x440>
    568c:	05c00074 	movhi	r23,1
    5690:	bdc64604 	addi	r23,r23,6424
    5694:	4805883a 	mov	r2,r9
    5698:	4007883a 	mov	r3,r8
    569c:	a980004c 	andi	r6,r21,1
    56a0:	1009883a 	mov	r4,r2
    56a4:	a82bd07a 	srai	r21,r21,1
    56a8:	180b883a 	mov	r5,r3
    56ac:	30000426 	beq	r6,zero,56c0 <_dtoa_r+0x430>
    56b0:	b9800017 	ldw	r6,0(r23)
    56b4:	b9c00117 	ldw	r7,4(r23)
    56b8:	84000044 	addi	r16,r16,1
    56bc:	000d7240 	call	d724 <__muldf3>
    56c0:	bdc00204 	addi	r23,r23,8
    56c4:	a83ff51e 	bne	r21,zero,569c <_dtoa_r+0x40c>
    56c8:	1013883a 	mov	r9,r2
    56cc:	1811883a 	mov	r8,r3
    56d0:	480d883a 	mov	r6,r9
    56d4:	400f883a 	mov	r7,r8
    56d8:	8809883a 	mov	r4,r17
    56dc:	a00b883a 	mov	r5,r20
    56e0:	000cbe40 	call	cbe4 <__divdf3>
    56e4:	d8800f15 	stw	r2,60(sp)
    56e8:	d8c01015 	stw	r3,64(sp)
    56ec:	d8c00e17 	ldw	r3,56(sp)
    56f0:	18000626 	beq	r3,zero,570c <_dtoa_r+0x47c>
    56f4:	d9000f17 	ldw	r4,60(sp)
    56f8:	d9401017 	ldw	r5,64(sp)
    56fc:	000d883a 	mov	r6,zero
    5700:	01cffc34 	movhi	r7,16368
    5704:	000d6300 	call	d630 <__ledf2>
    5708:	10040b16 	blt	r2,zero,6738 <_dtoa_r+0x14a8>
    570c:	8009883a 	mov	r4,r16
    5710:	000e7b80 	call	e7b8 <__floatsidf>
    5714:	d9800f17 	ldw	r6,60(sp)
    5718:	d9c01017 	ldw	r7,64(sp)
    571c:	1009883a 	mov	r4,r2
    5720:	180b883a 	mov	r5,r3
    5724:	000d7240 	call	d724 <__muldf3>
    5728:	000d883a 	mov	r6,zero
    572c:	01d00734 	movhi	r7,16412
    5730:	1009883a 	mov	r4,r2
    5734:	180b883a 	mov	r5,r3
    5738:	000c3380 	call	c338 <__adddf3>
    573c:	1021883a 	mov	r16,r2
    5740:	d8800617 	ldw	r2,24(sp)
    5744:	047f3034 	movhi	r17,64704
    5748:	1c63883a 	add	r17,r3,r17
    574c:	10031826 	beq	r2,zero,63b0 <_dtoa_r+0x1120>
    5750:	d8c00517 	ldw	r3,20(sp)
    5754:	db000617 	ldw	r12,24(sp)
    5758:	d8c01315 	stw	r3,76(sp)
    575c:	d9000b17 	ldw	r4,44(sp)
    5760:	20038f26 	beq	r4,zero,65a0 <_dtoa_r+0x1310>
    5764:	60bfffc4 	addi	r2,r12,-1
    5768:	100490fa 	slli	r2,r2,3
    576c:	00c00074 	movhi	r3,1
    5770:	18c65004 	addi	r3,r3,6464
    5774:	1885883a 	add	r2,r3,r2
    5778:	11800017 	ldw	r6,0(r2)
    577c:	11c00117 	ldw	r7,4(r2)
    5780:	d8800717 	ldw	r2,28(sp)
    5784:	0009883a 	mov	r4,zero
    5788:	014ff834 	movhi	r5,16352
    578c:	db001615 	stw	r12,88(sp)
    5790:	15c00044 	addi	r23,r2,1
    5794:	000cbe40 	call	cbe4 <__divdf3>
    5798:	800d883a 	mov	r6,r16
    579c:	880f883a 	mov	r7,r17
    57a0:	1009883a 	mov	r4,r2
    57a4:	180b883a 	mov	r5,r3
    57a8:	000de3c0 	call	de3c <__subdf3>
    57ac:	d9401017 	ldw	r5,64(sp)
    57b0:	d9000f17 	ldw	r4,60(sp)
    57b4:	102b883a 	mov	r21,r2
    57b8:	d8c01215 	stw	r3,72(sp)
    57bc:	000e7380 	call	e738 <__fixdfsi>
    57c0:	1009883a 	mov	r4,r2
    57c4:	1029883a 	mov	r20,r2
    57c8:	000e7b80 	call	e7b8 <__floatsidf>
    57cc:	d9000f17 	ldw	r4,60(sp)
    57d0:	d9401017 	ldw	r5,64(sp)
    57d4:	100d883a 	mov	r6,r2
    57d8:	180f883a 	mov	r7,r3
    57dc:	000de3c0 	call	de3c <__subdf3>
    57e0:	1823883a 	mov	r17,r3
    57e4:	d8c00717 	ldw	r3,28(sp)
    57e8:	d9401217 	ldw	r5,72(sp)
    57ec:	a2000c04 	addi	r8,r20,48
    57f0:	1021883a 	mov	r16,r2
    57f4:	1a000005 	stb	r8,0(r3)
    57f8:	800d883a 	mov	r6,r16
    57fc:	880f883a 	mov	r7,r17
    5800:	a809883a 	mov	r4,r21
    5804:	4029883a 	mov	r20,r8
    5808:	000d5540 	call	d554 <__gedf2>
    580c:	00841d16 	blt	zero,r2,6884 <_dtoa_r+0x15f4>
    5810:	800d883a 	mov	r6,r16
    5814:	880f883a 	mov	r7,r17
    5818:	0009883a 	mov	r4,zero
    581c:	014ffc34 	movhi	r5,16368
    5820:	000de3c0 	call	de3c <__subdf3>
    5824:	d9401217 	ldw	r5,72(sp)
    5828:	100d883a 	mov	r6,r2
    582c:	180f883a 	mov	r7,r3
    5830:	a809883a 	mov	r4,r21
    5834:	000d5540 	call	d554 <__gedf2>
    5838:	db001617 	ldw	r12,88(sp)
    583c:	00840e16 	blt	zero,r2,6878 <_dtoa_r+0x15e8>
    5840:	00800044 	movi	r2,1
    5844:	13006b0e 	bge	r2,r12,59f4 <_dtoa_r+0x764>
    5848:	d9000717 	ldw	r4,28(sp)
    584c:	dd800f15 	stw	r22,60(sp)
    5850:	dcc01015 	stw	r19,64(sp)
    5854:	2319883a 	add	r12,r4,r12
    5858:	dcc01217 	ldw	r19,72(sp)
    585c:	602d883a 	mov	r22,r12
    5860:	dc801215 	stw	r18,72(sp)
    5864:	b825883a 	mov	r18,r23
    5868:	00000906 	br	5890 <_dtoa_r+0x600>
    586c:	000de3c0 	call	de3c <__subdf3>
    5870:	a80d883a 	mov	r6,r21
    5874:	980f883a 	mov	r7,r19
    5878:	1009883a 	mov	r4,r2
    587c:	180b883a 	mov	r5,r3
    5880:	000d6300 	call	d630 <__ledf2>
    5884:	1003e816 	blt	r2,zero,6828 <_dtoa_r+0x1598>
    5888:	b825883a 	mov	r18,r23
    588c:	bd83e926 	beq	r23,r22,6834 <_dtoa_r+0x15a4>
    5890:	a809883a 	mov	r4,r21
    5894:	980b883a 	mov	r5,r19
    5898:	000d883a 	mov	r6,zero
    589c:	01d00934 	movhi	r7,16420
    58a0:	000d7240 	call	d724 <__muldf3>
    58a4:	000d883a 	mov	r6,zero
    58a8:	01d00934 	movhi	r7,16420
    58ac:	8009883a 	mov	r4,r16
    58b0:	880b883a 	mov	r5,r17
    58b4:	102b883a 	mov	r21,r2
    58b8:	1827883a 	mov	r19,r3
    58bc:	000d7240 	call	d724 <__muldf3>
    58c0:	180b883a 	mov	r5,r3
    58c4:	1009883a 	mov	r4,r2
    58c8:	1821883a 	mov	r16,r3
    58cc:	1023883a 	mov	r17,r2
    58d0:	000e7380 	call	e738 <__fixdfsi>
    58d4:	1009883a 	mov	r4,r2
    58d8:	1029883a 	mov	r20,r2
    58dc:	000e7b80 	call	e7b8 <__floatsidf>
    58e0:	8809883a 	mov	r4,r17
    58e4:	800b883a 	mov	r5,r16
    58e8:	100d883a 	mov	r6,r2
    58ec:	180f883a 	mov	r7,r3
    58f0:	000de3c0 	call	de3c <__subdf3>
    58f4:	a5000c04 	addi	r20,r20,48
    58f8:	a80d883a 	mov	r6,r21
    58fc:	980f883a 	mov	r7,r19
    5900:	1009883a 	mov	r4,r2
    5904:	180b883a 	mov	r5,r3
    5908:	95000005 	stb	r20,0(r18)
    590c:	1021883a 	mov	r16,r2
    5910:	1823883a 	mov	r17,r3
    5914:	000d6300 	call	d630 <__ledf2>
    5918:	bdc00044 	addi	r23,r23,1
    591c:	800d883a 	mov	r6,r16
    5920:	880f883a 	mov	r7,r17
    5924:	0009883a 	mov	r4,zero
    5928:	014ffc34 	movhi	r5,16368
    592c:	103fcf0e 	bge	r2,zero,586c <_dtoa_r+0x5dc>
    5930:	d8c01317 	ldw	r3,76(sp)
    5934:	d8c00515 	stw	r3,20(sp)
    5938:	d9400917 	ldw	r5,36(sp)
    593c:	e009883a 	mov	r4,fp
    5940:	00081c80 	call	81c8 <_Bfree>
    5944:	d9000517 	ldw	r4,20(sp)
    5948:	d9802317 	ldw	r6,140(sp)
    594c:	d9c02517 	ldw	r7,148(sp)
    5950:	b8000005 	stb	zero,0(r23)
    5954:	20800044 	addi	r2,r4,1
    5958:	30800015 	stw	r2,0(r6)
    595c:	3802aa26 	beq	r7,zero,6408 <_dtoa_r+0x1178>
    5960:	3dc00015 	stw	r23,0(r7)
    5964:	d8800717 	ldw	r2,28(sp)
    5968:	003e7906 	br	5350 <_dtoa_r+0xc0>
    596c:	00800434 	movhi	r2,16
    5970:	10bfffc4 	addi	r2,r2,-1
    5974:	88a2703a 	and	r17,r17,r2
    5978:	883e851e 	bne	r17,zero,5390 <_dtoa_r+0x100>
    597c:	00800074 	movhi	r2,1
    5980:	10863104 	addi	r2,r2,6340
    5984:	003e8406 	br	5398 <_dtoa_r+0x108>
    5988:	10c00204 	addi	r3,r2,8
    598c:	003e8706 	br	53ac <_dtoa_r+0x11c>
    5990:	01400434 	movhi	r5,16
    5994:	297fffc4 	addi	r5,r5,-1
    5998:	994a703a 	and	r5,r19,r5
    599c:	9009883a 	mov	r4,r18
    59a0:	843f0044 	addi	r16,r16,-1023
    59a4:	294ffc34 	orhi	r5,r5,16368
    59a8:	dd800217 	ldw	r22,8(sp)
    59ac:	d8001115 	stw	zero,68(sp)
    59b0:	003ea506 	br	5448 <_dtoa_r+0x1b8>
    59b4:	00800074 	movhi	r2,1
    59b8:	10862804 	addi	r2,r2,6304
    59bc:	003e6406 	br	5350 <_dtoa_r+0xc0>
    59c0:	e0001115 	stw	zero,68(fp)
    59c4:	000b883a 	mov	r5,zero
    59c8:	e009883a 	mov	r4,fp
    59cc:	00081200 	call	8120 <_Balloc>
    59d0:	01bfffc4 	movi	r6,-1
    59d4:	01c00044 	movi	r7,1
    59d8:	d8800715 	stw	r2,28(sp)
    59dc:	d9800c15 	stw	r6,48(sp)
    59e0:	e0801015 	stw	r2,64(fp)
    59e4:	d8000315 	stw	zero,12(sp)
    59e8:	d9c00b15 	stw	r7,44(sp)
    59ec:	d9800615 	stw	r6,24(sp)
    59f0:	d8002215 	stw	zero,136(sp)
    59f4:	d8800117 	ldw	r2,4(sp)
    59f8:	10008916 	blt	r2,zero,5c20 <_dtoa_r+0x990>
    59fc:	d9000517 	ldw	r4,20(sp)
    5a00:	00c00384 	movi	r3,14
    5a04:	19008616 	blt	r3,r4,5c20 <_dtoa_r+0x990>
    5a08:	200490fa 	slli	r2,r4,3
    5a0c:	00c00074 	movhi	r3,1
    5a10:	d9802217 	ldw	r6,136(sp)
    5a14:	18c65004 	addi	r3,r3,6464
    5a18:	1885883a 	add	r2,r3,r2
    5a1c:	14000017 	ldw	r16,0(r2)
    5a20:	14400117 	ldw	r17,4(r2)
    5a24:	30016316 	blt	r6,zero,5fb4 <_dtoa_r+0xd24>
    5a28:	800d883a 	mov	r6,r16
    5a2c:	880f883a 	mov	r7,r17
    5a30:	9009883a 	mov	r4,r18
    5a34:	980b883a 	mov	r5,r19
    5a38:	000cbe40 	call	cbe4 <__divdf3>
    5a3c:	180b883a 	mov	r5,r3
    5a40:	1009883a 	mov	r4,r2
    5a44:	000e7380 	call	e738 <__fixdfsi>
    5a48:	1009883a 	mov	r4,r2
    5a4c:	102b883a 	mov	r21,r2
    5a50:	000e7b80 	call	e7b8 <__floatsidf>
    5a54:	800d883a 	mov	r6,r16
    5a58:	880f883a 	mov	r7,r17
    5a5c:	1009883a 	mov	r4,r2
    5a60:	180b883a 	mov	r5,r3
    5a64:	000d7240 	call	d724 <__muldf3>
    5a68:	100d883a 	mov	r6,r2
    5a6c:	180f883a 	mov	r7,r3
    5a70:	9009883a 	mov	r4,r18
    5a74:	980b883a 	mov	r5,r19
    5a78:	000de3c0 	call	de3c <__subdf3>
    5a7c:	d9c00717 	ldw	r7,28(sp)
    5a80:	1009883a 	mov	r4,r2
    5a84:	a8800c04 	addi	r2,r21,48
    5a88:	38800005 	stb	r2,0(r7)
    5a8c:	3dc00044 	addi	r23,r7,1
    5a90:	d9c00617 	ldw	r7,24(sp)
    5a94:	01800044 	movi	r6,1
    5a98:	180b883a 	mov	r5,r3
    5a9c:	2005883a 	mov	r2,r4
    5aa0:	39803826 	beq	r7,r6,5b84 <_dtoa_r+0x8f4>
    5aa4:	000d883a 	mov	r6,zero
    5aa8:	01d00934 	movhi	r7,16420
    5aac:	000d7240 	call	d724 <__muldf3>
    5ab0:	000d883a 	mov	r6,zero
    5ab4:	000f883a 	mov	r7,zero
    5ab8:	1009883a 	mov	r4,r2
    5abc:	180b883a 	mov	r5,r3
    5ac0:	1025883a 	mov	r18,r2
    5ac4:	1827883a 	mov	r19,r3
    5ac8:	000d4cc0 	call	d4cc <__eqdf2>
    5acc:	103f9a26 	beq	r2,zero,5938 <_dtoa_r+0x6a8>
    5ad0:	d9c00617 	ldw	r7,24(sp)
    5ad4:	d8c00717 	ldw	r3,28(sp)
    5ad8:	b829883a 	mov	r20,r23
    5adc:	38bfffc4 	addi	r2,r7,-1
    5ae0:	18ad883a 	add	r22,r3,r2
    5ae4:	00000a06 	br	5b10 <_dtoa_r+0x880>
    5ae8:	000d7240 	call	d724 <__muldf3>
    5aec:	000d883a 	mov	r6,zero
    5af0:	000f883a 	mov	r7,zero
    5af4:	1009883a 	mov	r4,r2
    5af8:	180b883a 	mov	r5,r3
    5afc:	1025883a 	mov	r18,r2
    5b00:	1827883a 	mov	r19,r3
    5b04:	b829883a 	mov	r20,r23
    5b08:	000d4cc0 	call	d4cc <__eqdf2>
    5b0c:	103f8a26 	beq	r2,zero,5938 <_dtoa_r+0x6a8>
    5b10:	800d883a 	mov	r6,r16
    5b14:	880f883a 	mov	r7,r17
    5b18:	9009883a 	mov	r4,r18
    5b1c:	980b883a 	mov	r5,r19
    5b20:	000cbe40 	call	cbe4 <__divdf3>
    5b24:	180b883a 	mov	r5,r3
    5b28:	1009883a 	mov	r4,r2
    5b2c:	000e7380 	call	e738 <__fixdfsi>
    5b30:	1009883a 	mov	r4,r2
    5b34:	102b883a 	mov	r21,r2
    5b38:	000e7b80 	call	e7b8 <__floatsidf>
    5b3c:	800d883a 	mov	r6,r16
    5b40:	880f883a 	mov	r7,r17
    5b44:	1009883a 	mov	r4,r2
    5b48:	180b883a 	mov	r5,r3
    5b4c:	000d7240 	call	d724 <__muldf3>
    5b50:	100d883a 	mov	r6,r2
    5b54:	180f883a 	mov	r7,r3
    5b58:	9009883a 	mov	r4,r18
    5b5c:	980b883a 	mov	r5,r19
    5b60:	000de3c0 	call	de3c <__subdf3>
    5b64:	aa000c04 	addi	r8,r21,48
    5b68:	a2000005 	stb	r8,0(r20)
    5b6c:	000d883a 	mov	r6,zero
    5b70:	01d00934 	movhi	r7,16420
    5b74:	1009883a 	mov	r4,r2
    5b78:	180b883a 	mov	r5,r3
    5b7c:	a5c00044 	addi	r23,r20,1
    5b80:	b53fd91e 	bne	r22,r20,5ae8 <_dtoa_r+0x858>
    5b84:	100d883a 	mov	r6,r2
    5b88:	180f883a 	mov	r7,r3
    5b8c:	1009883a 	mov	r4,r2
    5b90:	180b883a 	mov	r5,r3
    5b94:	000c3380 	call	c338 <__adddf3>
    5b98:	100d883a 	mov	r6,r2
    5b9c:	180f883a 	mov	r7,r3
    5ba0:	8009883a 	mov	r4,r16
    5ba4:	880b883a 	mov	r5,r17
    5ba8:	1027883a 	mov	r19,r2
    5bac:	1825883a 	mov	r18,r3
    5bb0:	000d6300 	call	d630 <__ledf2>
    5bb4:	10000816 	blt	r2,zero,5bd8 <_dtoa_r+0x948>
    5bb8:	980d883a 	mov	r6,r19
    5bbc:	900f883a 	mov	r7,r18
    5bc0:	8009883a 	mov	r4,r16
    5bc4:	880b883a 	mov	r5,r17
    5bc8:	000d4cc0 	call	d4cc <__eqdf2>
    5bcc:	103f5a1e 	bne	r2,zero,5938 <_dtoa_r+0x6a8>
    5bd0:	ad40004c 	andi	r21,r21,1
    5bd4:	a83f5826 	beq	r21,zero,5938 <_dtoa_r+0x6a8>
    5bd8:	bd3fffc3 	ldbu	r20,-1(r23)
    5bdc:	b8bfffc4 	addi	r2,r23,-1
    5be0:	1007883a 	mov	r3,r2
    5be4:	01400e44 	movi	r5,57
    5be8:	d9800717 	ldw	r6,28(sp)
    5bec:	00000506 	br	5c04 <_dtoa_r+0x974>
    5bf0:	18ffffc4 	addi	r3,r3,-1
    5bf4:	11824726 	beq	r2,r6,6514 <_dtoa_r+0x1284>
    5bf8:	1d000003 	ldbu	r20,0(r3)
    5bfc:	102f883a 	mov	r23,r2
    5c00:	10bfffc4 	addi	r2,r2,-1
    5c04:	a1003fcc 	andi	r4,r20,255
    5c08:	2100201c 	xori	r4,r4,128
    5c0c:	213fe004 	addi	r4,r4,-128
    5c10:	217ff726 	beq	r4,r5,5bf0 <_dtoa_r+0x960>
    5c14:	a2000044 	addi	r8,r20,1
    5c18:	12000005 	stb	r8,0(r2)
    5c1c:	003f4606 	br	5938 <_dtoa_r+0x6a8>
    5c20:	d9000b17 	ldw	r4,44(sp)
    5c24:	2000c826 	beq	r4,zero,5f48 <_dtoa_r+0xcb8>
    5c28:	d9800317 	ldw	r6,12(sp)
    5c2c:	00c00044 	movi	r3,1
    5c30:	1980f90e 	bge	r3,r6,6018 <_dtoa_r+0xd88>
    5c34:	d8800617 	ldw	r2,24(sp)
    5c38:	d8c00a17 	ldw	r3,40(sp)
    5c3c:	157fffc4 	addi	r21,r2,-1
    5c40:	1d41f316 	blt	r3,r21,6410 <_dtoa_r+0x1180>
    5c44:	1d6bc83a 	sub	r21,r3,r21
    5c48:	d9c00617 	ldw	r7,24(sp)
    5c4c:	3802aa16 	blt	r7,zero,66f8 <_dtoa_r+0x1468>
    5c50:	dd000817 	ldw	r20,32(sp)
    5c54:	d8800617 	ldw	r2,24(sp)
    5c58:	d8c00817 	ldw	r3,32(sp)
    5c5c:	01400044 	movi	r5,1
    5c60:	e009883a 	mov	r4,fp
    5c64:	1887883a 	add	r3,r3,r2
    5c68:	d8c00815 	stw	r3,32(sp)
    5c6c:	b0ad883a 	add	r22,r22,r2
    5c70:	000852c0 	call	852c <__i2b>
    5c74:	1023883a 	mov	r17,r2
    5c78:	a0000826 	beq	r20,zero,5c9c <_dtoa_r+0xa0c>
    5c7c:	0580070e 	bge	zero,r22,5c9c <_dtoa_r+0xa0c>
    5c80:	a005883a 	mov	r2,r20
    5c84:	b500b916 	blt	r22,r20,5f6c <_dtoa_r+0xcdc>
    5c88:	d9000817 	ldw	r4,32(sp)
    5c8c:	a0a9c83a 	sub	r20,r20,r2
    5c90:	b0adc83a 	sub	r22,r22,r2
    5c94:	2089c83a 	sub	r4,r4,r2
    5c98:	d9000815 	stw	r4,32(sp)
    5c9c:	d9800a17 	ldw	r6,40(sp)
    5ca0:	0181810e 	bge	zero,r6,62a8 <_dtoa_r+0x1018>
    5ca4:	d9c00b17 	ldw	r7,44(sp)
    5ca8:	3800b326 	beq	r7,zero,5f78 <_dtoa_r+0xce8>
    5cac:	a800b226 	beq	r21,zero,5f78 <_dtoa_r+0xce8>
    5cb0:	880b883a 	mov	r5,r17
    5cb4:	a80d883a 	mov	r6,r21
    5cb8:	e009883a 	mov	r4,fp
    5cbc:	00087600 	call	8760 <__pow5mult>
    5cc0:	d9800917 	ldw	r6,36(sp)
    5cc4:	100b883a 	mov	r5,r2
    5cc8:	e009883a 	mov	r4,fp
    5ccc:	1023883a 	mov	r17,r2
    5cd0:	00085680 	call	8568 <__multiply>
    5cd4:	1021883a 	mov	r16,r2
    5cd8:	d8800a17 	ldw	r2,40(sp)
    5cdc:	d9400917 	ldw	r5,36(sp)
    5ce0:	e009883a 	mov	r4,fp
    5ce4:	1545c83a 	sub	r2,r2,r21
    5ce8:	d8800a15 	stw	r2,40(sp)
    5cec:	00081c80 	call	81c8 <_Bfree>
    5cf0:	d8c00a17 	ldw	r3,40(sp)
    5cf4:	18009f1e 	bne	r3,zero,5f74 <_dtoa_r+0xce4>
    5cf8:	05c00044 	movi	r23,1
    5cfc:	e009883a 	mov	r4,fp
    5d00:	b80b883a 	mov	r5,r23
    5d04:	000852c0 	call	852c <__i2b>
    5d08:	d9000d17 	ldw	r4,52(sp)
    5d0c:	102b883a 	mov	r21,r2
    5d10:	2000ce26 	beq	r4,zero,604c <_dtoa_r+0xdbc>
    5d14:	200d883a 	mov	r6,r4
    5d18:	100b883a 	mov	r5,r2
    5d1c:	e009883a 	mov	r4,fp
    5d20:	00087600 	call	8760 <__pow5mult>
    5d24:	d9800317 	ldw	r6,12(sp)
    5d28:	102b883a 	mov	r21,r2
    5d2c:	b981810e 	bge	r23,r6,6334 <_dtoa_r+0x10a4>
    5d30:	0027883a 	mov	r19,zero
    5d34:	a8800417 	ldw	r2,16(r21)
    5d38:	05c00804 	movi	r23,32
    5d3c:	10800104 	addi	r2,r2,4
    5d40:	1085883a 	add	r2,r2,r2
    5d44:	1085883a 	add	r2,r2,r2
    5d48:	a885883a 	add	r2,r21,r2
    5d4c:	11000017 	ldw	r4,0(r2)
    5d50:	00084140 	call	8414 <__hi0bits>
    5d54:	b885c83a 	sub	r2,r23,r2
    5d58:	1585883a 	add	r2,r2,r22
    5d5c:	108007cc 	andi	r2,r2,31
    5d60:	1000b326 	beq	r2,zero,6030 <_dtoa_r+0xda0>
    5d64:	00c00804 	movi	r3,32
    5d68:	1887c83a 	sub	r3,r3,r2
    5d6c:	01000104 	movi	r4,4
    5d70:	20c2cd0e 	bge	r4,r3,68a8 <_dtoa_r+0x1618>
    5d74:	00c00704 	movi	r3,28
    5d78:	1885c83a 	sub	r2,r3,r2
    5d7c:	d8c00817 	ldw	r3,32(sp)
    5d80:	a0a9883a 	add	r20,r20,r2
    5d84:	b0ad883a 	add	r22,r22,r2
    5d88:	1887883a 	add	r3,r3,r2
    5d8c:	d8c00815 	stw	r3,32(sp)
    5d90:	d9800817 	ldw	r6,32(sp)
    5d94:	0180040e 	bge	zero,r6,5da8 <_dtoa_r+0xb18>
    5d98:	800b883a 	mov	r5,r16
    5d9c:	e009883a 	mov	r4,fp
    5da0:	00088a00 	call	88a0 <__lshift>
    5da4:	1021883a 	mov	r16,r2
    5da8:	0580050e 	bge	zero,r22,5dc0 <_dtoa_r+0xb30>
    5dac:	a80b883a 	mov	r5,r21
    5db0:	b00d883a 	mov	r6,r22
    5db4:	e009883a 	mov	r4,fp
    5db8:	00088a00 	call	88a0 <__lshift>
    5dbc:	102b883a 	mov	r21,r2
    5dc0:	d9c00e17 	ldw	r7,56(sp)
    5dc4:	3801211e 	bne	r7,zero,624c <_dtoa_r+0xfbc>
    5dc8:	d9800617 	ldw	r6,24(sp)
    5dcc:	0181380e 	bge	zero,r6,62b0 <_dtoa_r+0x1020>
    5dd0:	d8c00b17 	ldw	r3,44(sp)
    5dd4:	1800ab1e 	bne	r3,zero,6084 <_dtoa_r+0xdf4>
    5dd8:	dc800717 	ldw	r18,28(sp)
    5ddc:	dcc00617 	ldw	r19,24(sp)
    5de0:	9029883a 	mov	r20,r18
    5de4:	00000206 	br	5df0 <_dtoa_r+0xb60>
    5de8:	00081f00 	call	81f0 <__multadd>
    5dec:	1021883a 	mov	r16,r2
    5df0:	a80b883a 	mov	r5,r21
    5df4:	8009883a 	mov	r4,r16
    5df8:	00050900 	call	5090 <quorem>
    5dfc:	10800c04 	addi	r2,r2,48
    5e00:	90800005 	stb	r2,0(r18)
    5e04:	94800044 	addi	r18,r18,1
    5e08:	9507c83a 	sub	r3,r18,r20
    5e0c:	000f883a 	mov	r7,zero
    5e10:	01800284 	movi	r6,10
    5e14:	800b883a 	mov	r5,r16
    5e18:	e009883a 	mov	r4,fp
    5e1c:	1cfff216 	blt	r3,r19,5de8 <_dtoa_r+0xb58>
    5e20:	1011883a 	mov	r8,r2
    5e24:	d8800617 	ldw	r2,24(sp)
    5e28:	0082370e 	bge	zero,r2,6708 <_dtoa_r+0x1478>
    5e2c:	d9000717 	ldw	r4,28(sp)
    5e30:	0025883a 	mov	r18,zero
    5e34:	20af883a 	add	r23,r4,r2
    5e38:	01800044 	movi	r6,1
    5e3c:	800b883a 	mov	r5,r16
    5e40:	e009883a 	mov	r4,fp
    5e44:	da001715 	stw	r8,92(sp)
    5e48:	00088a00 	call	88a0 <__lshift>
    5e4c:	a80b883a 	mov	r5,r21
    5e50:	1009883a 	mov	r4,r2
    5e54:	d8800915 	stw	r2,36(sp)
    5e58:	00089e80 	call	89e8 <__mcmp>
    5e5c:	da001717 	ldw	r8,92(sp)
    5e60:	0081800e 	bge	zero,r2,6464 <_dtoa_r+0x11d4>
    5e64:	b93fffc3 	ldbu	r4,-1(r23)
    5e68:	b8bfffc4 	addi	r2,r23,-1
    5e6c:	1007883a 	mov	r3,r2
    5e70:	01800e44 	movi	r6,57
    5e74:	d9c00717 	ldw	r7,28(sp)
    5e78:	00000506 	br	5e90 <_dtoa_r+0xc00>
    5e7c:	18ffffc4 	addi	r3,r3,-1
    5e80:	11c12326 	beq	r2,r7,6310 <_dtoa_r+0x1080>
    5e84:	19000003 	ldbu	r4,0(r3)
    5e88:	102f883a 	mov	r23,r2
    5e8c:	10bfffc4 	addi	r2,r2,-1
    5e90:	21403fcc 	andi	r5,r4,255
    5e94:	2940201c 	xori	r5,r5,128
    5e98:	297fe004 	addi	r5,r5,-128
    5e9c:	29bff726 	beq	r5,r6,5e7c <_dtoa_r+0xbec>
    5ea0:	21000044 	addi	r4,r4,1
    5ea4:	11000005 	stb	r4,0(r2)
    5ea8:	a80b883a 	mov	r5,r21
    5eac:	e009883a 	mov	r4,fp
    5eb0:	00081c80 	call	81c8 <_Bfree>
    5eb4:	883ea026 	beq	r17,zero,5938 <_dtoa_r+0x6a8>
    5eb8:	90000426 	beq	r18,zero,5ecc <_dtoa_r+0xc3c>
    5ebc:	94400326 	beq	r18,r17,5ecc <_dtoa_r+0xc3c>
    5ec0:	900b883a 	mov	r5,r18
    5ec4:	e009883a 	mov	r4,fp
    5ec8:	00081c80 	call	81c8 <_Bfree>
    5ecc:	880b883a 	mov	r5,r17
    5ed0:	e009883a 	mov	r4,fp
    5ed4:	00081c80 	call	81c8 <_Bfree>
    5ed8:	003e9706 	br	5938 <_dtoa_r+0x6a8>
    5edc:	01800044 	movi	r6,1
    5ee0:	d9800e15 	stw	r6,56(sp)
    5ee4:	003d9606 	br	5540 <_dtoa_r+0x2b0>
    5ee8:	d8800817 	ldw	r2,32(sp)
    5eec:	d8c00517 	ldw	r3,20(sp)
    5ef0:	d8000d15 	stw	zero,52(sp)
    5ef4:	10c5c83a 	sub	r2,r2,r3
    5ef8:	00c9c83a 	sub	r4,zero,r3
    5efc:	d8800815 	stw	r2,32(sp)
    5f00:	d9000a15 	stw	r4,40(sp)
    5f04:	003d9706 	br	5564 <_dtoa_r+0x2d4>
    5f08:	05adc83a 	sub	r22,zero,r22
    5f0c:	dd800815 	stw	r22,32(sp)
    5f10:	002d883a 	mov	r22,zero
    5f14:	003d8e06 	br	5550 <_dtoa_r+0x2c0>
    5f18:	d9000517 	ldw	r4,20(sp)
    5f1c:	000e7b80 	call	e7b8 <__floatsidf>
    5f20:	100d883a 	mov	r6,r2
    5f24:	180f883a 	mov	r7,r3
    5f28:	a009883a 	mov	r4,r20
    5f2c:	880b883a 	mov	r5,r17
    5f30:	000d4cc0 	call	d4cc <__eqdf2>
    5f34:	103d7126 	beq	r2,zero,54fc <_dtoa_r+0x26c>
    5f38:	d9c00517 	ldw	r7,20(sp)
    5f3c:	39ffffc4 	addi	r7,r7,-1
    5f40:	d9c00515 	stw	r7,20(sp)
    5f44:	003d6d06 	br	54fc <_dtoa_r+0x26c>
    5f48:	dd400a17 	ldw	r21,40(sp)
    5f4c:	dd000817 	ldw	r20,32(sp)
    5f50:	0023883a 	mov	r17,zero
    5f54:	003f4806 	br	5c78 <_dtoa_r+0x9e8>
    5f58:	10e3c83a 	sub	r17,r2,r3
    5f5c:	9448983a 	sll	r4,r18,r17
    5f60:	003d3206 	br	542c <_dtoa_r+0x19c>
    5f64:	d8000e15 	stw	zero,56(sp)
    5f68:	003d7506 	br	5540 <_dtoa_r+0x2b0>
    5f6c:	b005883a 	mov	r2,r22
    5f70:	003f4506 	br	5c88 <_dtoa_r+0x9f8>
    5f74:	dc000915 	stw	r16,36(sp)
    5f78:	d9800a17 	ldw	r6,40(sp)
    5f7c:	d9400917 	ldw	r5,36(sp)
    5f80:	e009883a 	mov	r4,fp
    5f84:	00087600 	call	8760 <__pow5mult>
    5f88:	1021883a 	mov	r16,r2
    5f8c:	003f5a06 	br	5cf8 <_dtoa_r+0xa68>
    5f90:	01c00044 	movi	r7,1
    5f94:	d9c00b15 	stw	r7,44(sp)
    5f98:	d8802217 	ldw	r2,136(sp)
    5f9c:	0081280e 	bge	zero,r2,6440 <_dtoa_r+0x11b0>
    5fa0:	100d883a 	mov	r6,r2
    5fa4:	1021883a 	mov	r16,r2
    5fa8:	d8800c15 	stw	r2,48(sp)
    5fac:	d8800615 	stw	r2,24(sp)
    5fb0:	003d8806 	br	55d4 <_dtoa_r+0x344>
    5fb4:	d8800617 	ldw	r2,24(sp)
    5fb8:	00be9b16 	blt	zero,r2,5a28 <_dtoa_r+0x798>
    5fbc:	10010f1e 	bne	r2,zero,63fc <_dtoa_r+0x116c>
    5fc0:	880b883a 	mov	r5,r17
    5fc4:	000d883a 	mov	r6,zero
    5fc8:	01d00534 	movhi	r7,16404
    5fcc:	8009883a 	mov	r4,r16
    5fd0:	000d7240 	call	d724 <__muldf3>
    5fd4:	900d883a 	mov	r6,r18
    5fd8:	980f883a 	mov	r7,r19
    5fdc:	1009883a 	mov	r4,r2
    5fe0:	180b883a 	mov	r5,r3
    5fe4:	000d5540 	call	d554 <__gedf2>
    5fe8:	002b883a 	mov	r21,zero
    5fec:	0023883a 	mov	r17,zero
    5ff0:	1000bf16 	blt	r2,zero,62f0 <_dtoa_r+0x1060>
    5ff4:	d9802217 	ldw	r6,136(sp)
    5ff8:	ddc00717 	ldw	r23,28(sp)
    5ffc:	018c303a 	nor	r6,zero,r6
    6000:	d9800515 	stw	r6,20(sp)
    6004:	a80b883a 	mov	r5,r21
    6008:	e009883a 	mov	r4,fp
    600c:	00081c80 	call	81c8 <_Bfree>
    6010:	883e4926 	beq	r17,zero,5938 <_dtoa_r+0x6a8>
    6014:	003fad06 	br	5ecc <_dtoa_r+0xc3c>
    6018:	d9c01117 	ldw	r7,68(sp)
    601c:	3801bc26 	beq	r7,zero,6710 <_dtoa_r+0x1480>
    6020:	10810cc4 	addi	r2,r2,1075
    6024:	dd400a17 	ldw	r21,40(sp)
    6028:	dd000817 	ldw	r20,32(sp)
    602c:	003f0a06 	br	5c58 <_dtoa_r+0x9c8>
    6030:	00800704 	movi	r2,28
    6034:	d9000817 	ldw	r4,32(sp)
    6038:	a0a9883a 	add	r20,r20,r2
    603c:	b0ad883a 	add	r22,r22,r2
    6040:	2089883a 	add	r4,r4,r2
    6044:	d9000815 	stw	r4,32(sp)
    6048:	003f5106 	br	5d90 <_dtoa_r+0xb00>
    604c:	d8c00317 	ldw	r3,12(sp)
    6050:	b8c1fc0e 	bge	r23,r3,6844 <_dtoa_r+0x15b4>
    6054:	0027883a 	mov	r19,zero
    6058:	b805883a 	mov	r2,r23
    605c:	003f3e06 	br	5d58 <_dtoa_r+0xac8>
    6060:	880b883a 	mov	r5,r17
    6064:	e009883a 	mov	r4,fp
    6068:	000f883a 	mov	r7,zero
    606c:	01800284 	movi	r6,10
    6070:	00081f00 	call	81f0 <__multadd>
    6074:	d9000c17 	ldw	r4,48(sp)
    6078:	1023883a 	mov	r17,r2
    607c:	0102040e 	bge	zero,r4,6890 <_dtoa_r+0x1600>
    6080:	d9000615 	stw	r4,24(sp)
    6084:	0500050e 	bge	zero,r20,609c <_dtoa_r+0xe0c>
    6088:	880b883a 	mov	r5,r17
    608c:	a00d883a 	mov	r6,r20
    6090:	e009883a 	mov	r4,fp
    6094:	00088a00 	call	88a0 <__lshift>
    6098:	1023883a 	mov	r17,r2
    609c:	9801241e 	bne	r19,zero,6530 <_dtoa_r+0x12a0>
    60a0:	8829883a 	mov	r20,r17
    60a4:	d9000617 	ldw	r4,24(sp)
    60a8:	dcc00717 	ldw	r19,28(sp)
    60ac:	9480004c 	andi	r18,r18,1
    60b0:	20bfffc4 	addi	r2,r4,-1
    60b4:	9885883a 	add	r2,r19,r2
    60b8:	d8800415 	stw	r2,16(sp)
    60bc:	dc800615 	stw	r18,24(sp)
    60c0:	a80b883a 	mov	r5,r21
    60c4:	8009883a 	mov	r4,r16
    60c8:	00050900 	call	5090 <quorem>
    60cc:	880b883a 	mov	r5,r17
    60d0:	8009883a 	mov	r4,r16
    60d4:	102f883a 	mov	r23,r2
    60d8:	00089e80 	call	89e8 <__mcmp>
    60dc:	a80b883a 	mov	r5,r21
    60e0:	a00d883a 	mov	r6,r20
    60e4:	e009883a 	mov	r4,fp
    60e8:	102d883a 	mov	r22,r2
    60ec:	0008a480 	call	8a48 <__mdiff>
    60f0:	1007883a 	mov	r3,r2
    60f4:	10800317 	ldw	r2,12(r2)
    60f8:	bc800c04 	addi	r18,r23,48
    60fc:	180b883a 	mov	r5,r3
    6100:	10004e1e 	bne	r2,zero,623c <_dtoa_r+0xfac>
    6104:	8009883a 	mov	r4,r16
    6108:	d8c01615 	stw	r3,88(sp)
    610c:	00089e80 	call	89e8 <__mcmp>
    6110:	d8c01617 	ldw	r3,88(sp)
    6114:	e009883a 	mov	r4,fp
    6118:	d8801615 	stw	r2,88(sp)
    611c:	180b883a 	mov	r5,r3
    6120:	00081c80 	call	81c8 <_Bfree>
    6124:	d8801617 	ldw	r2,88(sp)
    6128:	1000041e 	bne	r2,zero,613c <_dtoa_r+0xeac>
    612c:	d9800317 	ldw	r6,12(sp)
    6130:	3000021e 	bne	r6,zero,613c <_dtoa_r+0xeac>
    6134:	d8c00617 	ldw	r3,24(sp)
    6138:	18003726 	beq	r3,zero,6218 <_dtoa_r+0xf88>
    613c:	b0002016 	blt	r22,zero,61c0 <_dtoa_r+0xf30>
    6140:	b000041e 	bne	r22,zero,6154 <_dtoa_r+0xec4>
    6144:	d9000317 	ldw	r4,12(sp)
    6148:	2000021e 	bne	r4,zero,6154 <_dtoa_r+0xec4>
    614c:	d8c00617 	ldw	r3,24(sp)
    6150:	18001b26 	beq	r3,zero,61c0 <_dtoa_r+0xf30>
    6154:	00810716 	blt	zero,r2,6574 <_dtoa_r+0x12e4>
    6158:	d8c00417 	ldw	r3,16(sp)
    615c:	9d800044 	addi	r22,r19,1
    6160:	9c800005 	stb	r18,0(r19)
    6164:	b02f883a 	mov	r23,r22
    6168:	98c10626 	beq	r19,r3,6584 <_dtoa_r+0x12f4>
    616c:	800b883a 	mov	r5,r16
    6170:	000f883a 	mov	r7,zero
    6174:	01800284 	movi	r6,10
    6178:	e009883a 	mov	r4,fp
    617c:	00081f00 	call	81f0 <__multadd>
    6180:	1021883a 	mov	r16,r2
    6184:	000f883a 	mov	r7,zero
    6188:	01800284 	movi	r6,10
    618c:	880b883a 	mov	r5,r17
    6190:	e009883a 	mov	r4,fp
    6194:	8d002526 	beq	r17,r20,622c <_dtoa_r+0xf9c>
    6198:	00081f00 	call	81f0 <__multadd>
    619c:	a00b883a 	mov	r5,r20
    61a0:	000f883a 	mov	r7,zero
    61a4:	01800284 	movi	r6,10
    61a8:	e009883a 	mov	r4,fp
    61ac:	1023883a 	mov	r17,r2
    61b0:	00081f00 	call	81f0 <__multadd>
    61b4:	1029883a 	mov	r20,r2
    61b8:	b027883a 	mov	r19,r22
    61bc:	003fc006 	br	60c0 <_dtoa_r+0xe30>
    61c0:	9011883a 	mov	r8,r18
    61c4:	00800e0e 	bge	zero,r2,6200 <_dtoa_r+0xf70>
    61c8:	800b883a 	mov	r5,r16
    61cc:	01800044 	movi	r6,1
    61d0:	e009883a 	mov	r4,fp
    61d4:	da001715 	stw	r8,92(sp)
    61d8:	00088a00 	call	88a0 <__lshift>
    61dc:	a80b883a 	mov	r5,r21
    61e0:	1009883a 	mov	r4,r2
    61e4:	1021883a 	mov	r16,r2
    61e8:	00089e80 	call	89e8 <__mcmp>
    61ec:	da001717 	ldw	r8,92(sp)
    61f0:	0081960e 	bge	zero,r2,684c <_dtoa_r+0x15bc>
    61f4:	00800e44 	movi	r2,57
    61f8:	40817026 	beq	r8,r2,67bc <_dtoa_r+0x152c>
    61fc:	ba000c44 	addi	r8,r23,49
    6200:	8825883a 	mov	r18,r17
    6204:	9dc00044 	addi	r23,r19,1
    6208:	9a000005 	stb	r8,0(r19)
    620c:	a023883a 	mov	r17,r20
    6210:	dc000915 	stw	r16,36(sp)
    6214:	003f2406 	br	5ea8 <_dtoa_r+0xc18>
    6218:	00800e44 	movi	r2,57
    621c:	9011883a 	mov	r8,r18
    6220:	90816626 	beq	r18,r2,67bc <_dtoa_r+0x152c>
    6224:	05bff516 	blt	zero,r22,61fc <_dtoa_r+0xf6c>
    6228:	003ff506 	br	6200 <_dtoa_r+0xf70>
    622c:	00081f00 	call	81f0 <__multadd>
    6230:	1023883a 	mov	r17,r2
    6234:	1029883a 	mov	r20,r2
    6238:	003fdf06 	br	61b8 <_dtoa_r+0xf28>
    623c:	e009883a 	mov	r4,fp
    6240:	00081c80 	call	81c8 <_Bfree>
    6244:	00800044 	movi	r2,1
    6248:	003fbc06 	br	613c <_dtoa_r+0xeac>
    624c:	a80b883a 	mov	r5,r21
    6250:	8009883a 	mov	r4,r16
    6254:	00089e80 	call	89e8 <__mcmp>
    6258:	103edb0e 	bge	r2,zero,5dc8 <_dtoa_r+0xb38>
    625c:	800b883a 	mov	r5,r16
    6260:	000f883a 	mov	r7,zero
    6264:	01800284 	movi	r6,10
    6268:	e009883a 	mov	r4,fp
    626c:	00081f00 	call	81f0 <__multadd>
    6270:	1021883a 	mov	r16,r2
    6274:	d8800517 	ldw	r2,20(sp)
    6278:	d8c00b17 	ldw	r3,44(sp)
    627c:	10bfffc4 	addi	r2,r2,-1
    6280:	d8800515 	stw	r2,20(sp)
    6284:	183f761e 	bne	r3,zero,6060 <_dtoa_r+0xdd0>
    6288:	d9000c17 	ldw	r4,48(sp)
    628c:	0101730e 	bge	zero,r4,685c <_dtoa_r+0x15cc>
    6290:	d9000615 	stw	r4,24(sp)
    6294:	003ed006 	br	5dd8 <_dtoa_r+0xb48>
    6298:	00800084 	movi	r2,2
    629c:	3081861e 	bne	r6,r2,68b8 <_dtoa_r+0x1628>
    62a0:	d8000b15 	stw	zero,44(sp)
    62a4:	003f3c06 	br	5f98 <_dtoa_r+0xd08>
    62a8:	dc000917 	ldw	r16,36(sp)
    62ac:	003e9206 	br	5cf8 <_dtoa_r+0xa68>
    62b0:	d9c00317 	ldw	r7,12(sp)
    62b4:	00800084 	movi	r2,2
    62b8:	11fec50e 	bge	r2,r7,5dd0 <_dtoa_r+0xb40>
    62bc:	d9000617 	ldw	r4,24(sp)
    62c0:	20013c1e 	bne	r4,zero,67b4 <_dtoa_r+0x1524>
    62c4:	a80b883a 	mov	r5,r21
    62c8:	000f883a 	mov	r7,zero
    62cc:	01800144 	movi	r6,5
    62d0:	e009883a 	mov	r4,fp
    62d4:	00081f00 	call	81f0 <__multadd>
    62d8:	100b883a 	mov	r5,r2
    62dc:	8009883a 	mov	r4,r16
    62e0:	102b883a 	mov	r21,r2
    62e4:	00089e80 	call	89e8 <__mcmp>
    62e8:	dc000915 	stw	r16,36(sp)
    62ec:	00bf410e 	bge	zero,r2,5ff4 <_dtoa_r+0xd64>
    62f0:	d9c00717 	ldw	r7,28(sp)
    62f4:	00800c44 	movi	r2,49
    62f8:	38800005 	stb	r2,0(r7)
    62fc:	d8800517 	ldw	r2,20(sp)
    6300:	3dc00044 	addi	r23,r7,1
    6304:	10800044 	addi	r2,r2,1
    6308:	d8800515 	stw	r2,20(sp)
    630c:	003f3d06 	br	6004 <_dtoa_r+0xd74>
    6310:	d9800517 	ldw	r6,20(sp)
    6314:	d9c00717 	ldw	r7,28(sp)
    6318:	00800c44 	movi	r2,49
    631c:	31800044 	addi	r6,r6,1
    6320:	d9800515 	stw	r6,20(sp)
    6324:	38800005 	stb	r2,0(r7)
    6328:	003edf06 	br	5ea8 <_dtoa_r+0xc18>
    632c:	d8000b15 	stw	zero,44(sp)
    6330:	003c9f06 	br	55b0 <_dtoa_r+0x320>
    6334:	903e7e1e 	bne	r18,zero,5d30 <_dtoa_r+0xaa0>
    6338:	00800434 	movhi	r2,16
    633c:	10bfffc4 	addi	r2,r2,-1
    6340:	9884703a 	and	r2,r19,r2
    6344:	1000ea1e 	bne	r2,zero,66f0 <_dtoa_r+0x1460>
    6348:	9cdffc2c 	andhi	r19,r19,32752
    634c:	9800e826 	beq	r19,zero,66f0 <_dtoa_r+0x1460>
    6350:	d9c00817 	ldw	r7,32(sp)
    6354:	b5800044 	addi	r22,r22,1
    6358:	04c00044 	movi	r19,1
    635c:	39c00044 	addi	r7,r7,1
    6360:	d9c00815 	stw	r7,32(sp)
    6364:	d8800d17 	ldw	r2,52(sp)
    6368:	103e721e 	bne	r2,zero,5d34 <_dtoa_r+0xaa4>
    636c:	00800044 	movi	r2,1
    6370:	003e7906 	br	5d58 <_dtoa_r+0xac8>
    6374:	8009883a 	mov	r4,r16
    6378:	000e7b80 	call	e7b8 <__floatsidf>
    637c:	d9800f17 	ldw	r6,60(sp)
    6380:	d9c01017 	ldw	r7,64(sp)
    6384:	1009883a 	mov	r4,r2
    6388:	180b883a 	mov	r5,r3
    638c:	000d7240 	call	d724 <__muldf3>
    6390:	000d883a 	mov	r6,zero
    6394:	01d00734 	movhi	r7,16412
    6398:	1009883a 	mov	r4,r2
    639c:	180b883a 	mov	r5,r3
    63a0:	000c3380 	call	c338 <__adddf3>
    63a4:	047f3034 	movhi	r17,64704
    63a8:	1021883a 	mov	r16,r2
    63ac:	1c63883a 	add	r17,r3,r17
    63b0:	d9000f17 	ldw	r4,60(sp)
    63b4:	d9401017 	ldw	r5,64(sp)
    63b8:	000d883a 	mov	r6,zero
    63bc:	01d00534 	movhi	r7,16404
    63c0:	000de3c0 	call	de3c <__subdf3>
    63c4:	800d883a 	mov	r6,r16
    63c8:	880f883a 	mov	r7,r17
    63cc:	1009883a 	mov	r4,r2
    63d0:	180b883a 	mov	r5,r3
    63d4:	102b883a 	mov	r21,r2
    63d8:	1829883a 	mov	r20,r3
    63dc:	000d5540 	call	d554 <__gedf2>
    63e0:	00806c16 	blt	zero,r2,6594 <_dtoa_r+0x1304>
    63e4:	89e0003c 	xorhi	r7,r17,32768
    63e8:	800d883a 	mov	r6,r16
    63ec:	a809883a 	mov	r4,r21
    63f0:	a00b883a 	mov	r5,r20
    63f4:	000d6300 	call	d630 <__ledf2>
    63f8:	103d7e0e 	bge	r2,zero,59f4 <_dtoa_r+0x764>
    63fc:	002b883a 	mov	r21,zero
    6400:	0023883a 	mov	r17,zero
    6404:	003efb06 	br	5ff4 <_dtoa_r+0xd64>
    6408:	d8800717 	ldw	r2,28(sp)
    640c:	003bd006 	br	5350 <_dtoa_r+0xc0>
    6410:	d9000a17 	ldw	r4,40(sp)
    6414:	d9800d17 	ldw	r6,52(sp)
    6418:	dd400a15 	stw	r21,40(sp)
    641c:	a905c83a 	sub	r2,r21,r4
    6420:	308d883a 	add	r6,r6,r2
    6424:	d9800d15 	stw	r6,52(sp)
    6428:	002b883a 	mov	r21,zero
    642c:	003e0606 	br	5c48 <_dtoa_r+0x9b8>
    6430:	9023883a 	mov	r17,r18
    6434:	9829883a 	mov	r20,r19
    6438:	04000084 	movi	r16,2
    643c:	003c9206 	br	5688 <_dtoa_r+0x3f8>
    6440:	04000044 	movi	r16,1
    6444:	dc000c15 	stw	r16,48(sp)
    6448:	dc000615 	stw	r16,24(sp)
    644c:	dc002215 	stw	r16,136(sp)
    6450:	e0001115 	stw	zero,68(fp)
    6454:	000b883a 	mov	r5,zero
    6458:	003c6906 	br	5600 <_dtoa_r+0x370>
    645c:	3021883a 	mov	r16,r6
    6460:	003ffb06 	br	6450 <_dtoa_r+0x11c0>
    6464:	1000021e 	bne	r2,zero,6470 <_dtoa_r+0x11e0>
    6468:	4200004c 	andi	r8,r8,1
    646c:	403e7d1e 	bne	r8,zero,5e64 <_dtoa_r+0xbd4>
    6470:	01000c04 	movi	r4,48
    6474:	00000106 	br	647c <_dtoa_r+0x11ec>
    6478:	102f883a 	mov	r23,r2
    647c:	b8bfffc4 	addi	r2,r23,-1
    6480:	10c00007 	ldb	r3,0(r2)
    6484:	193ffc26 	beq	r3,r4,6478 <_dtoa_r+0x11e8>
    6488:	003e8706 	br	5ea8 <_dtoa_r+0xc18>
    648c:	d8800517 	ldw	r2,20(sp)
    6490:	00a3c83a 	sub	r17,zero,r2
    6494:	8800a426 	beq	r17,zero,6728 <_dtoa_r+0x1498>
    6498:	888003cc 	andi	r2,r17,15
    649c:	100490fa 	slli	r2,r2,3
    64a0:	00c00074 	movhi	r3,1
    64a4:	18c65004 	addi	r3,r3,6464
    64a8:	1885883a 	add	r2,r3,r2
    64ac:	11800017 	ldw	r6,0(r2)
    64b0:	11c00117 	ldw	r7,4(r2)
    64b4:	9009883a 	mov	r4,r18
    64b8:	980b883a 	mov	r5,r19
    64bc:	8823d13a 	srai	r17,r17,4
    64c0:	000d7240 	call	d724 <__muldf3>
    64c4:	d8800f15 	stw	r2,60(sp)
    64c8:	d8c01015 	stw	r3,64(sp)
    64cc:	8800e826 	beq	r17,zero,6870 <_dtoa_r+0x15e0>
    64d0:	05000074 	movhi	r20,1
    64d4:	a5064604 	addi	r20,r20,6424
    64d8:	04000084 	movi	r16,2
    64dc:	8980004c 	andi	r6,r17,1
    64e0:	1009883a 	mov	r4,r2
    64e4:	8823d07a 	srai	r17,r17,1
    64e8:	180b883a 	mov	r5,r3
    64ec:	30000426 	beq	r6,zero,6500 <_dtoa_r+0x1270>
    64f0:	a1800017 	ldw	r6,0(r20)
    64f4:	a1c00117 	ldw	r7,4(r20)
    64f8:	84000044 	addi	r16,r16,1
    64fc:	000d7240 	call	d724 <__muldf3>
    6500:	a5000204 	addi	r20,r20,8
    6504:	883ff51e 	bne	r17,zero,64dc <_dtoa_r+0x124c>
    6508:	d8800f15 	stw	r2,60(sp)
    650c:	d8c01015 	stw	r3,64(sp)
    6510:	003c7606 	br	56ec <_dtoa_r+0x45c>
    6514:	00c00c04 	movi	r3,48
    6518:	10c00005 	stb	r3,0(r2)
    651c:	d8c00517 	ldw	r3,20(sp)
    6520:	bd3fffc3 	ldbu	r20,-1(r23)
    6524:	18c00044 	addi	r3,r3,1
    6528:	d8c00515 	stw	r3,20(sp)
    652c:	003db906 	br	5c14 <_dtoa_r+0x984>
    6530:	89400117 	ldw	r5,4(r17)
    6534:	e009883a 	mov	r4,fp
    6538:	00081200 	call	8120 <_Balloc>
    653c:	89800417 	ldw	r6,16(r17)
    6540:	89400304 	addi	r5,r17,12
    6544:	11000304 	addi	r4,r2,12
    6548:	31800084 	addi	r6,r6,2
    654c:	318d883a 	add	r6,r6,r6
    6550:	318d883a 	add	r6,r6,r6
    6554:	1027883a 	mov	r19,r2
    6558:	0007d540 	call	7d54 <memcpy>
    655c:	01800044 	movi	r6,1
    6560:	980b883a 	mov	r5,r19
    6564:	e009883a 	mov	r4,fp
    6568:	00088a00 	call	88a0 <__lshift>
    656c:	1029883a 	mov	r20,r2
    6570:	003ecc06 	br	60a4 <_dtoa_r+0xe14>
    6574:	00800e44 	movi	r2,57
    6578:	90809026 	beq	r18,r2,67bc <_dtoa_r+0x152c>
    657c:	92000044 	addi	r8,r18,1
    6580:	003f1f06 	br	6200 <_dtoa_r+0xf70>
    6584:	9011883a 	mov	r8,r18
    6588:	8825883a 	mov	r18,r17
    658c:	a023883a 	mov	r17,r20
    6590:	003e2906 	br	5e38 <_dtoa_r+0xba8>
    6594:	002b883a 	mov	r21,zero
    6598:	0023883a 	mov	r17,zero
    659c:	003f5406 	br	62f0 <_dtoa_r+0x1060>
    65a0:	61bfffc4 	addi	r6,r12,-1
    65a4:	300490fa 	slli	r2,r6,3
    65a8:	00c00074 	movhi	r3,1
    65ac:	18c65004 	addi	r3,r3,6464
    65b0:	1885883a 	add	r2,r3,r2
    65b4:	11000017 	ldw	r4,0(r2)
    65b8:	11400117 	ldw	r5,4(r2)
    65bc:	d8800717 	ldw	r2,28(sp)
    65c0:	880f883a 	mov	r7,r17
    65c4:	d9801215 	stw	r6,72(sp)
    65c8:	800d883a 	mov	r6,r16
    65cc:	db001615 	stw	r12,88(sp)
    65d0:	15c00044 	addi	r23,r2,1
    65d4:	000d7240 	call	d724 <__muldf3>
    65d8:	d9401017 	ldw	r5,64(sp)
    65dc:	d9000f17 	ldw	r4,60(sp)
    65e0:	d8c01515 	stw	r3,84(sp)
    65e4:	d8801415 	stw	r2,80(sp)
    65e8:	000e7380 	call	e738 <__fixdfsi>
    65ec:	1009883a 	mov	r4,r2
    65f0:	1021883a 	mov	r16,r2
    65f4:	000e7b80 	call	e7b8 <__floatsidf>
    65f8:	d9000f17 	ldw	r4,60(sp)
    65fc:	d9401017 	ldw	r5,64(sp)
    6600:	100d883a 	mov	r6,r2
    6604:	180f883a 	mov	r7,r3
    6608:	000de3c0 	call	de3c <__subdf3>
    660c:	1829883a 	mov	r20,r3
    6610:	d8c00717 	ldw	r3,28(sp)
    6614:	84000c04 	addi	r16,r16,48
    6618:	1023883a 	mov	r17,r2
    661c:	1c000005 	stb	r16,0(r3)
    6620:	db001617 	ldw	r12,88(sp)
    6624:	00800044 	movi	r2,1
    6628:	60802226 	beq	r12,r2,66b4 <_dtoa_r+0x1424>
    662c:	d9c00717 	ldw	r7,28(sp)
    6630:	8805883a 	mov	r2,r17
    6634:	b82b883a 	mov	r21,r23
    6638:	3b19883a 	add	r12,r7,r12
    663c:	6023883a 	mov	r17,r12
    6640:	a007883a 	mov	r3,r20
    6644:	dc800f15 	stw	r18,60(sp)
    6648:	000d883a 	mov	r6,zero
    664c:	01d00934 	movhi	r7,16420
    6650:	1009883a 	mov	r4,r2
    6654:	180b883a 	mov	r5,r3
    6658:	000d7240 	call	d724 <__muldf3>
    665c:	180b883a 	mov	r5,r3
    6660:	1009883a 	mov	r4,r2
    6664:	1829883a 	mov	r20,r3
    6668:	1025883a 	mov	r18,r2
    666c:	000e7380 	call	e738 <__fixdfsi>
    6670:	1009883a 	mov	r4,r2
    6674:	1021883a 	mov	r16,r2
    6678:	000e7b80 	call	e7b8 <__floatsidf>
    667c:	100d883a 	mov	r6,r2
    6680:	180f883a 	mov	r7,r3
    6684:	9009883a 	mov	r4,r18
    6688:	a00b883a 	mov	r5,r20
    668c:	84000c04 	addi	r16,r16,48
    6690:	000de3c0 	call	de3c <__subdf3>
    6694:	ad400044 	addi	r21,r21,1
    6698:	ac3fffc5 	stb	r16,-1(r21)
    669c:	ac7fea1e 	bne	r21,r17,6648 <_dtoa_r+0x13b8>
    66a0:	1023883a 	mov	r17,r2
    66a4:	d8801217 	ldw	r2,72(sp)
    66a8:	dc800f17 	ldw	r18,60(sp)
    66ac:	1829883a 	mov	r20,r3
    66b0:	b8af883a 	add	r23,r23,r2
    66b4:	d9001417 	ldw	r4,80(sp)
    66b8:	d9401517 	ldw	r5,84(sp)
    66bc:	000d883a 	mov	r6,zero
    66c0:	01cff834 	movhi	r7,16352
    66c4:	000c3380 	call	c338 <__adddf3>
    66c8:	880d883a 	mov	r6,r17
    66cc:	a00f883a 	mov	r7,r20
    66d0:	1009883a 	mov	r4,r2
    66d4:	180b883a 	mov	r5,r3
    66d8:	000d6300 	call	d630 <__ledf2>
    66dc:	10003e0e 	bge	r2,zero,67d8 <_dtoa_r+0x1548>
    66e0:	d9001317 	ldw	r4,76(sp)
    66e4:	bd3fffc3 	ldbu	r20,-1(r23)
    66e8:	d9000515 	stw	r4,20(sp)
    66ec:	003d3b06 	br	5bdc <_dtoa_r+0x94c>
    66f0:	0027883a 	mov	r19,zero
    66f4:	003f1b06 	br	6364 <_dtoa_r+0x10d4>
    66f8:	d8800817 	ldw	r2,32(sp)
    66fc:	11e9c83a 	sub	r20,r2,r7
    6700:	0005883a 	mov	r2,zero
    6704:	003d5406 	br	5c58 <_dtoa_r+0x9c8>
    6708:	00800044 	movi	r2,1
    670c:	003dc706 	br	5e2c <_dtoa_r+0xb9c>
    6710:	d8c00217 	ldw	r3,8(sp)
    6714:	00800d84 	movi	r2,54
    6718:	dd400a17 	ldw	r21,40(sp)
    671c:	10c5c83a 	sub	r2,r2,r3
    6720:	dd000817 	ldw	r20,32(sp)
    6724:	003d4c06 	br	5c58 <_dtoa_r+0x9c8>
    6728:	dc800f15 	stw	r18,60(sp)
    672c:	dcc01015 	stw	r19,64(sp)
    6730:	04000084 	movi	r16,2
    6734:	003bed06 	br	56ec <_dtoa_r+0x45c>
    6738:	d9000617 	ldw	r4,24(sp)
    673c:	203f0d26 	beq	r4,zero,6374 <_dtoa_r+0x10e4>
    6740:	d9800c17 	ldw	r6,48(sp)
    6744:	01bcab0e 	bge	zero,r6,59f4 <_dtoa_r+0x764>
    6748:	d9401017 	ldw	r5,64(sp)
    674c:	d9000f17 	ldw	r4,60(sp)
    6750:	000d883a 	mov	r6,zero
    6754:	01d00934 	movhi	r7,16420
    6758:	000d7240 	call	d724 <__muldf3>
    675c:	81000044 	addi	r4,r16,1
    6760:	d8800f15 	stw	r2,60(sp)
    6764:	d8c01015 	stw	r3,64(sp)
    6768:	000e7b80 	call	e7b8 <__floatsidf>
    676c:	d9800f17 	ldw	r6,60(sp)
    6770:	d9c01017 	ldw	r7,64(sp)
    6774:	1009883a 	mov	r4,r2
    6778:	180b883a 	mov	r5,r3
    677c:	000d7240 	call	d724 <__muldf3>
    6780:	01d00734 	movhi	r7,16412
    6784:	000d883a 	mov	r6,zero
    6788:	1009883a 	mov	r4,r2
    678c:	180b883a 	mov	r5,r3
    6790:	000c3380 	call	c338 <__adddf3>
    6794:	d9c00517 	ldw	r7,20(sp)
    6798:	047f3034 	movhi	r17,64704
    679c:	1021883a 	mov	r16,r2
    67a0:	39ffffc4 	addi	r7,r7,-1
    67a4:	d9c01315 	stw	r7,76(sp)
    67a8:	1c63883a 	add	r17,r3,r17
    67ac:	db000c17 	ldw	r12,48(sp)
    67b0:	003bea06 	br	575c <_dtoa_r+0x4cc>
    67b4:	dc000915 	stw	r16,36(sp)
    67b8:	003e0e06 	br	5ff4 <_dtoa_r+0xd64>
    67bc:	01000e44 	movi	r4,57
    67c0:	8825883a 	mov	r18,r17
    67c4:	9dc00044 	addi	r23,r19,1
    67c8:	99000005 	stb	r4,0(r19)
    67cc:	a023883a 	mov	r17,r20
    67d0:	dc000915 	stw	r16,36(sp)
    67d4:	003da406 	br	5e68 <_dtoa_r+0xbd8>
    67d8:	d9801417 	ldw	r6,80(sp)
    67dc:	d9c01517 	ldw	r7,84(sp)
    67e0:	0009883a 	mov	r4,zero
    67e4:	014ff834 	movhi	r5,16352
    67e8:	000de3c0 	call	de3c <__subdf3>
    67ec:	880d883a 	mov	r6,r17
    67f0:	a00f883a 	mov	r7,r20
    67f4:	1009883a 	mov	r4,r2
    67f8:	180b883a 	mov	r5,r3
    67fc:	000d5540 	call	d554 <__gedf2>
    6800:	00bc7c0e 	bge	zero,r2,59f4 <_dtoa_r+0x764>
    6804:	01000c04 	movi	r4,48
    6808:	00000106 	br	6810 <_dtoa_r+0x1580>
    680c:	102f883a 	mov	r23,r2
    6810:	b8bfffc4 	addi	r2,r23,-1
    6814:	10c00007 	ldb	r3,0(r2)
    6818:	193ffc26 	beq	r3,r4,680c <_dtoa_r+0x157c>
    681c:	d9801317 	ldw	r6,76(sp)
    6820:	d9800515 	stw	r6,20(sp)
    6824:	003c4406 	br	5938 <_dtoa_r+0x6a8>
    6828:	d9801317 	ldw	r6,76(sp)
    682c:	d9800515 	stw	r6,20(sp)
    6830:	003cea06 	br	5bdc <_dtoa_r+0x94c>
    6834:	dd800f17 	ldw	r22,60(sp)
    6838:	dcc01017 	ldw	r19,64(sp)
    683c:	dc801217 	ldw	r18,72(sp)
    6840:	003c6c06 	br	59f4 <_dtoa_r+0x764>
    6844:	903e031e 	bne	r18,zero,6054 <_dtoa_r+0xdc4>
    6848:	003ebb06 	br	6338 <_dtoa_r+0x10a8>
    684c:	103e6c1e 	bne	r2,zero,6200 <_dtoa_r+0xf70>
    6850:	4080004c 	andi	r2,r8,1
    6854:	103e6a26 	beq	r2,zero,6200 <_dtoa_r+0xf70>
    6858:	003e6606 	br	61f4 <_dtoa_r+0xf64>
    685c:	d8c00317 	ldw	r3,12(sp)
    6860:	00800084 	movi	r2,2
    6864:	10c02916 	blt	r2,r3,690c <_dtoa_r+0x167c>
    6868:	d9000c17 	ldw	r4,48(sp)
    686c:	003e8806 	br	6290 <_dtoa_r+0x1000>
    6870:	04000084 	movi	r16,2
    6874:	003b9d06 	br	56ec <_dtoa_r+0x45c>
    6878:	d9001317 	ldw	r4,76(sp)
    687c:	d9000515 	stw	r4,20(sp)
    6880:	003cd606 	br	5bdc <_dtoa_r+0x94c>
    6884:	d8801317 	ldw	r2,76(sp)
    6888:	d8800515 	stw	r2,20(sp)
    688c:	003c2a06 	br	5938 <_dtoa_r+0x6a8>
    6890:	d9800317 	ldw	r6,12(sp)
    6894:	00800084 	movi	r2,2
    6898:	11801516 	blt	r2,r6,68f0 <_dtoa_r+0x1660>
    689c:	d9c00c17 	ldw	r7,48(sp)
    68a0:	d9c00615 	stw	r7,24(sp)
    68a4:	003df706 	br	6084 <_dtoa_r+0xdf4>
    68a8:	193d3926 	beq	r3,r4,5d90 <_dtoa_r+0xb00>
    68ac:	00c00f04 	movi	r3,60
    68b0:	1885c83a 	sub	r2,r3,r2
    68b4:	003ddf06 	br	6034 <_dtoa_r+0xda4>
    68b8:	e009883a 	mov	r4,fp
    68bc:	e0001115 	stw	zero,68(fp)
    68c0:	000b883a 	mov	r5,zero
    68c4:	00081200 	call	8120 <_Balloc>
    68c8:	d8800715 	stw	r2,28(sp)
    68cc:	d8c00717 	ldw	r3,28(sp)
    68d0:	00bfffc4 	movi	r2,-1
    68d4:	01000044 	movi	r4,1
    68d8:	d8800c15 	stw	r2,48(sp)
    68dc:	e0c01015 	stw	r3,64(fp)
    68e0:	d9000b15 	stw	r4,44(sp)
    68e4:	d8800615 	stw	r2,24(sp)
    68e8:	d8002215 	stw	zero,136(sp)
    68ec:	003c4106 	br	59f4 <_dtoa_r+0x764>
    68f0:	d8c00c17 	ldw	r3,48(sp)
    68f4:	d8c00615 	stw	r3,24(sp)
    68f8:	003e7006 	br	62bc <_dtoa_r+0x102c>
    68fc:	04400044 	movi	r17,1
    6900:	003b2006 	br	5584 <_dtoa_r+0x2f4>
    6904:	000b883a 	mov	r5,zero
    6908:	003b3d06 	br	5600 <_dtoa_r+0x370>
    690c:	d8800c17 	ldw	r2,48(sp)
    6910:	d8800615 	stw	r2,24(sp)
    6914:	003e6906 	br	62bc <_dtoa_r+0x102c>

00006918 <__sflush_r>:
    6918:	2880030b 	ldhu	r2,12(r5)
    691c:	defffb04 	addi	sp,sp,-20
    6920:	dcc00315 	stw	r19,12(sp)
    6924:	dc400115 	stw	r17,4(sp)
    6928:	dfc00415 	stw	ra,16(sp)
    692c:	dc800215 	stw	r18,8(sp)
    6930:	dc000015 	stw	r16,0(sp)
    6934:	10c0020c 	andi	r3,r2,8
    6938:	2823883a 	mov	r17,r5
    693c:	2027883a 	mov	r19,r4
    6940:	1800311e 	bne	r3,zero,6a08 <__sflush_r+0xf0>
    6944:	28c00117 	ldw	r3,4(r5)
    6948:	10820014 	ori	r2,r2,2048
    694c:	2880030d 	sth	r2,12(r5)
    6950:	00c04b0e 	bge	zero,r3,6a80 <__sflush_r+0x168>
    6954:	8a000a17 	ldw	r8,40(r17)
    6958:	40002326 	beq	r8,zero,69e8 <__sflush_r+0xd0>
    695c:	9c000017 	ldw	r16,0(r19)
    6960:	10c4000c 	andi	r3,r2,4096
    6964:	98000015 	stw	zero,0(r19)
    6968:	18004826 	beq	r3,zero,6a8c <__sflush_r+0x174>
    696c:	89801417 	ldw	r6,80(r17)
    6970:	10c0010c 	andi	r3,r2,4
    6974:	18000626 	beq	r3,zero,6990 <__sflush_r+0x78>
    6978:	88c00117 	ldw	r3,4(r17)
    697c:	88800c17 	ldw	r2,48(r17)
    6980:	30cdc83a 	sub	r6,r6,r3
    6984:	10000226 	beq	r2,zero,6990 <__sflush_r+0x78>
    6988:	88800f17 	ldw	r2,60(r17)
    698c:	308dc83a 	sub	r6,r6,r2
    6990:	89400717 	ldw	r5,28(r17)
    6994:	000f883a 	mov	r7,zero
    6998:	9809883a 	mov	r4,r19
    699c:	403ee83a 	callr	r8
    69a0:	00ffffc4 	movi	r3,-1
    69a4:	10c04426 	beq	r2,r3,6ab8 <__sflush_r+0x1a0>
    69a8:	88c0030b 	ldhu	r3,12(r17)
    69ac:	89000417 	ldw	r4,16(r17)
    69b0:	88000115 	stw	zero,4(r17)
    69b4:	197dffcc 	andi	r5,r3,63487
    69b8:	8940030d 	sth	r5,12(r17)
    69bc:	89000015 	stw	r4,0(r17)
    69c0:	18c4000c 	andi	r3,r3,4096
    69c4:	18002c1e 	bne	r3,zero,6a78 <__sflush_r+0x160>
    69c8:	89400c17 	ldw	r5,48(r17)
    69cc:	9c000015 	stw	r16,0(r19)
    69d0:	28000526 	beq	r5,zero,69e8 <__sflush_r+0xd0>
    69d4:	88801004 	addi	r2,r17,64
    69d8:	28800226 	beq	r5,r2,69e4 <__sflush_r+0xcc>
    69dc:	9809883a 	mov	r4,r19
    69e0:	00070840 	call	7084 <_free_r>
    69e4:	88000c15 	stw	zero,48(r17)
    69e8:	0005883a 	mov	r2,zero
    69ec:	dfc00417 	ldw	ra,16(sp)
    69f0:	dcc00317 	ldw	r19,12(sp)
    69f4:	dc800217 	ldw	r18,8(sp)
    69f8:	dc400117 	ldw	r17,4(sp)
    69fc:	dc000017 	ldw	r16,0(sp)
    6a00:	dec00504 	addi	sp,sp,20
    6a04:	f800283a 	ret
    6a08:	2c800417 	ldw	r18,16(r5)
    6a0c:	903ff626 	beq	r18,zero,69e8 <__sflush_r+0xd0>
    6a10:	2c000017 	ldw	r16,0(r5)
    6a14:	108000cc 	andi	r2,r2,3
    6a18:	2c800015 	stw	r18,0(r5)
    6a1c:	84a1c83a 	sub	r16,r16,r18
    6a20:	1000131e 	bne	r2,zero,6a70 <__sflush_r+0x158>
    6a24:	28800517 	ldw	r2,20(r5)
    6a28:	88800215 	stw	r2,8(r17)
    6a2c:	04000316 	blt	zero,r16,6a3c <__sflush_r+0x124>
    6a30:	003fed06 	br	69e8 <__sflush_r+0xd0>
    6a34:	90a5883a 	add	r18,r18,r2
    6a38:	043feb0e 	bge	zero,r16,69e8 <__sflush_r+0xd0>
    6a3c:	88800917 	ldw	r2,36(r17)
    6a40:	89400717 	ldw	r5,28(r17)
    6a44:	800f883a 	mov	r7,r16
    6a48:	900d883a 	mov	r6,r18
    6a4c:	9809883a 	mov	r4,r19
    6a50:	103ee83a 	callr	r2
    6a54:	80a1c83a 	sub	r16,r16,r2
    6a58:	00bff616 	blt	zero,r2,6a34 <__sflush_r+0x11c>
    6a5c:	88c0030b 	ldhu	r3,12(r17)
    6a60:	00bfffc4 	movi	r2,-1
    6a64:	18c01014 	ori	r3,r3,64
    6a68:	88c0030d 	sth	r3,12(r17)
    6a6c:	003fdf06 	br	69ec <__sflush_r+0xd4>
    6a70:	0005883a 	mov	r2,zero
    6a74:	003fec06 	br	6a28 <__sflush_r+0x110>
    6a78:	88801415 	stw	r2,80(r17)
    6a7c:	003fd206 	br	69c8 <__sflush_r+0xb0>
    6a80:	28c00f17 	ldw	r3,60(r5)
    6a84:	00ffb316 	blt	zero,r3,6954 <__sflush_r+0x3c>
    6a88:	003fd706 	br	69e8 <__sflush_r+0xd0>
    6a8c:	89400717 	ldw	r5,28(r17)
    6a90:	000d883a 	mov	r6,zero
    6a94:	01c00044 	movi	r7,1
    6a98:	9809883a 	mov	r4,r19
    6a9c:	403ee83a 	callr	r8
    6aa0:	100d883a 	mov	r6,r2
    6aa4:	00bfffc4 	movi	r2,-1
    6aa8:	30801426 	beq	r6,r2,6afc <__sflush_r+0x1e4>
    6aac:	8880030b 	ldhu	r2,12(r17)
    6ab0:	8a000a17 	ldw	r8,40(r17)
    6ab4:	003fae06 	br	6970 <__sflush_r+0x58>
    6ab8:	98c00017 	ldw	r3,0(r19)
    6abc:	183fba26 	beq	r3,zero,69a8 <__sflush_r+0x90>
    6ac0:	01000744 	movi	r4,29
    6ac4:	19000626 	beq	r3,r4,6ae0 <__sflush_r+0x1c8>
    6ac8:	01000584 	movi	r4,22
    6acc:	19000426 	beq	r3,r4,6ae0 <__sflush_r+0x1c8>
    6ad0:	88c0030b 	ldhu	r3,12(r17)
    6ad4:	18c01014 	ori	r3,r3,64
    6ad8:	88c0030d 	sth	r3,12(r17)
    6adc:	003fc306 	br	69ec <__sflush_r+0xd4>
    6ae0:	8880030b 	ldhu	r2,12(r17)
    6ae4:	88c00417 	ldw	r3,16(r17)
    6ae8:	88000115 	stw	zero,4(r17)
    6aec:	10bdffcc 	andi	r2,r2,63487
    6af0:	8880030d 	sth	r2,12(r17)
    6af4:	88c00015 	stw	r3,0(r17)
    6af8:	003fb306 	br	69c8 <__sflush_r+0xb0>
    6afc:	98800017 	ldw	r2,0(r19)
    6b00:	103fea26 	beq	r2,zero,6aac <__sflush_r+0x194>
    6b04:	00c00744 	movi	r3,29
    6b08:	10c00226 	beq	r2,r3,6b14 <__sflush_r+0x1fc>
    6b0c:	00c00584 	movi	r3,22
    6b10:	10c0031e 	bne	r2,r3,6b20 <__sflush_r+0x208>
    6b14:	9c000015 	stw	r16,0(r19)
    6b18:	0005883a 	mov	r2,zero
    6b1c:	003fb306 	br	69ec <__sflush_r+0xd4>
    6b20:	88c0030b 	ldhu	r3,12(r17)
    6b24:	3005883a 	mov	r2,r6
    6b28:	18c01014 	ori	r3,r3,64
    6b2c:	88c0030d 	sth	r3,12(r17)
    6b30:	003fae06 	br	69ec <__sflush_r+0xd4>

00006b34 <_fflush_r>:
    6b34:	defffd04 	addi	sp,sp,-12
    6b38:	dc000115 	stw	r16,4(sp)
    6b3c:	dfc00215 	stw	ra,8(sp)
    6b40:	2021883a 	mov	r16,r4
    6b44:	20000226 	beq	r4,zero,6b50 <_fflush_r+0x1c>
    6b48:	20800e17 	ldw	r2,56(r4)
    6b4c:	10000c26 	beq	r2,zero,6b80 <_fflush_r+0x4c>
    6b50:	2880030f 	ldh	r2,12(r5)
    6b54:	1000051e 	bne	r2,zero,6b6c <_fflush_r+0x38>
    6b58:	0005883a 	mov	r2,zero
    6b5c:	dfc00217 	ldw	ra,8(sp)
    6b60:	dc000117 	ldw	r16,4(sp)
    6b64:	dec00304 	addi	sp,sp,12
    6b68:	f800283a 	ret
    6b6c:	8009883a 	mov	r4,r16
    6b70:	dfc00217 	ldw	ra,8(sp)
    6b74:	dc000117 	ldw	r16,4(sp)
    6b78:	dec00304 	addi	sp,sp,12
    6b7c:	00069181 	jmpi	6918 <__sflush_r>
    6b80:	d9400015 	stw	r5,0(sp)
    6b84:	0006f100 	call	6f10 <__sinit>
    6b88:	d9400017 	ldw	r5,0(sp)
    6b8c:	003ff006 	br	6b50 <_fflush_r+0x1c>

00006b90 <fflush>:
    6b90:	20000526 	beq	r4,zero,6ba8 <fflush+0x18>
    6b94:	00800074 	movhi	r2,1
    6b98:	108d8304 	addi	r2,r2,13836
    6b9c:	200b883a 	mov	r5,r4
    6ba0:	11000017 	ldw	r4,0(r2)
    6ba4:	0006b341 	jmpi	6b34 <_fflush_r>
    6ba8:	00800074 	movhi	r2,1
    6bac:	108d8204 	addi	r2,r2,13832
    6bb0:	11000017 	ldw	r4,0(r2)
    6bb4:	01400034 	movhi	r5,0
    6bb8:	295acd04 	addi	r5,r5,27444
    6bbc:	00079141 	jmpi	7914 <_fwalk_reent>

00006bc0 <__fp_unlock>:
    6bc0:	0005883a 	mov	r2,zero
    6bc4:	f800283a 	ret

00006bc8 <_cleanup_r>:
    6bc8:	01400074 	movhi	r5,1
    6bcc:	296c3304 	addi	r5,r5,-20276
    6bd0:	00079141 	jmpi	7914 <_fwalk_reent>

00006bd4 <__sinit.part.1>:
    6bd4:	defff704 	addi	sp,sp,-36
    6bd8:	00c00034 	movhi	r3,0
    6bdc:	dfc00815 	stw	ra,32(sp)
    6be0:	ddc00715 	stw	r23,28(sp)
    6be4:	dd800615 	stw	r22,24(sp)
    6be8:	dd400515 	stw	r21,20(sp)
    6bec:	dd000415 	stw	r20,16(sp)
    6bf0:	dcc00315 	stw	r19,12(sp)
    6bf4:	dc800215 	stw	r18,8(sp)
    6bf8:	dc400115 	stw	r17,4(sp)
    6bfc:	dc000015 	stw	r16,0(sp)
    6c00:	18daf204 	addi	r3,r3,27592
    6c04:	24000117 	ldw	r16,4(r4)
    6c08:	20c00f15 	stw	r3,60(r4)
    6c0c:	2080bb04 	addi	r2,r4,748
    6c10:	00c000c4 	movi	r3,3
    6c14:	20c0b915 	stw	r3,740(r4)
    6c18:	2080ba15 	stw	r2,744(r4)
    6c1c:	2000b815 	stw	zero,736(r4)
    6c20:	05c00204 	movi	r23,8
    6c24:	00800104 	movi	r2,4
    6c28:	2025883a 	mov	r18,r4
    6c2c:	b80d883a 	mov	r6,r23
    6c30:	81001704 	addi	r4,r16,92
    6c34:	000b883a 	mov	r5,zero
    6c38:	80000015 	stw	zero,0(r16)
    6c3c:	80000115 	stw	zero,4(r16)
    6c40:	80000215 	stw	zero,8(r16)
    6c44:	8080030d 	sth	r2,12(r16)
    6c48:	80001915 	stw	zero,100(r16)
    6c4c:	8000038d 	sth	zero,14(r16)
    6c50:	80000415 	stw	zero,16(r16)
    6c54:	80000515 	stw	zero,20(r16)
    6c58:	80000615 	stw	zero,24(r16)
    6c5c:	0007ff80 	call	7ff8 <memset>
    6c60:	05800074 	movhi	r22,1
    6c64:	94400217 	ldw	r17,8(r18)
    6c68:	05400074 	movhi	r21,1
    6c6c:	05000074 	movhi	r20,1
    6c70:	04c00074 	movhi	r19,1
    6c74:	b5a5bd04 	addi	r22,r22,-26892
    6c78:	ad65d404 	addi	r21,r21,-26800
    6c7c:	a525f304 	addi	r20,r20,-26676
    6c80:	9ce60a04 	addi	r19,r19,-26584
    6c84:	85800815 	stw	r22,32(r16)
    6c88:	85400915 	stw	r21,36(r16)
    6c8c:	85000a15 	stw	r20,40(r16)
    6c90:	84c00b15 	stw	r19,44(r16)
    6c94:	84000715 	stw	r16,28(r16)
    6c98:	00800284 	movi	r2,10
    6c9c:	8880030d 	sth	r2,12(r17)
    6ca0:	00800044 	movi	r2,1
    6ca4:	b80d883a 	mov	r6,r23
    6ca8:	89001704 	addi	r4,r17,92
    6cac:	000b883a 	mov	r5,zero
    6cb0:	88000015 	stw	zero,0(r17)
    6cb4:	88000115 	stw	zero,4(r17)
    6cb8:	88000215 	stw	zero,8(r17)
    6cbc:	88001915 	stw	zero,100(r17)
    6cc0:	8880038d 	sth	r2,14(r17)
    6cc4:	88000415 	stw	zero,16(r17)
    6cc8:	88000515 	stw	zero,20(r17)
    6ccc:	88000615 	stw	zero,24(r17)
    6cd0:	0007ff80 	call	7ff8 <memset>
    6cd4:	94000317 	ldw	r16,12(r18)
    6cd8:	00800484 	movi	r2,18
    6cdc:	8c400715 	stw	r17,28(r17)
    6ce0:	8d800815 	stw	r22,32(r17)
    6ce4:	8d400915 	stw	r21,36(r17)
    6ce8:	8d000a15 	stw	r20,40(r17)
    6cec:	8cc00b15 	stw	r19,44(r17)
    6cf0:	8080030d 	sth	r2,12(r16)
    6cf4:	00800084 	movi	r2,2
    6cf8:	80000015 	stw	zero,0(r16)
    6cfc:	80000115 	stw	zero,4(r16)
    6d00:	80000215 	stw	zero,8(r16)
    6d04:	80001915 	stw	zero,100(r16)
    6d08:	8080038d 	sth	r2,14(r16)
    6d0c:	80000415 	stw	zero,16(r16)
    6d10:	80000515 	stw	zero,20(r16)
    6d14:	80000615 	stw	zero,24(r16)
    6d18:	b80d883a 	mov	r6,r23
    6d1c:	000b883a 	mov	r5,zero
    6d20:	81001704 	addi	r4,r16,92
    6d24:	0007ff80 	call	7ff8 <memset>
    6d28:	00800044 	movi	r2,1
    6d2c:	84000715 	stw	r16,28(r16)
    6d30:	85800815 	stw	r22,32(r16)
    6d34:	85400915 	stw	r21,36(r16)
    6d38:	85000a15 	stw	r20,40(r16)
    6d3c:	84c00b15 	stw	r19,44(r16)
    6d40:	90800e15 	stw	r2,56(r18)
    6d44:	dfc00817 	ldw	ra,32(sp)
    6d48:	ddc00717 	ldw	r23,28(sp)
    6d4c:	dd800617 	ldw	r22,24(sp)
    6d50:	dd400517 	ldw	r21,20(sp)
    6d54:	dd000417 	ldw	r20,16(sp)
    6d58:	dcc00317 	ldw	r19,12(sp)
    6d5c:	dc800217 	ldw	r18,8(sp)
    6d60:	dc400117 	ldw	r17,4(sp)
    6d64:	dc000017 	ldw	r16,0(sp)
    6d68:	dec00904 	addi	sp,sp,36
    6d6c:	f800283a 	ret

00006d70 <__fp_lock>:
    6d70:	0005883a 	mov	r2,zero
    6d74:	f800283a 	ret

00006d78 <__sfmoreglue>:
    6d78:	defffc04 	addi	sp,sp,-16
    6d7c:	dc400115 	stw	r17,4(sp)
    6d80:	2c7fffc4 	addi	r17,r5,-1
    6d84:	8c401a24 	muli	r17,r17,104
    6d88:	dc800215 	stw	r18,8(sp)
    6d8c:	2825883a 	mov	r18,r5
    6d90:	89401d04 	addi	r5,r17,116
    6d94:	dc000015 	stw	r16,0(sp)
    6d98:	dfc00315 	stw	ra,12(sp)
    6d9c:	00022340 	call	2234 <_malloc_r>
    6da0:	1021883a 	mov	r16,r2
    6da4:	10000726 	beq	r2,zero,6dc4 <__sfmoreglue+0x4c>
    6da8:	11000304 	addi	r4,r2,12
    6dac:	10000015 	stw	zero,0(r2)
    6db0:	14800115 	stw	r18,4(r2)
    6db4:	11000215 	stw	r4,8(r2)
    6db8:	89801a04 	addi	r6,r17,104
    6dbc:	000b883a 	mov	r5,zero
    6dc0:	0007ff80 	call	7ff8 <memset>
    6dc4:	8005883a 	mov	r2,r16
    6dc8:	dfc00317 	ldw	ra,12(sp)
    6dcc:	dc800217 	ldw	r18,8(sp)
    6dd0:	dc400117 	ldw	r17,4(sp)
    6dd4:	dc000017 	ldw	r16,0(sp)
    6dd8:	dec00404 	addi	sp,sp,16
    6ddc:	f800283a 	ret

00006de0 <__sfp>:
    6de0:	defffb04 	addi	sp,sp,-20
    6de4:	dc000015 	stw	r16,0(sp)
    6de8:	04000074 	movhi	r16,1
    6dec:	840d8204 	addi	r16,r16,13832
    6df0:	dcc00315 	stw	r19,12(sp)
    6df4:	2027883a 	mov	r19,r4
    6df8:	81000017 	ldw	r4,0(r16)
    6dfc:	dfc00415 	stw	ra,16(sp)
    6e00:	dc800215 	stw	r18,8(sp)
    6e04:	20800e17 	ldw	r2,56(r4)
    6e08:	dc400115 	stw	r17,4(sp)
    6e0c:	1000021e 	bne	r2,zero,6e18 <__sfp+0x38>
    6e10:	0006bd40 	call	6bd4 <__sinit.part.1>
    6e14:	81000017 	ldw	r4,0(r16)
    6e18:	2480b804 	addi	r18,r4,736
    6e1c:	047fffc4 	movi	r17,-1
    6e20:	91000117 	ldw	r4,4(r18)
    6e24:	94000217 	ldw	r16,8(r18)
    6e28:	213fffc4 	addi	r4,r4,-1
    6e2c:	20000a16 	blt	r4,zero,6e58 <__sfp+0x78>
    6e30:	8080030f 	ldh	r2,12(r16)
    6e34:	10000c26 	beq	r2,zero,6e68 <__sfp+0x88>
    6e38:	80c01d04 	addi	r3,r16,116
    6e3c:	00000206 	br	6e48 <__sfp+0x68>
    6e40:	18bfe60f 	ldh	r2,-104(r3)
    6e44:	10000826 	beq	r2,zero,6e68 <__sfp+0x88>
    6e48:	213fffc4 	addi	r4,r4,-1
    6e4c:	1c3ffd04 	addi	r16,r3,-12
    6e50:	18c01a04 	addi	r3,r3,104
    6e54:	247ffa1e 	bne	r4,r17,6e40 <__sfp+0x60>
    6e58:	90800017 	ldw	r2,0(r18)
    6e5c:	10001d26 	beq	r2,zero,6ed4 <__sfp+0xf4>
    6e60:	1025883a 	mov	r18,r2
    6e64:	003fee06 	br	6e20 <__sfp+0x40>
    6e68:	00bfffc4 	movi	r2,-1
    6e6c:	8080038d 	sth	r2,14(r16)
    6e70:	00800044 	movi	r2,1
    6e74:	8080030d 	sth	r2,12(r16)
    6e78:	80001915 	stw	zero,100(r16)
    6e7c:	80000015 	stw	zero,0(r16)
    6e80:	80000215 	stw	zero,8(r16)
    6e84:	80000115 	stw	zero,4(r16)
    6e88:	80000415 	stw	zero,16(r16)
    6e8c:	80000515 	stw	zero,20(r16)
    6e90:	80000615 	stw	zero,24(r16)
    6e94:	01800204 	movi	r6,8
    6e98:	000b883a 	mov	r5,zero
    6e9c:	81001704 	addi	r4,r16,92
    6ea0:	0007ff80 	call	7ff8 <memset>
    6ea4:	8005883a 	mov	r2,r16
    6ea8:	80000c15 	stw	zero,48(r16)
    6eac:	80000d15 	stw	zero,52(r16)
    6eb0:	80001115 	stw	zero,68(r16)
    6eb4:	80001215 	stw	zero,72(r16)
    6eb8:	dfc00417 	ldw	ra,16(sp)
    6ebc:	dcc00317 	ldw	r19,12(sp)
    6ec0:	dc800217 	ldw	r18,8(sp)
    6ec4:	dc400117 	ldw	r17,4(sp)
    6ec8:	dc000017 	ldw	r16,0(sp)
    6ecc:	dec00504 	addi	sp,sp,20
    6ed0:	f800283a 	ret
    6ed4:	01400104 	movi	r5,4
    6ed8:	9809883a 	mov	r4,r19
    6edc:	0006d780 	call	6d78 <__sfmoreglue>
    6ee0:	90800015 	stw	r2,0(r18)
    6ee4:	103fde1e 	bne	r2,zero,6e60 <__sfp+0x80>
    6ee8:	00800304 	movi	r2,12
    6eec:	98800015 	stw	r2,0(r19)
    6ef0:	0005883a 	mov	r2,zero
    6ef4:	003ff006 	br	6eb8 <__sfp+0xd8>

00006ef8 <_cleanup>:
    6ef8:	00800074 	movhi	r2,1
    6efc:	108d8204 	addi	r2,r2,13832
    6f00:	11000017 	ldw	r4,0(r2)
    6f04:	01400074 	movhi	r5,1
    6f08:	296c3304 	addi	r5,r5,-20276
    6f0c:	00079141 	jmpi	7914 <_fwalk_reent>

00006f10 <__sinit>:
    6f10:	20800e17 	ldw	r2,56(r4)
    6f14:	10000126 	beq	r2,zero,6f1c <__sinit+0xc>
    6f18:	f800283a 	ret
    6f1c:	0006bd41 	jmpi	6bd4 <__sinit.part.1>

00006f20 <__sfp_lock_acquire>:
    6f20:	f800283a 	ret

00006f24 <__sfp_lock_release>:
    6f24:	f800283a 	ret

00006f28 <__sinit_lock_acquire>:
    6f28:	f800283a 	ret

00006f2c <__sinit_lock_release>:
    6f2c:	f800283a 	ret

00006f30 <__fp_lock_all>:
    6f30:	00800074 	movhi	r2,1
    6f34:	108d8304 	addi	r2,r2,13836
    6f38:	11000017 	ldw	r4,0(r2)
    6f3c:	01400034 	movhi	r5,0
    6f40:	295b5c04 	addi	r5,r5,28016
    6f44:	00078501 	jmpi	7850 <_fwalk>

00006f48 <__fp_unlock_all>:
    6f48:	00800074 	movhi	r2,1
    6f4c:	108d8304 	addi	r2,r2,13836
    6f50:	11000017 	ldw	r4,0(r2)
    6f54:	01400034 	movhi	r5,0
    6f58:	295af004 	addi	r5,r5,27584
    6f5c:	00078501 	jmpi	7850 <_fwalk>

00006f60 <_malloc_trim_r>:
    6f60:	defffb04 	addi	sp,sp,-20
    6f64:	dcc00315 	stw	r19,12(sp)
    6f68:	04c00074 	movhi	r19,1
    6f6c:	dc800215 	stw	r18,8(sp)
    6f70:	dc400115 	stw	r17,4(sp)
    6f74:	dc000015 	stw	r16,0(sp)
    6f78:	dfc00415 	stw	ra,16(sp)
    6f7c:	2821883a 	mov	r16,r5
    6f80:	9cc6d504 	addi	r19,r19,6996
    6f84:	2025883a 	mov	r18,r4
    6f88:	000ef1c0 	call	ef1c <__malloc_lock>
    6f8c:	98800217 	ldw	r2,8(r19)
    6f90:	14400117 	ldw	r17,4(r2)
    6f94:	00bfff04 	movi	r2,-4
    6f98:	88a2703a 	and	r17,r17,r2
    6f9c:	8c21c83a 	sub	r16,r17,r16
    6fa0:	8403fbc4 	addi	r16,r16,4079
    6fa4:	8020d33a 	srli	r16,r16,12
    6fa8:	0083ffc4 	movi	r2,4095
    6fac:	843fffc4 	addi	r16,r16,-1
    6fb0:	8020933a 	slli	r16,r16,12
    6fb4:	1400060e 	bge	r2,r16,6fd0 <_malloc_trim_r+0x70>
    6fb8:	000b883a 	mov	r5,zero
    6fbc:	9009883a 	mov	r4,r18
    6fc0:	0002b800 	call	2b80 <_sbrk_r>
    6fc4:	98c00217 	ldw	r3,8(r19)
    6fc8:	1c47883a 	add	r3,r3,r17
    6fcc:	10c00a26 	beq	r2,r3,6ff8 <_malloc_trim_r+0x98>
    6fd0:	9009883a 	mov	r4,r18
    6fd4:	000ef400 	call	ef40 <__malloc_unlock>
    6fd8:	0005883a 	mov	r2,zero
    6fdc:	dfc00417 	ldw	ra,16(sp)
    6fe0:	dcc00317 	ldw	r19,12(sp)
    6fe4:	dc800217 	ldw	r18,8(sp)
    6fe8:	dc400117 	ldw	r17,4(sp)
    6fec:	dc000017 	ldw	r16,0(sp)
    6ff0:	dec00504 	addi	sp,sp,20
    6ff4:	f800283a 	ret
    6ff8:	040bc83a 	sub	r5,zero,r16
    6ffc:	9009883a 	mov	r4,r18
    7000:	0002b800 	call	2b80 <_sbrk_r>
    7004:	00ffffc4 	movi	r3,-1
    7008:	10c00d26 	beq	r2,r3,7040 <_malloc_trim_r+0xe0>
    700c:	00c00074 	movhi	r3,1
    7010:	18d46504 	addi	r3,r3,20884
    7014:	18800017 	ldw	r2,0(r3)
    7018:	99000217 	ldw	r4,8(r19)
    701c:	8c23c83a 	sub	r17,r17,r16
    7020:	8c400054 	ori	r17,r17,1
    7024:	1421c83a 	sub	r16,r2,r16
    7028:	24400115 	stw	r17,4(r4)
    702c:	9009883a 	mov	r4,r18
    7030:	1c000015 	stw	r16,0(r3)
    7034:	000ef400 	call	ef40 <__malloc_unlock>
    7038:	00800044 	movi	r2,1
    703c:	003fe706 	br	6fdc <_malloc_trim_r+0x7c>
    7040:	000b883a 	mov	r5,zero
    7044:	9009883a 	mov	r4,r18
    7048:	0002b800 	call	2b80 <_sbrk_r>
    704c:	99000217 	ldw	r4,8(r19)
    7050:	014003c4 	movi	r5,15
    7054:	1107c83a 	sub	r3,r2,r4
    7058:	28ffdd0e 	bge	r5,r3,6fd0 <_malloc_trim_r+0x70>
    705c:	01400074 	movhi	r5,1
    7060:	294d8004 	addi	r5,r5,13824
    7064:	29400017 	ldw	r5,0(r5)
    7068:	18c00054 	ori	r3,r3,1
    706c:	20c00115 	stw	r3,4(r4)
    7070:	00c00074 	movhi	r3,1
    7074:	1145c83a 	sub	r2,r2,r5
    7078:	18d46504 	addi	r3,r3,20884
    707c:	18800015 	stw	r2,0(r3)
    7080:	003fd306 	br	6fd0 <_malloc_trim_r+0x70>

00007084 <_free_r>:
    7084:	28004126 	beq	r5,zero,718c <_free_r+0x108>
    7088:	defffd04 	addi	sp,sp,-12
    708c:	dc400115 	stw	r17,4(sp)
    7090:	dc000015 	stw	r16,0(sp)
    7094:	2023883a 	mov	r17,r4
    7098:	2821883a 	mov	r16,r5
    709c:	dfc00215 	stw	ra,8(sp)
    70a0:	000ef1c0 	call	ef1c <__malloc_lock>
    70a4:	81ffff17 	ldw	r7,-4(r16)
    70a8:	00bfff84 	movi	r2,-2
    70ac:	01000074 	movhi	r4,1
    70b0:	81bffe04 	addi	r6,r16,-8
    70b4:	3884703a 	and	r2,r7,r2
    70b8:	2106d504 	addi	r4,r4,6996
    70bc:	308b883a 	add	r5,r6,r2
    70c0:	2a400117 	ldw	r9,4(r5)
    70c4:	22000217 	ldw	r8,8(r4)
    70c8:	00ffff04 	movi	r3,-4
    70cc:	48c6703a 	and	r3,r9,r3
    70d0:	2a005726 	beq	r5,r8,7230 <_free_r+0x1ac>
    70d4:	28c00115 	stw	r3,4(r5)
    70d8:	39c0004c 	andi	r7,r7,1
    70dc:	3800091e 	bne	r7,zero,7104 <_free_r+0x80>
    70e0:	823ffe17 	ldw	r8,-8(r16)
    70e4:	22400204 	addi	r9,r4,8
    70e8:	320dc83a 	sub	r6,r6,r8
    70ec:	31c00217 	ldw	r7,8(r6)
    70f0:	1205883a 	add	r2,r2,r8
    70f4:	3a406526 	beq	r7,r9,728c <_free_r+0x208>
    70f8:	32000317 	ldw	r8,12(r6)
    70fc:	3a000315 	stw	r8,12(r7)
    7100:	41c00215 	stw	r7,8(r8)
    7104:	28cf883a 	add	r7,r5,r3
    7108:	39c00117 	ldw	r7,4(r7)
    710c:	39c0004c 	andi	r7,r7,1
    7110:	38003a26 	beq	r7,zero,71fc <_free_r+0x178>
    7114:	10c00054 	ori	r3,r2,1
    7118:	30c00115 	stw	r3,4(r6)
    711c:	3087883a 	add	r3,r6,r2
    7120:	18800015 	stw	r2,0(r3)
    7124:	00c07fc4 	movi	r3,511
    7128:	18801936 	bltu	r3,r2,7190 <_free_r+0x10c>
    712c:	1004d0fa 	srli	r2,r2,3
    7130:	01c00044 	movi	r7,1
    7134:	21400117 	ldw	r5,4(r4)
    7138:	10c00044 	addi	r3,r2,1
    713c:	18c7883a 	add	r3,r3,r3
    7140:	1005d0ba 	srai	r2,r2,2
    7144:	18c7883a 	add	r3,r3,r3
    7148:	18c7883a 	add	r3,r3,r3
    714c:	1907883a 	add	r3,r3,r4
    7150:	3884983a 	sll	r2,r7,r2
    7154:	19c00017 	ldw	r7,0(r3)
    7158:	1a3ffe04 	addi	r8,r3,-8
    715c:	1144b03a 	or	r2,r2,r5
    7160:	32000315 	stw	r8,12(r6)
    7164:	31c00215 	stw	r7,8(r6)
    7168:	20800115 	stw	r2,4(r4)
    716c:	19800015 	stw	r6,0(r3)
    7170:	39800315 	stw	r6,12(r7)
    7174:	8809883a 	mov	r4,r17
    7178:	dfc00217 	ldw	ra,8(sp)
    717c:	dc400117 	ldw	r17,4(sp)
    7180:	dc000017 	ldw	r16,0(sp)
    7184:	dec00304 	addi	sp,sp,12
    7188:	000ef401 	jmpi	ef40 <__malloc_unlock>
    718c:	f800283a 	ret
    7190:	100ad27a 	srli	r5,r2,9
    7194:	00c00104 	movi	r3,4
    7198:	19404a36 	bltu	r3,r5,72c4 <_free_r+0x240>
    719c:	100ad1ba 	srli	r5,r2,6
    71a0:	28c00e44 	addi	r3,r5,57
    71a4:	18c7883a 	add	r3,r3,r3
    71a8:	29400e04 	addi	r5,r5,56
    71ac:	18c7883a 	add	r3,r3,r3
    71b0:	18c7883a 	add	r3,r3,r3
    71b4:	1909883a 	add	r4,r3,r4
    71b8:	20c00017 	ldw	r3,0(r4)
    71bc:	01c00074 	movhi	r7,1
    71c0:	213ffe04 	addi	r4,r4,-8
    71c4:	39c6d504 	addi	r7,r7,6996
    71c8:	20c04426 	beq	r4,r3,72dc <_free_r+0x258>
    71cc:	01ffff04 	movi	r7,-4
    71d0:	19400117 	ldw	r5,4(r3)
    71d4:	29ca703a 	and	r5,r5,r7
    71d8:	1140022e 	bgeu	r2,r5,71e4 <_free_r+0x160>
    71dc:	18c00217 	ldw	r3,8(r3)
    71e0:	20fffb1e 	bne	r4,r3,71d0 <_free_r+0x14c>
    71e4:	19000317 	ldw	r4,12(r3)
    71e8:	31000315 	stw	r4,12(r6)
    71ec:	30c00215 	stw	r3,8(r6)
    71f0:	21800215 	stw	r6,8(r4)
    71f4:	19800315 	stw	r6,12(r3)
    71f8:	003fde06 	br	7174 <_free_r+0xf0>
    71fc:	29c00217 	ldw	r7,8(r5)
    7200:	10c5883a 	add	r2,r2,r3
    7204:	00c00074 	movhi	r3,1
    7208:	18c6d704 	addi	r3,r3,7004
    720c:	38c03b26 	beq	r7,r3,72fc <_free_r+0x278>
    7210:	2a000317 	ldw	r8,12(r5)
    7214:	11400054 	ori	r5,r2,1
    7218:	3087883a 	add	r3,r6,r2
    721c:	3a000315 	stw	r8,12(r7)
    7220:	41c00215 	stw	r7,8(r8)
    7224:	31400115 	stw	r5,4(r6)
    7228:	18800015 	stw	r2,0(r3)
    722c:	003fbd06 	br	7124 <_free_r+0xa0>
    7230:	39c0004c 	andi	r7,r7,1
    7234:	10c5883a 	add	r2,r2,r3
    7238:	3800071e 	bne	r7,zero,7258 <_free_r+0x1d4>
    723c:	81fffe17 	ldw	r7,-8(r16)
    7240:	31cdc83a 	sub	r6,r6,r7
    7244:	30c00317 	ldw	r3,12(r6)
    7248:	31400217 	ldw	r5,8(r6)
    724c:	11c5883a 	add	r2,r2,r7
    7250:	28c00315 	stw	r3,12(r5)
    7254:	19400215 	stw	r5,8(r3)
    7258:	10c00054 	ori	r3,r2,1
    725c:	30c00115 	stw	r3,4(r6)
    7260:	00c00074 	movhi	r3,1
    7264:	18cd8104 	addi	r3,r3,13828
    7268:	18c00017 	ldw	r3,0(r3)
    726c:	21800215 	stw	r6,8(r4)
    7270:	10ffc036 	bltu	r2,r3,7174 <_free_r+0xf0>
    7274:	00800074 	movhi	r2,1
    7278:	10945704 	addi	r2,r2,20828
    727c:	11400017 	ldw	r5,0(r2)
    7280:	8809883a 	mov	r4,r17
    7284:	0006f600 	call	6f60 <_malloc_trim_r>
    7288:	003fba06 	br	7174 <_free_r+0xf0>
    728c:	28c9883a 	add	r4,r5,r3
    7290:	21000117 	ldw	r4,4(r4)
    7294:	2100004c 	andi	r4,r4,1
    7298:	2000391e 	bne	r4,zero,7380 <_free_r+0x2fc>
    729c:	29c00217 	ldw	r7,8(r5)
    72a0:	29000317 	ldw	r4,12(r5)
    72a4:	1885883a 	add	r2,r3,r2
    72a8:	10c00054 	ori	r3,r2,1
    72ac:	39000315 	stw	r4,12(r7)
    72b0:	21c00215 	stw	r7,8(r4)
    72b4:	30c00115 	stw	r3,4(r6)
    72b8:	308d883a 	add	r6,r6,r2
    72bc:	30800015 	stw	r2,0(r6)
    72c0:	003fac06 	br	7174 <_free_r+0xf0>
    72c4:	00c00504 	movi	r3,20
    72c8:	19401536 	bltu	r3,r5,7320 <_free_r+0x29c>
    72cc:	28c01704 	addi	r3,r5,92
    72d0:	18c7883a 	add	r3,r3,r3
    72d4:	294016c4 	addi	r5,r5,91
    72d8:	003fb406 	br	71ac <_free_r+0x128>
    72dc:	280bd0ba 	srai	r5,r5,2
    72e0:	00c00044 	movi	r3,1
    72e4:	38800117 	ldw	r2,4(r7)
    72e8:	194a983a 	sll	r5,r3,r5
    72ec:	2007883a 	mov	r3,r4
    72f0:	2884b03a 	or	r2,r5,r2
    72f4:	38800115 	stw	r2,4(r7)
    72f8:	003fbb06 	br	71e8 <_free_r+0x164>
    72fc:	21800515 	stw	r6,20(r4)
    7300:	21800415 	stw	r6,16(r4)
    7304:	10c00054 	ori	r3,r2,1
    7308:	31c00315 	stw	r7,12(r6)
    730c:	31c00215 	stw	r7,8(r6)
    7310:	30c00115 	stw	r3,4(r6)
    7314:	308d883a 	add	r6,r6,r2
    7318:	30800015 	stw	r2,0(r6)
    731c:	003f9506 	br	7174 <_free_r+0xf0>
    7320:	00c01504 	movi	r3,84
    7324:	19400536 	bltu	r3,r5,733c <_free_r+0x2b8>
    7328:	100ad33a 	srli	r5,r2,12
    732c:	28c01bc4 	addi	r3,r5,111
    7330:	18c7883a 	add	r3,r3,r3
    7334:	29401b84 	addi	r5,r5,110
    7338:	003f9c06 	br	71ac <_free_r+0x128>
    733c:	00c05504 	movi	r3,340
    7340:	19400536 	bltu	r3,r5,7358 <_free_r+0x2d4>
    7344:	100ad3fa 	srli	r5,r2,15
    7348:	28c01e04 	addi	r3,r5,120
    734c:	18c7883a 	add	r3,r3,r3
    7350:	29401dc4 	addi	r5,r5,119
    7354:	003f9506 	br	71ac <_free_r+0x128>
    7358:	00c15504 	movi	r3,1364
    735c:	19400536 	bltu	r3,r5,7374 <_free_r+0x2f0>
    7360:	100ad4ba 	srli	r5,r2,18
    7364:	28c01f44 	addi	r3,r5,125
    7368:	18c7883a 	add	r3,r3,r3
    736c:	29401f04 	addi	r5,r5,124
    7370:	003f8e06 	br	71ac <_free_r+0x128>
    7374:	00c03f84 	movi	r3,254
    7378:	01401f84 	movi	r5,126
    737c:	003f8b06 	br	71ac <_free_r+0x128>
    7380:	10c00054 	ori	r3,r2,1
    7384:	30c00115 	stw	r3,4(r6)
    7388:	308d883a 	add	r6,r6,r2
    738c:	30800015 	stw	r2,0(r6)
    7390:	003f7806 	br	7174 <_free_r+0xf0>

00007394 <__sfvwrite_r>:
    7394:	30800217 	ldw	r2,8(r6)
    7398:	10006726 	beq	r2,zero,7538 <__sfvwrite_r+0x1a4>
    739c:	28c0030b 	ldhu	r3,12(r5)
    73a0:	defff404 	addi	sp,sp,-48
    73a4:	dd400715 	stw	r21,28(sp)
    73a8:	dd000615 	stw	r20,24(sp)
    73ac:	dc000215 	stw	r16,8(sp)
    73b0:	dfc00b15 	stw	ra,44(sp)
    73b4:	df000a15 	stw	fp,40(sp)
    73b8:	ddc00915 	stw	r23,36(sp)
    73bc:	dd800815 	stw	r22,32(sp)
    73c0:	dcc00515 	stw	r19,20(sp)
    73c4:	dc800415 	stw	r18,16(sp)
    73c8:	dc400315 	stw	r17,12(sp)
    73cc:	1880020c 	andi	r2,r3,8
    73d0:	2821883a 	mov	r16,r5
    73d4:	202b883a 	mov	r21,r4
    73d8:	3029883a 	mov	r20,r6
    73dc:	10002726 	beq	r2,zero,747c <__sfvwrite_r+0xe8>
    73e0:	28800417 	ldw	r2,16(r5)
    73e4:	10002526 	beq	r2,zero,747c <__sfvwrite_r+0xe8>
    73e8:	1880008c 	andi	r2,r3,2
    73ec:	a4400017 	ldw	r17,0(r20)
    73f0:	10002a26 	beq	r2,zero,749c <__sfvwrite_r+0x108>
    73f4:	05a00034 	movhi	r22,32768
    73f8:	0027883a 	mov	r19,zero
    73fc:	0025883a 	mov	r18,zero
    7400:	b5bf0004 	addi	r22,r22,-1024
    7404:	980d883a 	mov	r6,r19
    7408:	a809883a 	mov	r4,r21
    740c:	90004626 	beq	r18,zero,7528 <__sfvwrite_r+0x194>
    7410:	900f883a 	mov	r7,r18
    7414:	b480022e 	bgeu	r22,r18,7420 <__sfvwrite_r+0x8c>
    7418:	01e00034 	movhi	r7,32768
    741c:	39ff0004 	addi	r7,r7,-1024
    7420:	80800917 	ldw	r2,36(r16)
    7424:	81400717 	ldw	r5,28(r16)
    7428:	103ee83a 	callr	r2
    742c:	0080570e 	bge	zero,r2,758c <__sfvwrite_r+0x1f8>
    7430:	a0c00217 	ldw	r3,8(r20)
    7434:	98a7883a 	add	r19,r19,r2
    7438:	90a5c83a 	sub	r18,r18,r2
    743c:	1885c83a 	sub	r2,r3,r2
    7440:	a0800215 	stw	r2,8(r20)
    7444:	103fef1e 	bne	r2,zero,7404 <__sfvwrite_r+0x70>
    7448:	0005883a 	mov	r2,zero
    744c:	dfc00b17 	ldw	ra,44(sp)
    7450:	df000a17 	ldw	fp,40(sp)
    7454:	ddc00917 	ldw	r23,36(sp)
    7458:	dd800817 	ldw	r22,32(sp)
    745c:	dd400717 	ldw	r21,28(sp)
    7460:	dd000617 	ldw	r20,24(sp)
    7464:	dcc00517 	ldw	r19,20(sp)
    7468:	dc800417 	ldw	r18,16(sp)
    746c:	dc400317 	ldw	r17,12(sp)
    7470:	dc000217 	ldw	r16,8(sp)
    7474:	dec00c04 	addi	sp,sp,48
    7478:	f800283a 	ret
    747c:	800b883a 	mov	r5,r16
    7480:	a809883a 	mov	r4,r21
    7484:	0004f3c0 	call	4f3c <__swsetup_r>
    7488:	1000eb1e 	bne	r2,zero,7838 <__sfvwrite_r+0x4a4>
    748c:	80c0030b 	ldhu	r3,12(r16)
    7490:	a4400017 	ldw	r17,0(r20)
    7494:	1880008c 	andi	r2,r3,2
    7498:	103fd61e 	bne	r2,zero,73f4 <__sfvwrite_r+0x60>
    749c:	1880004c 	andi	r2,r3,1
    74a0:	10003f1e 	bne	r2,zero,75a0 <__sfvwrite_r+0x20c>
    74a4:	0039883a 	mov	fp,zero
    74a8:	0025883a 	mov	r18,zero
    74ac:	90001a26 	beq	r18,zero,7518 <__sfvwrite_r+0x184>
    74b0:	1880800c 	andi	r2,r3,512
    74b4:	84c00217 	ldw	r19,8(r16)
    74b8:	10002126 	beq	r2,zero,7540 <__sfvwrite_r+0x1ac>
    74bc:	982f883a 	mov	r23,r19
    74c0:	94c09336 	bltu	r18,r19,7710 <__sfvwrite_r+0x37c>
    74c4:	1881200c 	andi	r2,r3,1152
    74c8:	10009e1e 	bne	r2,zero,7744 <__sfvwrite_r+0x3b0>
    74cc:	81000017 	ldw	r4,0(r16)
    74d0:	b80d883a 	mov	r6,r23
    74d4:	e00b883a 	mov	r5,fp
    74d8:	0007e9c0 	call	7e9c <memmove>
    74dc:	80c00217 	ldw	r3,8(r16)
    74e0:	81000017 	ldw	r4,0(r16)
    74e4:	9005883a 	mov	r2,r18
    74e8:	1ce7c83a 	sub	r19,r3,r19
    74ec:	25cf883a 	add	r7,r4,r23
    74f0:	84c00215 	stw	r19,8(r16)
    74f4:	81c00015 	stw	r7,0(r16)
    74f8:	a0c00217 	ldw	r3,8(r20)
    74fc:	e0b9883a 	add	fp,fp,r2
    7500:	90a5c83a 	sub	r18,r18,r2
    7504:	18a7c83a 	sub	r19,r3,r2
    7508:	a4c00215 	stw	r19,8(r20)
    750c:	983fce26 	beq	r19,zero,7448 <__sfvwrite_r+0xb4>
    7510:	80c0030b 	ldhu	r3,12(r16)
    7514:	903fe61e 	bne	r18,zero,74b0 <__sfvwrite_r+0x11c>
    7518:	8f000017 	ldw	fp,0(r17)
    751c:	8c800117 	ldw	r18,4(r17)
    7520:	8c400204 	addi	r17,r17,8
    7524:	003fe106 	br	74ac <__sfvwrite_r+0x118>
    7528:	8cc00017 	ldw	r19,0(r17)
    752c:	8c800117 	ldw	r18,4(r17)
    7530:	8c400204 	addi	r17,r17,8
    7534:	003fb306 	br	7404 <__sfvwrite_r+0x70>
    7538:	0005883a 	mov	r2,zero
    753c:	f800283a 	ret
    7540:	81000017 	ldw	r4,0(r16)
    7544:	80800417 	ldw	r2,16(r16)
    7548:	11005736 	bltu	r2,r4,76a8 <__sfvwrite_r+0x314>
    754c:	85c00517 	ldw	r23,20(r16)
    7550:	95c05536 	bltu	r18,r23,76a8 <__sfvwrite_r+0x314>
    7554:	00a00034 	movhi	r2,32768
    7558:	10bfffc4 	addi	r2,r2,-1
    755c:	9009883a 	mov	r4,r18
    7560:	1480012e 	bgeu	r2,r18,7568 <__sfvwrite_r+0x1d4>
    7564:	1009883a 	mov	r4,r2
    7568:	b80b883a 	mov	r5,r23
    756c:	00020580 	call	2058 <__divsi3>
    7570:	15cf383a 	mul	r7,r2,r23
    7574:	81400717 	ldw	r5,28(r16)
    7578:	80800917 	ldw	r2,36(r16)
    757c:	e00d883a 	mov	r6,fp
    7580:	a809883a 	mov	r4,r21
    7584:	103ee83a 	callr	r2
    7588:	00bfdb16 	blt	zero,r2,74f8 <__sfvwrite_r+0x164>
    758c:	8080030b 	ldhu	r2,12(r16)
    7590:	10801014 	ori	r2,r2,64
    7594:	8080030d 	sth	r2,12(r16)
    7598:	00bfffc4 	movi	r2,-1
    759c:	003fab06 	br	744c <__sfvwrite_r+0xb8>
    75a0:	0027883a 	mov	r19,zero
    75a4:	0011883a 	mov	r8,zero
    75a8:	0039883a 	mov	fp,zero
    75ac:	0025883a 	mov	r18,zero
    75b0:	90001f26 	beq	r18,zero,7630 <__sfvwrite_r+0x29c>
    75b4:	40005a26 	beq	r8,zero,7720 <__sfvwrite_r+0x38c>
    75b8:	982d883a 	mov	r22,r19
    75bc:	94c0012e 	bgeu	r18,r19,75c4 <__sfvwrite_r+0x230>
    75c0:	902d883a 	mov	r22,r18
    75c4:	81000017 	ldw	r4,0(r16)
    75c8:	80800417 	ldw	r2,16(r16)
    75cc:	b02f883a 	mov	r23,r22
    75d0:	81c00517 	ldw	r7,20(r16)
    75d4:	1100032e 	bgeu	r2,r4,75e4 <__sfvwrite_r+0x250>
    75d8:	80c00217 	ldw	r3,8(r16)
    75dc:	38c7883a 	add	r3,r7,r3
    75e0:	1d801816 	blt	r3,r22,7644 <__sfvwrite_r+0x2b0>
    75e4:	b1c03e16 	blt	r22,r7,76e0 <__sfvwrite_r+0x34c>
    75e8:	80800917 	ldw	r2,36(r16)
    75ec:	81400717 	ldw	r5,28(r16)
    75f0:	e00d883a 	mov	r6,fp
    75f4:	da000115 	stw	r8,4(sp)
    75f8:	a809883a 	mov	r4,r21
    75fc:	103ee83a 	callr	r2
    7600:	102f883a 	mov	r23,r2
    7604:	da000117 	ldw	r8,4(sp)
    7608:	00bfe00e 	bge	zero,r2,758c <__sfvwrite_r+0x1f8>
    760c:	9de7c83a 	sub	r19,r19,r23
    7610:	98001f26 	beq	r19,zero,7690 <__sfvwrite_r+0x2fc>
    7614:	a0800217 	ldw	r2,8(r20)
    7618:	e5f9883a 	add	fp,fp,r23
    761c:	95e5c83a 	sub	r18,r18,r23
    7620:	15efc83a 	sub	r23,r2,r23
    7624:	a5c00215 	stw	r23,8(r20)
    7628:	b83f8726 	beq	r23,zero,7448 <__sfvwrite_r+0xb4>
    762c:	903fe11e 	bne	r18,zero,75b4 <__sfvwrite_r+0x220>
    7630:	8f000017 	ldw	fp,0(r17)
    7634:	8c800117 	ldw	r18,4(r17)
    7638:	0011883a 	mov	r8,zero
    763c:	8c400204 	addi	r17,r17,8
    7640:	003fdb06 	br	75b0 <__sfvwrite_r+0x21c>
    7644:	180d883a 	mov	r6,r3
    7648:	e00b883a 	mov	r5,fp
    764c:	da000115 	stw	r8,4(sp)
    7650:	d8c00015 	stw	r3,0(sp)
    7654:	0007e9c0 	call	7e9c <memmove>
    7658:	d8c00017 	ldw	r3,0(sp)
    765c:	80800017 	ldw	r2,0(r16)
    7660:	800b883a 	mov	r5,r16
    7664:	a809883a 	mov	r4,r21
    7668:	10c5883a 	add	r2,r2,r3
    766c:	80800015 	stw	r2,0(r16)
    7670:	d8c00015 	stw	r3,0(sp)
    7674:	0006b340 	call	6b34 <_fflush_r>
    7678:	d8c00017 	ldw	r3,0(sp)
    767c:	da000117 	ldw	r8,4(sp)
    7680:	103fc21e 	bne	r2,zero,758c <__sfvwrite_r+0x1f8>
    7684:	182f883a 	mov	r23,r3
    7688:	9de7c83a 	sub	r19,r19,r23
    768c:	983fe11e 	bne	r19,zero,7614 <__sfvwrite_r+0x280>
    7690:	800b883a 	mov	r5,r16
    7694:	a809883a 	mov	r4,r21
    7698:	0006b340 	call	6b34 <_fflush_r>
    769c:	103fbb1e 	bne	r2,zero,758c <__sfvwrite_r+0x1f8>
    76a0:	0011883a 	mov	r8,zero
    76a4:	003fdb06 	br	7614 <__sfvwrite_r+0x280>
    76a8:	94c0012e 	bgeu	r18,r19,76b0 <__sfvwrite_r+0x31c>
    76ac:	9027883a 	mov	r19,r18
    76b0:	980d883a 	mov	r6,r19
    76b4:	e00b883a 	mov	r5,fp
    76b8:	0007e9c0 	call	7e9c <memmove>
    76bc:	80800217 	ldw	r2,8(r16)
    76c0:	80c00017 	ldw	r3,0(r16)
    76c4:	14c5c83a 	sub	r2,r2,r19
    76c8:	1cc7883a 	add	r3,r3,r19
    76cc:	80800215 	stw	r2,8(r16)
    76d0:	80c00015 	stw	r3,0(r16)
    76d4:	10004326 	beq	r2,zero,77e4 <__sfvwrite_r+0x450>
    76d8:	9805883a 	mov	r2,r19
    76dc:	003f8606 	br	74f8 <__sfvwrite_r+0x164>
    76e0:	b00d883a 	mov	r6,r22
    76e4:	e00b883a 	mov	r5,fp
    76e8:	da000115 	stw	r8,4(sp)
    76ec:	0007e9c0 	call	7e9c <memmove>
    76f0:	80800217 	ldw	r2,8(r16)
    76f4:	80c00017 	ldw	r3,0(r16)
    76f8:	da000117 	ldw	r8,4(sp)
    76fc:	1585c83a 	sub	r2,r2,r22
    7700:	1dad883a 	add	r22,r3,r22
    7704:	80800215 	stw	r2,8(r16)
    7708:	85800015 	stw	r22,0(r16)
    770c:	003fbf06 	br	760c <__sfvwrite_r+0x278>
    7710:	81000017 	ldw	r4,0(r16)
    7714:	9027883a 	mov	r19,r18
    7718:	902f883a 	mov	r23,r18
    771c:	003f6c06 	br	74d0 <__sfvwrite_r+0x13c>
    7720:	900d883a 	mov	r6,r18
    7724:	01400284 	movi	r5,10
    7728:	e009883a 	mov	r4,fp
    772c:	0007c700 	call	7c70 <memchr>
    7730:	10003e26 	beq	r2,zero,782c <__sfvwrite_r+0x498>
    7734:	10800044 	addi	r2,r2,1
    7738:	1727c83a 	sub	r19,r2,fp
    773c:	02000044 	movi	r8,1
    7740:	003f9d06 	br	75b8 <__sfvwrite_r+0x224>
    7744:	80800517 	ldw	r2,20(r16)
    7748:	81400417 	ldw	r5,16(r16)
    774c:	81c00017 	ldw	r7,0(r16)
    7750:	10a7883a 	add	r19,r2,r2
    7754:	9885883a 	add	r2,r19,r2
    7758:	1026d7fa 	srli	r19,r2,31
    775c:	396dc83a 	sub	r22,r7,r5
    7760:	b1000044 	addi	r4,r22,1
    7764:	9885883a 	add	r2,r19,r2
    7768:	1027d07a 	srai	r19,r2,1
    776c:	2485883a 	add	r2,r4,r18
    7770:	980d883a 	mov	r6,r19
    7774:	9880022e 	bgeu	r19,r2,7780 <__sfvwrite_r+0x3ec>
    7778:	1027883a 	mov	r19,r2
    777c:	100d883a 	mov	r6,r2
    7780:	18c1000c 	andi	r3,r3,1024
    7784:	18001c26 	beq	r3,zero,77f8 <__sfvwrite_r+0x464>
    7788:	300b883a 	mov	r5,r6
    778c:	a809883a 	mov	r4,r21
    7790:	00022340 	call	2234 <_malloc_r>
    7794:	102f883a 	mov	r23,r2
    7798:	10002926 	beq	r2,zero,7840 <__sfvwrite_r+0x4ac>
    779c:	81400417 	ldw	r5,16(r16)
    77a0:	b00d883a 	mov	r6,r22
    77a4:	1009883a 	mov	r4,r2
    77a8:	0007d540 	call	7d54 <memcpy>
    77ac:	8080030b 	ldhu	r2,12(r16)
    77b0:	00fedfc4 	movi	r3,-1153
    77b4:	10c4703a 	and	r2,r2,r3
    77b8:	10802014 	ori	r2,r2,128
    77bc:	8080030d 	sth	r2,12(r16)
    77c0:	bd89883a 	add	r4,r23,r22
    77c4:	9d8fc83a 	sub	r7,r19,r22
    77c8:	85c00415 	stw	r23,16(r16)
    77cc:	84c00515 	stw	r19,20(r16)
    77d0:	81000015 	stw	r4,0(r16)
    77d4:	9027883a 	mov	r19,r18
    77d8:	81c00215 	stw	r7,8(r16)
    77dc:	902f883a 	mov	r23,r18
    77e0:	003f3b06 	br	74d0 <__sfvwrite_r+0x13c>
    77e4:	800b883a 	mov	r5,r16
    77e8:	a809883a 	mov	r4,r21
    77ec:	0006b340 	call	6b34 <_fflush_r>
    77f0:	103fb926 	beq	r2,zero,76d8 <__sfvwrite_r+0x344>
    77f4:	003f6506 	br	758c <__sfvwrite_r+0x1f8>
    77f8:	a809883a 	mov	r4,r21
    77fc:	000911c0 	call	911c <_realloc_r>
    7800:	102f883a 	mov	r23,r2
    7804:	103fee1e 	bne	r2,zero,77c0 <__sfvwrite_r+0x42c>
    7808:	81400417 	ldw	r5,16(r16)
    780c:	a809883a 	mov	r4,r21
    7810:	00070840 	call	7084 <_free_r>
    7814:	8080030b 	ldhu	r2,12(r16)
    7818:	00ffdfc4 	movi	r3,-129
    781c:	1884703a 	and	r2,r3,r2
    7820:	00c00304 	movi	r3,12
    7824:	a8c00015 	stw	r3,0(r21)
    7828:	003f5906 	br	7590 <__sfvwrite_r+0x1fc>
    782c:	94c00044 	addi	r19,r18,1
    7830:	02000044 	movi	r8,1
    7834:	003f6006 	br	75b8 <__sfvwrite_r+0x224>
    7838:	00bfffc4 	movi	r2,-1
    783c:	003f0306 	br	744c <__sfvwrite_r+0xb8>
    7840:	00800304 	movi	r2,12
    7844:	a8800015 	stw	r2,0(r21)
    7848:	8080030b 	ldhu	r2,12(r16)
    784c:	003f5006 	br	7590 <__sfvwrite_r+0x1fc>

00007850 <_fwalk>:
    7850:	defff704 	addi	sp,sp,-36
    7854:	dd000415 	stw	r20,16(sp)
    7858:	dfc00815 	stw	ra,32(sp)
    785c:	ddc00715 	stw	r23,28(sp)
    7860:	dd800615 	stw	r22,24(sp)
    7864:	dd400515 	stw	r21,20(sp)
    7868:	dcc00315 	stw	r19,12(sp)
    786c:	dc800215 	stw	r18,8(sp)
    7870:	dc400115 	stw	r17,4(sp)
    7874:	dc000015 	stw	r16,0(sp)
    7878:	2500b804 	addi	r20,r4,736
    787c:	a0002326 	beq	r20,zero,790c <_fwalk+0xbc>
    7880:	282b883a 	mov	r21,r5
    7884:	002f883a 	mov	r23,zero
    7888:	05800044 	movi	r22,1
    788c:	04ffffc4 	movi	r19,-1
    7890:	a4400117 	ldw	r17,4(r20)
    7894:	a4800217 	ldw	r18,8(r20)
    7898:	8c7fffc4 	addi	r17,r17,-1
    789c:	88000d16 	blt	r17,zero,78d4 <_fwalk+0x84>
    78a0:	94000304 	addi	r16,r18,12
    78a4:	94800384 	addi	r18,r18,14
    78a8:	8080000b 	ldhu	r2,0(r16)
    78ac:	8c7fffc4 	addi	r17,r17,-1
    78b0:	813ffd04 	addi	r4,r16,-12
    78b4:	b080042e 	bgeu	r22,r2,78c8 <_fwalk+0x78>
    78b8:	9080000f 	ldh	r2,0(r18)
    78bc:	14c00226 	beq	r2,r19,78c8 <_fwalk+0x78>
    78c0:	a83ee83a 	callr	r21
    78c4:	b8aeb03a 	or	r23,r23,r2
    78c8:	84001a04 	addi	r16,r16,104
    78cc:	94801a04 	addi	r18,r18,104
    78d0:	8cfff51e 	bne	r17,r19,78a8 <_fwalk+0x58>
    78d4:	a5000017 	ldw	r20,0(r20)
    78d8:	a03fed1e 	bne	r20,zero,7890 <_fwalk+0x40>
    78dc:	b805883a 	mov	r2,r23
    78e0:	dfc00817 	ldw	ra,32(sp)
    78e4:	ddc00717 	ldw	r23,28(sp)
    78e8:	dd800617 	ldw	r22,24(sp)
    78ec:	dd400517 	ldw	r21,20(sp)
    78f0:	dd000417 	ldw	r20,16(sp)
    78f4:	dcc00317 	ldw	r19,12(sp)
    78f8:	dc800217 	ldw	r18,8(sp)
    78fc:	dc400117 	ldw	r17,4(sp)
    7900:	dc000017 	ldw	r16,0(sp)
    7904:	dec00904 	addi	sp,sp,36
    7908:	f800283a 	ret
    790c:	002f883a 	mov	r23,zero
    7910:	003ff206 	br	78dc <_fwalk+0x8c>

00007914 <_fwalk_reent>:
    7914:	defff704 	addi	sp,sp,-36
    7918:	dd000415 	stw	r20,16(sp)
    791c:	dfc00815 	stw	ra,32(sp)
    7920:	ddc00715 	stw	r23,28(sp)
    7924:	dd800615 	stw	r22,24(sp)
    7928:	dd400515 	stw	r21,20(sp)
    792c:	dcc00315 	stw	r19,12(sp)
    7930:	dc800215 	stw	r18,8(sp)
    7934:	dc400115 	stw	r17,4(sp)
    7938:	dc000015 	stw	r16,0(sp)
    793c:	2500b804 	addi	r20,r4,736
    7940:	a0002326 	beq	r20,zero,79d0 <_fwalk_reent+0xbc>
    7944:	282b883a 	mov	r21,r5
    7948:	2027883a 	mov	r19,r4
    794c:	002f883a 	mov	r23,zero
    7950:	05800044 	movi	r22,1
    7954:	04bfffc4 	movi	r18,-1
    7958:	a4400117 	ldw	r17,4(r20)
    795c:	a4000217 	ldw	r16,8(r20)
    7960:	8c7fffc4 	addi	r17,r17,-1
    7964:	88000c16 	blt	r17,zero,7998 <_fwalk_reent+0x84>
    7968:	84000304 	addi	r16,r16,12
    796c:	8080000b 	ldhu	r2,0(r16)
    7970:	8c7fffc4 	addi	r17,r17,-1
    7974:	817ffd04 	addi	r5,r16,-12
    7978:	b080052e 	bgeu	r22,r2,7990 <_fwalk_reent+0x7c>
    797c:	8080008f 	ldh	r2,2(r16)
    7980:	9809883a 	mov	r4,r19
    7984:	14800226 	beq	r2,r18,7990 <_fwalk_reent+0x7c>
    7988:	a83ee83a 	callr	r21
    798c:	b8aeb03a 	or	r23,r23,r2
    7990:	84001a04 	addi	r16,r16,104
    7994:	8cbff51e 	bne	r17,r18,796c <_fwalk_reent+0x58>
    7998:	a5000017 	ldw	r20,0(r20)
    799c:	a03fee1e 	bne	r20,zero,7958 <_fwalk_reent+0x44>
    79a0:	b805883a 	mov	r2,r23
    79a4:	dfc00817 	ldw	ra,32(sp)
    79a8:	ddc00717 	ldw	r23,28(sp)
    79ac:	dd800617 	ldw	r22,24(sp)
    79b0:	dd400517 	ldw	r21,20(sp)
    79b4:	dd000417 	ldw	r20,16(sp)
    79b8:	dcc00317 	ldw	r19,12(sp)
    79bc:	dc800217 	ldw	r18,8(sp)
    79c0:	dc400117 	ldw	r17,4(sp)
    79c4:	dc000017 	ldw	r16,0(sp)
    79c8:	dec00904 	addi	sp,sp,36
    79cc:	f800283a 	ret
    79d0:	002f883a 	mov	r23,zero
    79d4:	003ff206 	br	79a0 <_fwalk_reent+0x8c>

000079d8 <_setlocale_r>:
    79d8:	30001b26 	beq	r6,zero,7a48 <_setlocale_r+0x70>
    79dc:	01400074 	movhi	r5,1
    79e0:	defffe04 	addi	sp,sp,-8
    79e4:	29463604 	addi	r5,r5,6360
    79e8:	3009883a 	mov	r4,r6
    79ec:	dc000015 	stw	r16,0(sp)
    79f0:	dfc00115 	stw	ra,4(sp)
    79f4:	3021883a 	mov	r16,r6
    79f8:	00098300 	call	9830 <strcmp>
    79fc:	1000061e 	bne	r2,zero,7a18 <_setlocale_r+0x40>
    7a00:	00800074 	movhi	r2,1
    7a04:	10863504 	addi	r2,r2,6356
    7a08:	dfc00117 	ldw	ra,4(sp)
    7a0c:	dc000017 	ldw	r16,0(sp)
    7a10:	dec00204 	addi	sp,sp,8
    7a14:	f800283a 	ret
    7a18:	01400074 	movhi	r5,1
    7a1c:	29463504 	addi	r5,r5,6356
    7a20:	8009883a 	mov	r4,r16
    7a24:	00098300 	call	9830 <strcmp>
    7a28:	103ff526 	beq	r2,zero,7a00 <_setlocale_r+0x28>
    7a2c:	01400074 	movhi	r5,1
    7a30:	29462004 	addi	r5,r5,6272
    7a34:	8009883a 	mov	r4,r16
    7a38:	00098300 	call	9830 <strcmp>
    7a3c:	103ff026 	beq	r2,zero,7a00 <_setlocale_r+0x28>
    7a40:	0005883a 	mov	r2,zero
    7a44:	003ff006 	br	7a08 <_setlocale_r+0x30>
    7a48:	00800074 	movhi	r2,1
    7a4c:	10863504 	addi	r2,r2,6356
    7a50:	f800283a 	ret

00007a54 <__locale_charset>:
    7a54:	00800074 	movhi	r2,1
    7a58:	1088e804 	addi	r2,r2,9120
    7a5c:	f800283a 	ret

00007a60 <__locale_mb_cur_max>:
    7a60:	00800074 	movhi	r2,1
    7a64:	108d8404 	addi	r2,r2,13840
    7a68:	10800017 	ldw	r2,0(r2)
    7a6c:	f800283a 	ret

00007a70 <__locale_msgcharset>:
    7a70:	00800074 	movhi	r2,1
    7a74:	1088e004 	addi	r2,r2,9088
    7a78:	f800283a 	ret

00007a7c <__locale_cjk_lang>:
    7a7c:	0005883a 	mov	r2,zero
    7a80:	f800283a 	ret

00007a84 <_localeconv_r>:
    7a84:	00800074 	movhi	r2,1
    7a88:	1088f004 	addi	r2,r2,9152
    7a8c:	f800283a 	ret

00007a90 <setlocale>:
    7a90:	00800074 	movhi	r2,1
    7a94:	108d8304 	addi	r2,r2,13836
    7a98:	280d883a 	mov	r6,r5
    7a9c:	200b883a 	mov	r5,r4
    7aa0:	11000017 	ldw	r4,0(r2)
    7aa4:	00079d81 	jmpi	79d8 <_setlocale_r>

00007aa8 <localeconv>:
    7aa8:	00800074 	movhi	r2,1
    7aac:	1088f004 	addi	r2,r2,9152
    7ab0:	f800283a 	ret

00007ab4 <__smakebuf_r>:
    7ab4:	2880030b 	ldhu	r2,12(r5)
    7ab8:	10c0008c 	andi	r3,r2,2
    7abc:	1800411e 	bne	r3,zero,7bc4 <__smakebuf_r+0x110>
    7ac0:	deffec04 	addi	sp,sp,-80
    7ac4:	dc000f15 	stw	r16,60(sp)
    7ac8:	2821883a 	mov	r16,r5
    7acc:	2940038f 	ldh	r5,14(r5)
    7ad0:	dc401015 	stw	r17,64(sp)
    7ad4:	dfc01315 	stw	ra,76(sp)
    7ad8:	dcc01215 	stw	r19,72(sp)
    7adc:	dc801115 	stw	r18,68(sp)
    7ae0:	2023883a 	mov	r17,r4
    7ae4:	28001c16 	blt	r5,zero,7b58 <__smakebuf_r+0xa4>
    7ae8:	d80d883a 	mov	r6,sp
    7aec:	000b3d80 	call	b3d8 <_fstat_r>
    7af0:	10001816 	blt	r2,zero,7b54 <__smakebuf_r+0xa0>
    7af4:	d8800117 	ldw	r2,4(sp)
    7af8:	00e00014 	movui	r3,32768
    7afc:	10bc000c 	andi	r2,r2,61440
    7b00:	14c80020 	cmpeqi	r19,r2,8192
    7b04:	10c03726 	beq	r2,r3,7be4 <__smakebuf_r+0x130>
    7b08:	80c0030b 	ldhu	r3,12(r16)
    7b0c:	18c20014 	ori	r3,r3,2048
    7b10:	80c0030d 	sth	r3,12(r16)
    7b14:	00c80004 	movi	r3,8192
    7b18:	10c0521e 	bne	r2,r3,7c64 <__smakebuf_r+0x1b0>
    7b1c:	8140038f 	ldh	r5,14(r16)
    7b20:	8809883a 	mov	r4,r17
    7b24:	000b4340 	call	b434 <_isatty_r>
    7b28:	10004c26 	beq	r2,zero,7c5c <__smakebuf_r+0x1a8>
    7b2c:	8080030b 	ldhu	r2,12(r16)
    7b30:	80c010c4 	addi	r3,r16,67
    7b34:	80c00015 	stw	r3,0(r16)
    7b38:	10800054 	ori	r2,r2,1
    7b3c:	8080030d 	sth	r2,12(r16)
    7b40:	00800044 	movi	r2,1
    7b44:	80c00415 	stw	r3,16(r16)
    7b48:	80800515 	stw	r2,20(r16)
    7b4c:	04810004 	movi	r18,1024
    7b50:	00000706 	br	7b70 <__smakebuf_r+0xbc>
    7b54:	8080030b 	ldhu	r2,12(r16)
    7b58:	10c0200c 	andi	r3,r2,128
    7b5c:	18001f1e 	bne	r3,zero,7bdc <__smakebuf_r+0x128>
    7b60:	04810004 	movi	r18,1024
    7b64:	10820014 	ori	r2,r2,2048
    7b68:	8080030d 	sth	r2,12(r16)
    7b6c:	0027883a 	mov	r19,zero
    7b70:	900b883a 	mov	r5,r18
    7b74:	8809883a 	mov	r4,r17
    7b78:	00022340 	call	2234 <_malloc_r>
    7b7c:	10002c26 	beq	r2,zero,7c30 <__smakebuf_r+0x17c>
    7b80:	80c0030b 	ldhu	r3,12(r16)
    7b84:	01000034 	movhi	r4,0
    7b88:	211af204 	addi	r4,r4,27592
    7b8c:	89000f15 	stw	r4,60(r17)
    7b90:	18c02014 	ori	r3,r3,128
    7b94:	80c0030d 	sth	r3,12(r16)
    7b98:	80800015 	stw	r2,0(r16)
    7b9c:	80800415 	stw	r2,16(r16)
    7ba0:	84800515 	stw	r18,20(r16)
    7ba4:	98001a1e 	bne	r19,zero,7c10 <__smakebuf_r+0x15c>
    7ba8:	dfc01317 	ldw	ra,76(sp)
    7bac:	dcc01217 	ldw	r19,72(sp)
    7bb0:	dc801117 	ldw	r18,68(sp)
    7bb4:	dc401017 	ldw	r17,64(sp)
    7bb8:	dc000f17 	ldw	r16,60(sp)
    7bbc:	dec01404 	addi	sp,sp,80
    7bc0:	f800283a 	ret
    7bc4:	288010c4 	addi	r2,r5,67
    7bc8:	28800015 	stw	r2,0(r5)
    7bcc:	28800415 	stw	r2,16(r5)
    7bd0:	00800044 	movi	r2,1
    7bd4:	28800515 	stw	r2,20(r5)
    7bd8:	f800283a 	ret
    7bdc:	04801004 	movi	r18,64
    7be0:	003fe006 	br	7b64 <__smakebuf_r+0xb0>
    7be4:	81000a17 	ldw	r4,40(r16)
    7be8:	00c00074 	movhi	r3,1
    7bec:	18e5f304 	addi	r3,r3,-26676
    7bf0:	20ffc51e 	bne	r4,r3,7b08 <__smakebuf_r+0x54>
    7bf4:	8080030b 	ldhu	r2,12(r16)
    7bf8:	04810004 	movi	r18,1024
    7bfc:	84801315 	stw	r18,76(r16)
    7c00:	1484b03a 	or	r2,r2,r18
    7c04:	8080030d 	sth	r2,12(r16)
    7c08:	0027883a 	mov	r19,zero
    7c0c:	003fd806 	br	7b70 <__smakebuf_r+0xbc>
    7c10:	8140038f 	ldh	r5,14(r16)
    7c14:	8809883a 	mov	r4,r17
    7c18:	000b4340 	call	b434 <_isatty_r>
    7c1c:	103fe226 	beq	r2,zero,7ba8 <__smakebuf_r+0xf4>
    7c20:	8080030b 	ldhu	r2,12(r16)
    7c24:	10800054 	ori	r2,r2,1
    7c28:	8080030d 	sth	r2,12(r16)
    7c2c:	003fde06 	br	7ba8 <__smakebuf_r+0xf4>
    7c30:	8080030b 	ldhu	r2,12(r16)
    7c34:	10c0800c 	andi	r3,r2,512
    7c38:	183fdb1e 	bne	r3,zero,7ba8 <__smakebuf_r+0xf4>
    7c3c:	10800094 	ori	r2,r2,2
    7c40:	80c010c4 	addi	r3,r16,67
    7c44:	8080030d 	sth	r2,12(r16)
    7c48:	00800044 	movi	r2,1
    7c4c:	80c00015 	stw	r3,0(r16)
    7c50:	80c00415 	stw	r3,16(r16)
    7c54:	80800515 	stw	r2,20(r16)
    7c58:	003fd306 	br	7ba8 <__smakebuf_r+0xf4>
    7c5c:	04810004 	movi	r18,1024
    7c60:	003fc306 	br	7b70 <__smakebuf_r+0xbc>
    7c64:	0027883a 	mov	r19,zero
    7c68:	04810004 	movi	r18,1024
    7c6c:	003fc006 	br	7b70 <__smakebuf_r+0xbc>

00007c70 <memchr>:
    7c70:	208000cc 	andi	r2,r4,3
    7c74:	280f883a 	mov	r7,r5
    7c78:	10003426 	beq	r2,zero,7d4c <memchr+0xdc>
    7c7c:	30bfffc4 	addi	r2,r6,-1
    7c80:	30001a26 	beq	r6,zero,7cec <memchr+0x7c>
    7c84:	20c00003 	ldbu	r3,0(r4)
    7c88:	29803fcc 	andi	r6,r5,255
    7c8c:	30c0051e 	bne	r6,r3,7ca4 <memchr+0x34>
    7c90:	00001806 	br	7cf4 <memchr+0x84>
    7c94:	10001526 	beq	r2,zero,7cec <memchr+0x7c>
    7c98:	20c00003 	ldbu	r3,0(r4)
    7c9c:	10bfffc4 	addi	r2,r2,-1
    7ca0:	30c01426 	beq	r6,r3,7cf4 <memchr+0x84>
    7ca4:	21000044 	addi	r4,r4,1
    7ca8:	20c000cc 	andi	r3,r4,3
    7cac:	183ff91e 	bne	r3,zero,7c94 <memchr+0x24>
    7cb0:	020000c4 	movi	r8,3
    7cb4:	40801136 	bltu	r8,r2,7cfc <memchr+0x8c>
    7cb8:	10000c26 	beq	r2,zero,7cec <memchr+0x7c>
    7cbc:	20c00003 	ldbu	r3,0(r4)
    7cc0:	29403fcc 	andi	r5,r5,255
    7cc4:	28c00b26 	beq	r5,r3,7cf4 <memchr+0x84>
    7cc8:	20c00044 	addi	r3,r4,1
    7ccc:	39803fcc 	andi	r6,r7,255
    7cd0:	2089883a 	add	r4,r4,r2
    7cd4:	00000306 	br	7ce4 <memchr+0x74>
    7cd8:	18c00044 	addi	r3,r3,1
    7cdc:	197fffc3 	ldbu	r5,-1(r3)
    7ce0:	31400526 	beq	r6,r5,7cf8 <memchr+0x88>
    7ce4:	1805883a 	mov	r2,r3
    7ce8:	20fffb1e 	bne	r4,r3,7cd8 <memchr+0x68>
    7cec:	0005883a 	mov	r2,zero
    7cf0:	f800283a 	ret
    7cf4:	2005883a 	mov	r2,r4
    7cf8:	f800283a 	ret
    7cfc:	28c03fcc 	andi	r3,r5,255
    7d00:	1812923a 	slli	r9,r3,8
    7d04:	02ffbff4 	movhi	r11,65279
    7d08:	02a02074 	movhi	r10,32897
    7d0c:	48d2b03a 	or	r9,r9,r3
    7d10:	4806943a 	slli	r3,r9,16
    7d14:	5affbfc4 	addi	r11,r11,-257
    7d18:	52a02004 	addi	r10,r10,-32640
    7d1c:	48d2b03a 	or	r9,r9,r3
    7d20:	20c00017 	ldw	r3,0(r4)
    7d24:	48c6f03a 	xor	r3,r9,r3
    7d28:	1acd883a 	add	r6,r3,r11
    7d2c:	00c6303a 	nor	r3,zero,r3
    7d30:	30c6703a 	and	r3,r6,r3
    7d34:	1a86703a 	and	r3,r3,r10
    7d38:	183fe01e 	bne	r3,zero,7cbc <memchr+0x4c>
    7d3c:	10bfff04 	addi	r2,r2,-4
    7d40:	21000104 	addi	r4,r4,4
    7d44:	40bff636 	bltu	r8,r2,7d20 <memchr+0xb0>
    7d48:	003fdb06 	br	7cb8 <memchr+0x48>
    7d4c:	3005883a 	mov	r2,r6
    7d50:	003fd706 	br	7cb0 <memchr+0x40>

00007d54 <memcpy>:
    7d54:	defffd04 	addi	sp,sp,-12
    7d58:	dfc00215 	stw	ra,8(sp)
    7d5c:	dc400115 	stw	r17,4(sp)
    7d60:	dc000015 	stw	r16,0(sp)
    7d64:	00c003c4 	movi	r3,15
    7d68:	2005883a 	mov	r2,r4
    7d6c:	1980452e 	bgeu	r3,r6,7e84 <memcpy+0x130>
    7d70:	2906b03a 	or	r3,r5,r4
    7d74:	18c000cc 	andi	r3,r3,3
    7d78:	1800441e 	bne	r3,zero,7e8c <memcpy+0x138>
    7d7c:	347ffc04 	addi	r17,r6,-16
    7d80:	8822d13a 	srli	r17,r17,4
    7d84:	28c00104 	addi	r3,r5,4
    7d88:	23400104 	addi	r13,r4,4
    7d8c:	8820913a 	slli	r16,r17,4
    7d90:	2b000204 	addi	r12,r5,8
    7d94:	22c00204 	addi	r11,r4,8
    7d98:	84000504 	addi	r16,r16,20
    7d9c:	2a800304 	addi	r10,r5,12
    7da0:	22400304 	addi	r9,r4,12
    7da4:	2c21883a 	add	r16,r5,r16
    7da8:	2811883a 	mov	r8,r5
    7dac:	200f883a 	mov	r7,r4
    7db0:	41000017 	ldw	r4,0(r8)
    7db4:	1fc00017 	ldw	ra,0(r3)
    7db8:	63c00017 	ldw	r15,0(r12)
    7dbc:	39000015 	stw	r4,0(r7)
    7dc0:	53800017 	ldw	r14,0(r10)
    7dc4:	6fc00015 	stw	ra,0(r13)
    7dc8:	5bc00015 	stw	r15,0(r11)
    7dcc:	4b800015 	stw	r14,0(r9)
    7dd0:	18c00404 	addi	r3,r3,16
    7dd4:	39c00404 	addi	r7,r7,16
    7dd8:	42000404 	addi	r8,r8,16
    7ddc:	6b400404 	addi	r13,r13,16
    7de0:	63000404 	addi	r12,r12,16
    7de4:	5ac00404 	addi	r11,r11,16
    7de8:	52800404 	addi	r10,r10,16
    7dec:	4a400404 	addi	r9,r9,16
    7df0:	1c3fef1e 	bne	r3,r16,7db0 <memcpy+0x5c>
    7df4:	89c00044 	addi	r7,r17,1
    7df8:	380e913a 	slli	r7,r7,4
    7dfc:	310003cc 	andi	r4,r6,15
    7e00:	02c000c4 	movi	r11,3
    7e04:	11c7883a 	add	r3,r2,r7
    7e08:	29cb883a 	add	r5,r5,r7
    7e0c:	5900212e 	bgeu	r11,r4,7e94 <memcpy+0x140>
    7e10:	1813883a 	mov	r9,r3
    7e14:	2811883a 	mov	r8,r5
    7e18:	200f883a 	mov	r7,r4
    7e1c:	42800017 	ldw	r10,0(r8)
    7e20:	4a400104 	addi	r9,r9,4
    7e24:	39ffff04 	addi	r7,r7,-4
    7e28:	4abfff15 	stw	r10,-4(r9)
    7e2c:	42000104 	addi	r8,r8,4
    7e30:	59fffa36 	bltu	r11,r7,7e1c <memcpy+0xc8>
    7e34:	213fff04 	addi	r4,r4,-4
    7e38:	2008d0ba 	srli	r4,r4,2
    7e3c:	318000cc 	andi	r6,r6,3
    7e40:	21000044 	addi	r4,r4,1
    7e44:	2109883a 	add	r4,r4,r4
    7e48:	2109883a 	add	r4,r4,r4
    7e4c:	1907883a 	add	r3,r3,r4
    7e50:	290b883a 	add	r5,r5,r4
    7e54:	30000626 	beq	r6,zero,7e70 <memcpy+0x11c>
    7e58:	198d883a 	add	r6,r3,r6
    7e5c:	29c00003 	ldbu	r7,0(r5)
    7e60:	18c00044 	addi	r3,r3,1
    7e64:	29400044 	addi	r5,r5,1
    7e68:	19ffffc5 	stb	r7,-1(r3)
    7e6c:	19bffb1e 	bne	r3,r6,7e5c <memcpy+0x108>
    7e70:	dfc00217 	ldw	ra,8(sp)
    7e74:	dc400117 	ldw	r17,4(sp)
    7e78:	dc000017 	ldw	r16,0(sp)
    7e7c:	dec00304 	addi	sp,sp,12
    7e80:	f800283a 	ret
    7e84:	2007883a 	mov	r3,r4
    7e88:	003ff206 	br	7e54 <memcpy+0x100>
    7e8c:	2007883a 	mov	r3,r4
    7e90:	003ff106 	br	7e58 <memcpy+0x104>
    7e94:	200d883a 	mov	r6,r4
    7e98:	003fee06 	br	7e54 <memcpy+0x100>

00007e9c <memmove>:
    7e9c:	2005883a 	mov	r2,r4
    7ea0:	29000b2e 	bgeu	r5,r4,7ed0 <memmove+0x34>
    7ea4:	298f883a 	add	r7,r5,r6
    7ea8:	21c0092e 	bgeu	r4,r7,7ed0 <memmove+0x34>
    7eac:	2187883a 	add	r3,r4,r6
    7eb0:	198bc83a 	sub	r5,r3,r6
    7eb4:	30004826 	beq	r6,zero,7fd8 <memmove+0x13c>
    7eb8:	39ffffc4 	addi	r7,r7,-1
    7ebc:	39000003 	ldbu	r4,0(r7)
    7ec0:	18ffffc4 	addi	r3,r3,-1
    7ec4:	19000005 	stb	r4,0(r3)
    7ec8:	28fffb1e 	bne	r5,r3,7eb8 <memmove+0x1c>
    7ecc:	f800283a 	ret
    7ed0:	00c003c4 	movi	r3,15
    7ed4:	1980412e 	bgeu	r3,r6,7fdc <memmove+0x140>
    7ed8:	2886b03a 	or	r3,r5,r2
    7edc:	18c000cc 	andi	r3,r3,3
    7ee0:	1800401e 	bne	r3,zero,7fe4 <memmove+0x148>
    7ee4:	33fffc04 	addi	r15,r6,-16
    7ee8:	781ed13a 	srli	r15,r15,4
    7eec:	28c00104 	addi	r3,r5,4
    7ef0:	13400104 	addi	r13,r2,4
    7ef4:	781c913a 	slli	r14,r15,4
    7ef8:	2b000204 	addi	r12,r5,8
    7efc:	12c00204 	addi	r11,r2,8
    7f00:	73800504 	addi	r14,r14,20
    7f04:	2a800304 	addi	r10,r5,12
    7f08:	12400304 	addi	r9,r2,12
    7f0c:	2b9d883a 	add	r14,r5,r14
    7f10:	2811883a 	mov	r8,r5
    7f14:	100f883a 	mov	r7,r2
    7f18:	41000017 	ldw	r4,0(r8)
    7f1c:	39c00404 	addi	r7,r7,16
    7f20:	18c00404 	addi	r3,r3,16
    7f24:	393ffc15 	stw	r4,-16(r7)
    7f28:	193ffc17 	ldw	r4,-16(r3)
    7f2c:	6b400404 	addi	r13,r13,16
    7f30:	5ac00404 	addi	r11,r11,16
    7f34:	693ffc15 	stw	r4,-16(r13)
    7f38:	61000017 	ldw	r4,0(r12)
    7f3c:	4a400404 	addi	r9,r9,16
    7f40:	42000404 	addi	r8,r8,16
    7f44:	593ffc15 	stw	r4,-16(r11)
    7f48:	51000017 	ldw	r4,0(r10)
    7f4c:	63000404 	addi	r12,r12,16
    7f50:	52800404 	addi	r10,r10,16
    7f54:	493ffc15 	stw	r4,-16(r9)
    7f58:	1bbfef1e 	bne	r3,r14,7f18 <memmove+0x7c>
    7f5c:	79000044 	addi	r4,r15,1
    7f60:	2008913a 	slli	r4,r4,4
    7f64:	328003cc 	andi	r10,r6,15
    7f68:	02c000c4 	movi	r11,3
    7f6c:	1107883a 	add	r3,r2,r4
    7f70:	290b883a 	add	r5,r5,r4
    7f74:	5a801e2e 	bgeu	r11,r10,7ff0 <memmove+0x154>
    7f78:	1813883a 	mov	r9,r3
    7f7c:	2811883a 	mov	r8,r5
    7f80:	500f883a 	mov	r7,r10
    7f84:	41000017 	ldw	r4,0(r8)
    7f88:	4a400104 	addi	r9,r9,4
    7f8c:	39ffff04 	addi	r7,r7,-4
    7f90:	493fff15 	stw	r4,-4(r9)
    7f94:	42000104 	addi	r8,r8,4
    7f98:	59fffa36 	bltu	r11,r7,7f84 <memmove+0xe8>
    7f9c:	513fff04 	addi	r4,r10,-4
    7fa0:	2008d0ba 	srli	r4,r4,2
    7fa4:	318000cc 	andi	r6,r6,3
    7fa8:	21000044 	addi	r4,r4,1
    7fac:	2109883a 	add	r4,r4,r4
    7fb0:	2109883a 	add	r4,r4,r4
    7fb4:	1907883a 	add	r3,r3,r4
    7fb8:	290b883a 	add	r5,r5,r4
    7fbc:	30000b26 	beq	r6,zero,7fec <memmove+0x150>
    7fc0:	198d883a 	add	r6,r3,r6
    7fc4:	29c00003 	ldbu	r7,0(r5)
    7fc8:	18c00044 	addi	r3,r3,1
    7fcc:	29400044 	addi	r5,r5,1
    7fd0:	19ffffc5 	stb	r7,-1(r3)
    7fd4:	19bffb1e 	bne	r3,r6,7fc4 <memmove+0x128>
    7fd8:	f800283a 	ret
    7fdc:	1007883a 	mov	r3,r2
    7fe0:	003ff606 	br	7fbc <memmove+0x120>
    7fe4:	1007883a 	mov	r3,r2
    7fe8:	003ff506 	br	7fc0 <memmove+0x124>
    7fec:	f800283a 	ret
    7ff0:	500d883a 	mov	r6,r10
    7ff4:	003ff106 	br	7fbc <memmove+0x120>

00007ff8 <memset>:
    7ff8:	20c000cc 	andi	r3,r4,3
    7ffc:	2005883a 	mov	r2,r4
    8000:	18004426 	beq	r3,zero,8114 <memset+0x11c>
    8004:	31ffffc4 	addi	r7,r6,-1
    8008:	30004026 	beq	r6,zero,810c <memset+0x114>
    800c:	2813883a 	mov	r9,r5
    8010:	200d883a 	mov	r6,r4
    8014:	2007883a 	mov	r3,r4
    8018:	00000406 	br	802c <memset+0x34>
    801c:	3a3fffc4 	addi	r8,r7,-1
    8020:	31800044 	addi	r6,r6,1
    8024:	38003926 	beq	r7,zero,810c <memset+0x114>
    8028:	400f883a 	mov	r7,r8
    802c:	18c00044 	addi	r3,r3,1
    8030:	32400005 	stb	r9,0(r6)
    8034:	1a0000cc 	andi	r8,r3,3
    8038:	403ff81e 	bne	r8,zero,801c <memset+0x24>
    803c:	010000c4 	movi	r4,3
    8040:	21c02d2e 	bgeu	r4,r7,80f8 <memset+0x100>
    8044:	29003fcc 	andi	r4,r5,255
    8048:	200c923a 	slli	r6,r4,8
    804c:	3108b03a 	or	r4,r6,r4
    8050:	200c943a 	slli	r6,r4,16
    8054:	218cb03a 	or	r6,r4,r6
    8058:	010003c4 	movi	r4,15
    805c:	21c0182e 	bgeu	r4,r7,80c0 <memset+0xc8>
    8060:	3b3ffc04 	addi	r12,r7,-16
    8064:	6018d13a 	srli	r12,r12,4
    8068:	1a000104 	addi	r8,r3,4
    806c:	1ac00204 	addi	r11,r3,8
    8070:	6008913a 	slli	r4,r12,4
    8074:	1a800304 	addi	r10,r3,12
    8078:	1813883a 	mov	r9,r3
    807c:	21000504 	addi	r4,r4,20
    8080:	1909883a 	add	r4,r3,r4
    8084:	49800015 	stw	r6,0(r9)
    8088:	41800015 	stw	r6,0(r8)
    808c:	59800015 	stw	r6,0(r11)
    8090:	51800015 	stw	r6,0(r10)
    8094:	42000404 	addi	r8,r8,16
    8098:	4a400404 	addi	r9,r9,16
    809c:	5ac00404 	addi	r11,r11,16
    80a0:	52800404 	addi	r10,r10,16
    80a4:	413ff71e 	bne	r8,r4,8084 <memset+0x8c>
    80a8:	63000044 	addi	r12,r12,1
    80ac:	6018913a 	slli	r12,r12,4
    80b0:	39c003cc 	andi	r7,r7,15
    80b4:	010000c4 	movi	r4,3
    80b8:	1b07883a 	add	r3,r3,r12
    80bc:	21c00e2e 	bgeu	r4,r7,80f8 <memset+0x100>
    80c0:	1813883a 	mov	r9,r3
    80c4:	3811883a 	mov	r8,r7
    80c8:	010000c4 	movi	r4,3
    80cc:	49800015 	stw	r6,0(r9)
    80d0:	423fff04 	addi	r8,r8,-4
    80d4:	4a400104 	addi	r9,r9,4
    80d8:	223ffc36 	bltu	r4,r8,80cc <memset+0xd4>
    80dc:	393fff04 	addi	r4,r7,-4
    80e0:	2008d0ba 	srli	r4,r4,2
    80e4:	39c000cc 	andi	r7,r7,3
    80e8:	21000044 	addi	r4,r4,1
    80ec:	2109883a 	add	r4,r4,r4
    80f0:	2109883a 	add	r4,r4,r4
    80f4:	1907883a 	add	r3,r3,r4
    80f8:	38000526 	beq	r7,zero,8110 <memset+0x118>
    80fc:	19cf883a 	add	r7,r3,r7
    8100:	19400005 	stb	r5,0(r3)
    8104:	18c00044 	addi	r3,r3,1
    8108:	38fffd1e 	bne	r7,r3,8100 <memset+0x108>
    810c:	f800283a 	ret
    8110:	f800283a 	ret
    8114:	2007883a 	mov	r3,r4
    8118:	300f883a 	mov	r7,r6
    811c:	003fc706 	br	803c <memset+0x44>

00008120 <_Balloc>:
    8120:	20801317 	ldw	r2,76(r4)
    8124:	defffc04 	addi	sp,sp,-16
    8128:	dc400115 	stw	r17,4(sp)
    812c:	dc000015 	stw	r16,0(sp)
    8130:	dfc00315 	stw	ra,12(sp)
    8134:	dc800215 	stw	r18,8(sp)
    8138:	2023883a 	mov	r17,r4
    813c:	2821883a 	mov	r16,r5
    8140:	10000f26 	beq	r2,zero,8180 <_Balloc+0x60>
    8144:	8407883a 	add	r3,r16,r16
    8148:	18c7883a 	add	r3,r3,r3
    814c:	10c7883a 	add	r3,r2,r3
    8150:	18800017 	ldw	r2,0(r3)
    8154:	10001126 	beq	r2,zero,819c <_Balloc+0x7c>
    8158:	11000017 	ldw	r4,0(r2)
    815c:	19000015 	stw	r4,0(r3)
    8160:	10000415 	stw	zero,16(r2)
    8164:	10000315 	stw	zero,12(r2)
    8168:	dfc00317 	ldw	ra,12(sp)
    816c:	dc800217 	ldw	r18,8(sp)
    8170:	dc400117 	ldw	r17,4(sp)
    8174:	dc000017 	ldw	r16,0(sp)
    8178:	dec00404 	addi	sp,sp,16
    817c:	f800283a 	ret
    8180:	01800844 	movi	r6,33
    8184:	01400104 	movi	r5,4
    8188:	000b0080 	call	b008 <_calloc_r>
    818c:	88801315 	stw	r2,76(r17)
    8190:	103fec1e 	bne	r2,zero,8144 <_Balloc+0x24>
    8194:	0005883a 	mov	r2,zero
    8198:	003ff306 	br	8168 <_Balloc+0x48>
    819c:	01400044 	movi	r5,1
    81a0:	2c24983a 	sll	r18,r5,r16
    81a4:	8809883a 	mov	r4,r17
    81a8:	91800144 	addi	r6,r18,5
    81ac:	318d883a 	add	r6,r6,r6
    81b0:	318d883a 	add	r6,r6,r6
    81b4:	000b0080 	call	b008 <_calloc_r>
    81b8:	103ff626 	beq	r2,zero,8194 <_Balloc+0x74>
    81bc:	14000115 	stw	r16,4(r2)
    81c0:	14800215 	stw	r18,8(r2)
    81c4:	003fe606 	br	8160 <_Balloc+0x40>

000081c8 <_Bfree>:
    81c8:	28000826 	beq	r5,zero,81ec <_Bfree+0x24>
    81cc:	28c00117 	ldw	r3,4(r5)
    81d0:	20801317 	ldw	r2,76(r4)
    81d4:	18c7883a 	add	r3,r3,r3
    81d8:	18c7883a 	add	r3,r3,r3
    81dc:	10c5883a 	add	r2,r2,r3
    81e0:	10c00017 	ldw	r3,0(r2)
    81e4:	28c00015 	stw	r3,0(r5)
    81e8:	11400015 	stw	r5,0(r2)
    81ec:	f800283a 	ret

000081f0 <__multadd>:
    81f0:	defffa04 	addi	sp,sp,-24
    81f4:	dc800315 	stw	r18,12(sp)
    81f8:	dc400215 	stw	r17,8(sp)
    81fc:	dc000115 	stw	r16,4(sp)
    8200:	2823883a 	mov	r17,r5
    8204:	2c000417 	ldw	r16,16(r5)
    8208:	dfc00515 	stw	ra,20(sp)
    820c:	dcc00415 	stw	r19,16(sp)
    8210:	2025883a 	mov	r18,r4
    8214:	29400504 	addi	r5,r5,20
    8218:	0011883a 	mov	r8,zero
    821c:	28c00017 	ldw	r3,0(r5)
    8220:	29400104 	addi	r5,r5,4
    8224:	42000044 	addi	r8,r8,1
    8228:	18bfffcc 	andi	r2,r3,65535
    822c:	1185383a 	mul	r2,r2,r6
    8230:	1806d43a 	srli	r3,r3,16
    8234:	11cf883a 	add	r7,r2,r7
    8238:	3808d43a 	srli	r4,r7,16
    823c:	1987383a 	mul	r3,r3,r6
    8240:	38bfffcc 	andi	r2,r7,65535
    8244:	1907883a 	add	r3,r3,r4
    8248:	1808943a 	slli	r4,r3,16
    824c:	180ed43a 	srli	r7,r3,16
    8250:	2085883a 	add	r2,r4,r2
    8254:	28bfff15 	stw	r2,-4(r5)
    8258:	443ff016 	blt	r8,r16,821c <__multadd+0x2c>
    825c:	38000926 	beq	r7,zero,8284 <__multadd+0x94>
    8260:	88800217 	ldw	r2,8(r17)
    8264:	80800f0e 	bge	r16,r2,82a4 <__multadd+0xb4>
    8268:	80800144 	addi	r2,r16,5
    826c:	1085883a 	add	r2,r2,r2
    8270:	1085883a 	add	r2,r2,r2
    8274:	8885883a 	add	r2,r17,r2
    8278:	11c00015 	stw	r7,0(r2)
    827c:	84000044 	addi	r16,r16,1
    8280:	8c000415 	stw	r16,16(r17)
    8284:	8805883a 	mov	r2,r17
    8288:	dfc00517 	ldw	ra,20(sp)
    828c:	dcc00417 	ldw	r19,16(sp)
    8290:	dc800317 	ldw	r18,12(sp)
    8294:	dc400217 	ldw	r17,8(sp)
    8298:	dc000117 	ldw	r16,4(sp)
    829c:	dec00604 	addi	sp,sp,24
    82a0:	f800283a 	ret
    82a4:	89400117 	ldw	r5,4(r17)
    82a8:	9009883a 	mov	r4,r18
    82ac:	d9c00015 	stw	r7,0(sp)
    82b0:	29400044 	addi	r5,r5,1
    82b4:	00081200 	call	8120 <_Balloc>
    82b8:	89800417 	ldw	r6,16(r17)
    82bc:	89400304 	addi	r5,r17,12
    82c0:	11000304 	addi	r4,r2,12
    82c4:	31800084 	addi	r6,r6,2
    82c8:	318d883a 	add	r6,r6,r6
    82cc:	318d883a 	add	r6,r6,r6
    82d0:	1027883a 	mov	r19,r2
    82d4:	0007d540 	call	7d54 <memcpy>
    82d8:	d9c00017 	ldw	r7,0(sp)
    82dc:	88000a26 	beq	r17,zero,8308 <__multadd+0x118>
    82e0:	88c00117 	ldw	r3,4(r17)
    82e4:	90801317 	ldw	r2,76(r18)
    82e8:	18c7883a 	add	r3,r3,r3
    82ec:	18c7883a 	add	r3,r3,r3
    82f0:	10c5883a 	add	r2,r2,r3
    82f4:	10c00017 	ldw	r3,0(r2)
    82f8:	88c00015 	stw	r3,0(r17)
    82fc:	14400015 	stw	r17,0(r2)
    8300:	9823883a 	mov	r17,r19
    8304:	003fd806 	br	8268 <__multadd+0x78>
    8308:	9823883a 	mov	r17,r19
    830c:	003fd606 	br	8268 <__multadd+0x78>

00008310 <__s2b>:
    8310:	defff904 	addi	sp,sp,-28
    8314:	dc400115 	stw	r17,4(sp)
    8318:	dc000015 	stw	r16,0(sp)
    831c:	2023883a 	mov	r17,r4
    8320:	2821883a 	mov	r16,r5
    8324:	39000204 	addi	r4,r7,8
    8328:	01400244 	movi	r5,9
    832c:	dcc00315 	stw	r19,12(sp)
    8330:	dc800215 	stw	r18,8(sp)
    8334:	dfc00615 	stw	ra,24(sp)
    8338:	dd400515 	stw	r21,20(sp)
    833c:	dd000415 	stw	r20,16(sp)
    8340:	3825883a 	mov	r18,r7
    8344:	3027883a 	mov	r19,r6
    8348:	00020580 	call	2058 <__divsi3>
    834c:	00c00044 	movi	r3,1
    8350:	000b883a 	mov	r5,zero
    8354:	1880030e 	bge	r3,r2,8364 <__s2b+0x54>
    8358:	18c7883a 	add	r3,r3,r3
    835c:	29400044 	addi	r5,r5,1
    8360:	18bffd16 	blt	r3,r2,8358 <__s2b+0x48>
    8364:	8809883a 	mov	r4,r17
    8368:	00081200 	call	8120 <_Balloc>
    836c:	d8c00717 	ldw	r3,28(sp)
    8370:	10c00515 	stw	r3,20(r2)
    8374:	00c00044 	movi	r3,1
    8378:	10c00415 	stw	r3,16(r2)
    837c:	00c00244 	movi	r3,9
    8380:	1cc0210e 	bge	r3,r19,8408 <__s2b+0xf8>
    8384:	80eb883a 	add	r21,r16,r3
    8388:	a829883a 	mov	r20,r21
    838c:	84e1883a 	add	r16,r16,r19
    8390:	a1c00007 	ldb	r7,0(r20)
    8394:	01800284 	movi	r6,10
    8398:	a5000044 	addi	r20,r20,1
    839c:	100b883a 	mov	r5,r2
    83a0:	39fff404 	addi	r7,r7,-48
    83a4:	8809883a 	mov	r4,r17
    83a8:	00081f00 	call	81f0 <__multadd>
    83ac:	a43ff81e 	bne	r20,r16,8390 <__s2b+0x80>
    83b0:	ace1883a 	add	r16,r21,r19
    83b4:	843ffe04 	addi	r16,r16,-8
    83b8:	9c800a0e 	bge	r19,r18,83e4 <__s2b+0xd4>
    83bc:	94e5c83a 	sub	r18,r18,r19
    83c0:	84a5883a 	add	r18,r16,r18
    83c4:	81c00007 	ldb	r7,0(r16)
    83c8:	01800284 	movi	r6,10
    83cc:	84000044 	addi	r16,r16,1
    83d0:	100b883a 	mov	r5,r2
    83d4:	39fff404 	addi	r7,r7,-48
    83d8:	8809883a 	mov	r4,r17
    83dc:	00081f00 	call	81f0 <__multadd>
    83e0:	84bff81e 	bne	r16,r18,83c4 <__s2b+0xb4>
    83e4:	dfc00617 	ldw	ra,24(sp)
    83e8:	dd400517 	ldw	r21,20(sp)
    83ec:	dd000417 	ldw	r20,16(sp)
    83f0:	dcc00317 	ldw	r19,12(sp)
    83f4:	dc800217 	ldw	r18,8(sp)
    83f8:	dc400117 	ldw	r17,4(sp)
    83fc:	dc000017 	ldw	r16,0(sp)
    8400:	dec00704 	addi	sp,sp,28
    8404:	f800283a 	ret
    8408:	84000284 	addi	r16,r16,10
    840c:	1827883a 	mov	r19,r3
    8410:	003fe906 	br	83b8 <__s2b+0xa8>

00008414 <__hi0bits>:
    8414:	20bfffec 	andhi	r2,r4,65535
    8418:	1000141e 	bne	r2,zero,846c <__hi0bits+0x58>
    841c:	2008943a 	slli	r4,r4,16
    8420:	00800404 	movi	r2,16
    8424:	20ffc02c 	andhi	r3,r4,65280
    8428:	1800021e 	bne	r3,zero,8434 <__hi0bits+0x20>
    842c:	2008923a 	slli	r4,r4,8
    8430:	10800204 	addi	r2,r2,8
    8434:	20fc002c 	andhi	r3,r4,61440
    8438:	1800021e 	bne	r3,zero,8444 <__hi0bits+0x30>
    843c:	2008913a 	slli	r4,r4,4
    8440:	10800104 	addi	r2,r2,4
    8444:	20f0002c 	andhi	r3,r4,49152
    8448:	1800031e 	bne	r3,zero,8458 <__hi0bits+0x44>
    844c:	2109883a 	add	r4,r4,r4
    8450:	10800084 	addi	r2,r2,2
    8454:	2109883a 	add	r4,r4,r4
    8458:	20000316 	blt	r4,zero,8468 <__hi0bits+0x54>
    845c:	2110002c 	andhi	r4,r4,16384
    8460:	2000041e 	bne	r4,zero,8474 <__hi0bits+0x60>
    8464:	00800804 	movi	r2,32
    8468:	f800283a 	ret
    846c:	0005883a 	mov	r2,zero
    8470:	003fec06 	br	8424 <__hi0bits+0x10>
    8474:	10800044 	addi	r2,r2,1
    8478:	f800283a 	ret

0000847c <__lo0bits>:
    847c:	20c00017 	ldw	r3,0(r4)
    8480:	188001cc 	andi	r2,r3,7
    8484:	10000826 	beq	r2,zero,84a8 <__lo0bits+0x2c>
    8488:	1880004c 	andi	r2,r3,1
    848c:	1000211e 	bne	r2,zero,8514 <__lo0bits+0x98>
    8490:	1880008c 	andi	r2,r3,2
    8494:	1000211e 	bne	r2,zero,851c <__lo0bits+0xa0>
    8498:	1806d0ba 	srli	r3,r3,2
    849c:	00800084 	movi	r2,2
    84a0:	20c00015 	stw	r3,0(r4)
    84a4:	f800283a 	ret
    84a8:	18bfffcc 	andi	r2,r3,65535
    84ac:	10001326 	beq	r2,zero,84fc <__lo0bits+0x80>
    84b0:	0005883a 	mov	r2,zero
    84b4:	19403fcc 	andi	r5,r3,255
    84b8:	2800021e 	bne	r5,zero,84c4 <__lo0bits+0x48>
    84bc:	1806d23a 	srli	r3,r3,8
    84c0:	10800204 	addi	r2,r2,8
    84c4:	194003cc 	andi	r5,r3,15
    84c8:	2800021e 	bne	r5,zero,84d4 <__lo0bits+0x58>
    84cc:	1806d13a 	srli	r3,r3,4
    84d0:	10800104 	addi	r2,r2,4
    84d4:	194000cc 	andi	r5,r3,3
    84d8:	2800021e 	bne	r5,zero,84e4 <__lo0bits+0x68>
    84dc:	1806d0ba 	srli	r3,r3,2
    84e0:	10800084 	addi	r2,r2,2
    84e4:	1940004c 	andi	r5,r3,1
    84e8:	2800081e 	bne	r5,zero,850c <__lo0bits+0x90>
    84ec:	1806d07a 	srli	r3,r3,1
    84f0:	1800051e 	bne	r3,zero,8508 <__lo0bits+0x8c>
    84f4:	00800804 	movi	r2,32
    84f8:	f800283a 	ret
    84fc:	1806d43a 	srli	r3,r3,16
    8500:	00800404 	movi	r2,16
    8504:	003feb06 	br	84b4 <__lo0bits+0x38>
    8508:	10800044 	addi	r2,r2,1
    850c:	20c00015 	stw	r3,0(r4)
    8510:	f800283a 	ret
    8514:	0005883a 	mov	r2,zero
    8518:	f800283a 	ret
    851c:	1806d07a 	srli	r3,r3,1
    8520:	00800044 	movi	r2,1
    8524:	20c00015 	stw	r3,0(r4)
    8528:	f800283a 	ret

0000852c <__i2b>:
    852c:	defffd04 	addi	sp,sp,-12
    8530:	dc000015 	stw	r16,0(sp)
    8534:	04000044 	movi	r16,1
    8538:	dc400115 	stw	r17,4(sp)
    853c:	2823883a 	mov	r17,r5
    8540:	800b883a 	mov	r5,r16
    8544:	dfc00215 	stw	ra,8(sp)
    8548:	00081200 	call	8120 <_Balloc>
    854c:	14400515 	stw	r17,20(r2)
    8550:	14000415 	stw	r16,16(r2)
    8554:	dfc00217 	ldw	ra,8(sp)
    8558:	dc400117 	ldw	r17,4(sp)
    855c:	dc000017 	ldw	r16,0(sp)
    8560:	dec00304 	addi	sp,sp,12
    8564:	f800283a 	ret

00008568 <__multiply>:
    8568:	defffa04 	addi	sp,sp,-24
    856c:	dcc00315 	stw	r19,12(sp)
    8570:	dc800215 	stw	r18,8(sp)
    8574:	34c00417 	ldw	r19,16(r6)
    8578:	2c800417 	ldw	r18,16(r5)
    857c:	dd000415 	stw	r20,16(sp)
    8580:	dc400115 	stw	r17,4(sp)
    8584:	dfc00515 	stw	ra,20(sp)
    8588:	dc000015 	stw	r16,0(sp)
    858c:	2829883a 	mov	r20,r5
    8590:	3023883a 	mov	r17,r6
    8594:	94c0050e 	bge	r18,r19,85ac <__multiply+0x44>
    8598:	9007883a 	mov	r3,r18
    859c:	3029883a 	mov	r20,r6
    85a0:	9825883a 	mov	r18,r19
    85a4:	2823883a 	mov	r17,r5
    85a8:	1827883a 	mov	r19,r3
    85ac:	a0800217 	ldw	r2,8(r20)
    85b0:	94e1883a 	add	r16,r18,r19
    85b4:	a1400117 	ldw	r5,4(r20)
    85b8:	1400010e 	bge	r2,r16,85c0 <__multiply+0x58>
    85bc:	29400044 	addi	r5,r5,1
    85c0:	00081200 	call	8120 <_Balloc>
    85c4:	8415883a 	add	r10,r16,r16
    85c8:	12c00504 	addi	r11,r2,20
    85cc:	5295883a 	add	r10,r10,r10
    85d0:	5a95883a 	add	r10,r11,r10
    85d4:	5807883a 	mov	r3,r11
    85d8:	5a80032e 	bgeu	r11,r10,85e8 <__multiply+0x80>
    85dc:	18000015 	stw	zero,0(r3)
    85e0:	18c00104 	addi	r3,r3,4
    85e4:	1abffd36 	bltu	r3,r10,85dc <__multiply+0x74>
    85e8:	9ce7883a 	add	r19,r19,r19
    85ec:	94a5883a 	add	r18,r18,r18
    85f0:	89800504 	addi	r6,r17,20
    85f4:	9ce7883a 	add	r19,r19,r19
    85f8:	a3400504 	addi	r13,r20,20
    85fc:	94a5883a 	add	r18,r18,r18
    8600:	34d9883a 	add	r12,r6,r19
    8604:	6c93883a 	add	r9,r13,r18
    8608:	3300422e 	bgeu	r6,r12,8714 <__multiply+0x1ac>
    860c:	37c00017 	ldw	ra,0(r6)
    8610:	fbffffcc 	andi	r15,ra,65535
    8614:	78001b26 	beq	r15,zero,8684 <__multiply+0x11c>
    8618:	5811883a 	mov	r8,r11
    861c:	681d883a 	mov	r14,r13
    8620:	000f883a 	mov	r7,zero
    8624:	71000017 	ldw	r4,0(r14)
    8628:	40c00017 	ldw	r3,0(r8)
    862c:	73800104 	addi	r14,r14,4
    8630:	217fffcc 	andi	r5,r4,65535
    8634:	2bcb383a 	mul	r5,r5,r15
    8638:	2008d43a 	srli	r4,r4,16
    863c:	1c7fffcc 	andi	r17,r3,65535
    8640:	2c4b883a 	add	r5,r5,r17
    8644:	29cb883a 	add	r5,r5,r7
    8648:	23c9383a 	mul	r4,r4,r15
    864c:	1806d43a 	srli	r3,r3,16
    8650:	280ed43a 	srli	r7,r5,16
    8654:	297fffcc 	andi	r5,r5,65535
    8658:	20c7883a 	add	r3,r4,r3
    865c:	19c7883a 	add	r3,r3,r7
    8660:	1808943a 	slli	r4,r3,16
    8664:	4023883a 	mov	r17,r8
    8668:	180ed43a 	srli	r7,r3,16
    866c:	214ab03a 	or	r5,r4,r5
    8670:	41400015 	stw	r5,0(r8)
    8674:	42000104 	addi	r8,r8,4
    8678:	727fea36 	bltu	r14,r9,8624 <__multiply+0xbc>
    867c:	89c00115 	stw	r7,4(r17)
    8680:	37c00017 	ldw	ra,0(r6)
    8684:	f83ed43a 	srli	ra,ra,16
    8688:	f8001f26 	beq	ra,zero,8708 <__multiply+0x1a0>
    868c:	58c00017 	ldw	r3,0(r11)
    8690:	681d883a 	mov	r14,r13
    8694:	581f883a 	mov	r15,r11
    8698:	1811883a 	mov	r8,r3
    869c:	5825883a 	mov	r18,r11
    86a0:	000f883a 	mov	r7,zero
    86a4:	00000106 	br	86ac <__multiply+0x144>
    86a8:	8825883a 	mov	r18,r17
    86ac:	7140000b 	ldhu	r5,0(r14)
    86b0:	4010d43a 	srli	r8,r8,16
    86b4:	193fffcc 	andi	r4,r3,65535
    86b8:	2fcb383a 	mul	r5,r5,ra
    86bc:	7bc00104 	addi	r15,r15,4
    86c0:	73800104 	addi	r14,r14,4
    86c4:	2a0b883a 	add	r5,r5,r8
    86c8:	29cb883a 	add	r5,r5,r7
    86cc:	2806943a 	slli	r3,r5,16
    86d0:	94400104 	addi	r17,r18,4
    86d4:	280ad43a 	srli	r5,r5,16
    86d8:	1908b03a 	or	r4,r3,r4
    86dc:	793fff15 	stw	r4,-4(r15)
    86e0:	70ffff17 	ldw	r3,-4(r14)
    86e4:	8a000017 	ldw	r8,0(r17)
    86e8:	1806d43a 	srli	r3,r3,16
    86ec:	413fffcc 	andi	r4,r8,65535
    86f0:	1fc7383a 	mul	r3,r3,ra
    86f4:	1907883a 	add	r3,r3,r4
    86f8:	1947883a 	add	r3,r3,r5
    86fc:	180ed43a 	srli	r7,r3,16
    8700:	727fe936 	bltu	r14,r9,86a8 <__multiply+0x140>
    8704:	90c00115 	stw	r3,4(r18)
    8708:	31800104 	addi	r6,r6,4
    870c:	5ac00104 	addi	r11,r11,4
    8710:	333fbe36 	bltu	r6,r12,860c <__multiply+0xa4>
    8714:	0400090e 	bge	zero,r16,873c <__multiply+0x1d4>
    8718:	50ffff17 	ldw	r3,-4(r10)
    871c:	52bfff04 	addi	r10,r10,-4
    8720:	18000326 	beq	r3,zero,8730 <__multiply+0x1c8>
    8724:	00000506 	br	873c <__multiply+0x1d4>
    8728:	50c00017 	ldw	r3,0(r10)
    872c:	1800031e 	bne	r3,zero,873c <__multiply+0x1d4>
    8730:	843fffc4 	addi	r16,r16,-1
    8734:	52bfff04 	addi	r10,r10,-4
    8738:	803ffb1e 	bne	r16,zero,8728 <__multiply+0x1c0>
    873c:	14000415 	stw	r16,16(r2)
    8740:	dfc00517 	ldw	ra,20(sp)
    8744:	dd000417 	ldw	r20,16(sp)
    8748:	dcc00317 	ldw	r19,12(sp)
    874c:	dc800217 	ldw	r18,8(sp)
    8750:	dc400117 	ldw	r17,4(sp)
    8754:	dc000017 	ldw	r16,0(sp)
    8758:	dec00604 	addi	sp,sp,24
    875c:	f800283a 	ret

00008760 <__pow5mult>:
    8760:	defffa04 	addi	sp,sp,-24
    8764:	dcc00315 	stw	r19,12(sp)
    8768:	dc000015 	stw	r16,0(sp)
    876c:	dfc00515 	stw	ra,20(sp)
    8770:	dd000415 	stw	r20,16(sp)
    8774:	dc800215 	stw	r18,8(sp)
    8778:	dc400115 	stw	r17,4(sp)
    877c:	308000cc 	andi	r2,r6,3
    8780:	3021883a 	mov	r16,r6
    8784:	2027883a 	mov	r19,r4
    8788:	10002f1e 	bne	r2,zero,8848 <__pow5mult+0xe8>
    878c:	2825883a 	mov	r18,r5
    8790:	8021d0ba 	srai	r16,r16,2
    8794:	80001a26 	beq	r16,zero,8800 <__pow5mult+0xa0>
    8798:	9c401217 	ldw	r17,72(r19)
    879c:	8800061e 	bne	r17,zero,87b8 <__pow5mult+0x58>
    87a0:	00003406 	br	8874 <__pow5mult+0x114>
    87a4:	8021d07a 	srai	r16,r16,1
    87a8:	80001526 	beq	r16,zero,8800 <__pow5mult+0xa0>
    87ac:	88800017 	ldw	r2,0(r17)
    87b0:	10001c26 	beq	r2,zero,8824 <__pow5mult+0xc4>
    87b4:	1023883a 	mov	r17,r2
    87b8:	8080004c 	andi	r2,r16,1
    87bc:	103ff926 	beq	r2,zero,87a4 <__pow5mult+0x44>
    87c0:	880d883a 	mov	r6,r17
    87c4:	900b883a 	mov	r5,r18
    87c8:	9809883a 	mov	r4,r19
    87cc:	00085680 	call	8568 <__multiply>
    87d0:	90001b26 	beq	r18,zero,8840 <__pow5mult+0xe0>
    87d4:	91000117 	ldw	r4,4(r18)
    87d8:	98c01317 	ldw	r3,76(r19)
    87dc:	8021d07a 	srai	r16,r16,1
    87e0:	2109883a 	add	r4,r4,r4
    87e4:	2109883a 	add	r4,r4,r4
    87e8:	1907883a 	add	r3,r3,r4
    87ec:	19000017 	ldw	r4,0(r3)
    87f0:	91000015 	stw	r4,0(r18)
    87f4:	1c800015 	stw	r18,0(r3)
    87f8:	1025883a 	mov	r18,r2
    87fc:	803feb1e 	bne	r16,zero,87ac <__pow5mult+0x4c>
    8800:	9005883a 	mov	r2,r18
    8804:	dfc00517 	ldw	ra,20(sp)
    8808:	dd000417 	ldw	r20,16(sp)
    880c:	dcc00317 	ldw	r19,12(sp)
    8810:	dc800217 	ldw	r18,8(sp)
    8814:	dc400117 	ldw	r17,4(sp)
    8818:	dc000017 	ldw	r16,0(sp)
    881c:	dec00604 	addi	sp,sp,24
    8820:	f800283a 	ret
    8824:	880d883a 	mov	r6,r17
    8828:	880b883a 	mov	r5,r17
    882c:	9809883a 	mov	r4,r19
    8830:	00085680 	call	8568 <__multiply>
    8834:	88800015 	stw	r2,0(r17)
    8838:	10000015 	stw	zero,0(r2)
    883c:	003fdd06 	br	87b4 <__pow5mult+0x54>
    8840:	1025883a 	mov	r18,r2
    8844:	003fd706 	br	87a4 <__pow5mult+0x44>
    8848:	10bfffc4 	addi	r2,r2,-1
    884c:	1085883a 	add	r2,r2,r2
    8850:	00c00074 	movhi	r3,1
    8854:	18c63904 	addi	r3,r3,6372
    8858:	1085883a 	add	r2,r2,r2
    885c:	1885883a 	add	r2,r3,r2
    8860:	11800017 	ldw	r6,0(r2)
    8864:	000f883a 	mov	r7,zero
    8868:	00081f00 	call	81f0 <__multadd>
    886c:	1025883a 	mov	r18,r2
    8870:	003fc706 	br	8790 <__pow5mult+0x30>
    8874:	05000044 	movi	r20,1
    8878:	a00b883a 	mov	r5,r20
    887c:	9809883a 	mov	r4,r19
    8880:	00081200 	call	8120 <_Balloc>
    8884:	1023883a 	mov	r17,r2
    8888:	00809c44 	movi	r2,625
    888c:	88800515 	stw	r2,20(r17)
    8890:	8d000415 	stw	r20,16(r17)
    8894:	9c401215 	stw	r17,72(r19)
    8898:	88000015 	stw	zero,0(r17)
    889c:	003fc606 	br	87b8 <__pow5mult+0x58>

000088a0 <__lshift>:
    88a0:	defff904 	addi	sp,sp,-28
    88a4:	dd400515 	stw	r21,20(sp)
    88a8:	dcc00315 	stw	r19,12(sp)
    88ac:	302bd17a 	srai	r21,r6,5
    88b0:	2cc00417 	ldw	r19,16(r5)
    88b4:	28800217 	ldw	r2,8(r5)
    88b8:	dd000415 	stw	r20,16(sp)
    88bc:	ace7883a 	add	r19,r21,r19
    88c0:	dc800215 	stw	r18,8(sp)
    88c4:	dc400115 	stw	r17,4(sp)
    88c8:	dc000015 	stw	r16,0(sp)
    88cc:	dfc00615 	stw	ra,24(sp)
    88d0:	9c000044 	addi	r16,r19,1
    88d4:	2823883a 	mov	r17,r5
    88d8:	3029883a 	mov	r20,r6
    88dc:	2025883a 	mov	r18,r4
    88e0:	29400117 	ldw	r5,4(r5)
    88e4:	1400030e 	bge	r2,r16,88f4 <__lshift+0x54>
    88e8:	1085883a 	add	r2,r2,r2
    88ec:	29400044 	addi	r5,r5,1
    88f0:	143ffd16 	blt	r2,r16,88e8 <__lshift+0x48>
    88f4:	9009883a 	mov	r4,r18
    88f8:	00081200 	call	8120 <_Balloc>
    88fc:	10c00504 	addi	r3,r2,20
    8900:	0540070e 	bge	zero,r21,8920 <__lshift+0x80>
    8904:	ad6b883a 	add	r21,r21,r21
    8908:	ad6b883a 	add	r21,r21,r21
    890c:	1809883a 	mov	r4,r3
    8910:	1d47883a 	add	r3,r3,r21
    8914:	20000015 	stw	zero,0(r4)
    8918:	21000104 	addi	r4,r4,4
    891c:	193ffd1e 	bne	r3,r4,8914 <__lshift+0x74>
    8920:	8a000417 	ldw	r8,16(r17)
    8924:	89000504 	addi	r4,r17,20
    8928:	a18007cc 	andi	r6,r20,31
    892c:	4211883a 	add	r8,r8,r8
    8930:	4211883a 	add	r8,r8,r8
    8934:	2211883a 	add	r8,r4,r8
    8938:	30002326 	beq	r6,zero,89c8 <__lshift+0x128>
    893c:	02400804 	movi	r9,32
    8940:	4993c83a 	sub	r9,r9,r6
    8944:	000b883a 	mov	r5,zero
    8948:	21c00017 	ldw	r7,0(r4)
    894c:	1815883a 	mov	r10,r3
    8950:	18c00104 	addi	r3,r3,4
    8954:	398e983a 	sll	r7,r7,r6
    8958:	21000104 	addi	r4,r4,4
    895c:	394ab03a 	or	r5,r7,r5
    8960:	197fff15 	stw	r5,-4(r3)
    8964:	217fff17 	ldw	r5,-4(r4)
    8968:	2a4ad83a 	srl	r5,r5,r9
    896c:	223ff636 	bltu	r4,r8,8948 <__lshift+0xa8>
    8970:	51400115 	stw	r5,4(r10)
    8974:	28001a1e 	bne	r5,zero,89e0 <__lshift+0x140>
    8978:	843fffc4 	addi	r16,r16,-1
    897c:	14000415 	stw	r16,16(r2)
    8980:	88000826 	beq	r17,zero,89a4 <__lshift+0x104>
    8984:	89000117 	ldw	r4,4(r17)
    8988:	90c01317 	ldw	r3,76(r18)
    898c:	2109883a 	add	r4,r4,r4
    8990:	2109883a 	add	r4,r4,r4
    8994:	1907883a 	add	r3,r3,r4
    8998:	19000017 	ldw	r4,0(r3)
    899c:	89000015 	stw	r4,0(r17)
    89a0:	1c400015 	stw	r17,0(r3)
    89a4:	dfc00617 	ldw	ra,24(sp)
    89a8:	dd400517 	ldw	r21,20(sp)
    89ac:	dd000417 	ldw	r20,16(sp)
    89b0:	dcc00317 	ldw	r19,12(sp)
    89b4:	dc800217 	ldw	r18,8(sp)
    89b8:	dc400117 	ldw	r17,4(sp)
    89bc:	dc000017 	ldw	r16,0(sp)
    89c0:	dec00704 	addi	sp,sp,28
    89c4:	f800283a 	ret
    89c8:	21400017 	ldw	r5,0(r4)
    89cc:	18c00104 	addi	r3,r3,4
    89d0:	21000104 	addi	r4,r4,4
    89d4:	197fff15 	stw	r5,-4(r3)
    89d8:	223ffb36 	bltu	r4,r8,89c8 <__lshift+0x128>
    89dc:	003fe606 	br	8978 <__lshift+0xd8>
    89e0:	9c000084 	addi	r16,r19,2
    89e4:	003fe406 	br	8978 <__lshift+0xd8>

000089e8 <__mcmp>:
    89e8:	20800417 	ldw	r2,16(r4)
    89ec:	28c00417 	ldw	r3,16(r5)
    89f0:	10c5c83a 	sub	r2,r2,r3
    89f4:	1000111e 	bne	r2,zero,8a3c <__mcmp+0x54>
    89f8:	18c7883a 	add	r3,r3,r3
    89fc:	18c7883a 	add	r3,r3,r3
    8a00:	21000504 	addi	r4,r4,20
    8a04:	29400504 	addi	r5,r5,20
    8a08:	20c5883a 	add	r2,r4,r3
    8a0c:	28cb883a 	add	r5,r5,r3
    8a10:	00000106 	br	8a18 <__mcmp+0x30>
    8a14:	20800a2e 	bgeu	r4,r2,8a40 <__mcmp+0x58>
    8a18:	10bfff04 	addi	r2,r2,-4
    8a1c:	297fff04 	addi	r5,r5,-4
    8a20:	11800017 	ldw	r6,0(r2)
    8a24:	28c00017 	ldw	r3,0(r5)
    8a28:	30fffa26 	beq	r6,r3,8a14 <__mcmp+0x2c>
    8a2c:	30c00236 	bltu	r6,r3,8a38 <__mcmp+0x50>
    8a30:	00800044 	movi	r2,1
    8a34:	f800283a 	ret
    8a38:	00bfffc4 	movi	r2,-1
    8a3c:	f800283a 	ret
    8a40:	0005883a 	mov	r2,zero
    8a44:	f800283a 	ret

00008a48 <__mdiff>:
    8a48:	28c00417 	ldw	r3,16(r5)
    8a4c:	30800417 	ldw	r2,16(r6)
    8a50:	defffa04 	addi	sp,sp,-24
    8a54:	dcc00315 	stw	r19,12(sp)
    8a58:	dc800215 	stw	r18,8(sp)
    8a5c:	dfc00515 	stw	ra,20(sp)
    8a60:	dd000415 	stw	r20,16(sp)
    8a64:	dc400115 	stw	r17,4(sp)
    8a68:	dc000015 	stw	r16,0(sp)
    8a6c:	1887c83a 	sub	r3,r3,r2
    8a70:	2825883a 	mov	r18,r5
    8a74:	3027883a 	mov	r19,r6
    8a78:	1800141e 	bne	r3,zero,8acc <__mdiff+0x84>
    8a7c:	1085883a 	add	r2,r2,r2
    8a80:	1085883a 	add	r2,r2,r2
    8a84:	2a000504 	addi	r8,r5,20
    8a88:	34000504 	addi	r16,r6,20
    8a8c:	4087883a 	add	r3,r8,r2
    8a90:	8085883a 	add	r2,r16,r2
    8a94:	00000106 	br	8a9c <__mdiff+0x54>
    8a98:	40c0592e 	bgeu	r8,r3,8c00 <__mdiff+0x1b8>
    8a9c:	18ffff04 	addi	r3,r3,-4
    8aa0:	10bfff04 	addi	r2,r2,-4
    8aa4:	19c00017 	ldw	r7,0(r3)
    8aa8:	11400017 	ldw	r5,0(r2)
    8aac:	397ffa26 	beq	r7,r5,8a98 <__mdiff+0x50>
    8ab0:	3940592e 	bgeu	r7,r5,8c18 <__mdiff+0x1d0>
    8ab4:	9005883a 	mov	r2,r18
    8ab8:	4023883a 	mov	r17,r8
    8abc:	9825883a 	mov	r18,r19
    8ac0:	05000044 	movi	r20,1
    8ac4:	1027883a 	mov	r19,r2
    8ac8:	00000406 	br	8adc <__mdiff+0x94>
    8acc:	18005616 	blt	r3,zero,8c28 <__mdiff+0x1e0>
    8ad0:	34400504 	addi	r17,r6,20
    8ad4:	2c000504 	addi	r16,r5,20
    8ad8:	0029883a 	mov	r20,zero
    8adc:	91400117 	ldw	r5,4(r18)
    8ae0:	00081200 	call	8120 <_Balloc>
    8ae4:	92400417 	ldw	r9,16(r18)
    8ae8:	9b000417 	ldw	r12,16(r19)
    8aec:	12c00504 	addi	r11,r2,20
    8af0:	4a51883a 	add	r8,r9,r9
    8af4:	6319883a 	add	r12,r12,r12
    8af8:	4211883a 	add	r8,r8,r8
    8afc:	6319883a 	add	r12,r12,r12
    8b00:	15000315 	stw	r20,12(r2)
    8b04:	8211883a 	add	r8,r16,r8
    8b08:	8b19883a 	add	r12,r17,r12
    8b0c:	0007883a 	mov	r3,zero
    8b10:	81400017 	ldw	r5,0(r16)
    8b14:	89c00017 	ldw	r7,0(r17)
    8b18:	59800104 	addi	r6,r11,4
    8b1c:	293fffcc 	andi	r4,r5,65535
    8b20:	20c7883a 	add	r3,r4,r3
    8b24:	393fffcc 	andi	r4,r7,65535
    8b28:	1909c83a 	sub	r4,r3,r4
    8b2c:	280ad43a 	srli	r5,r5,16
    8b30:	380ed43a 	srli	r7,r7,16
    8b34:	2007d43a 	srai	r3,r4,16
    8b38:	213fffcc 	andi	r4,r4,65535
    8b3c:	29cbc83a 	sub	r5,r5,r7
    8b40:	28c7883a 	add	r3,r5,r3
    8b44:	180a943a 	slli	r5,r3,16
    8b48:	8c400104 	addi	r17,r17,4
    8b4c:	84000104 	addi	r16,r16,4
    8b50:	2908b03a 	or	r4,r5,r4
    8b54:	59000015 	stw	r4,0(r11)
    8b58:	1807d43a 	srai	r3,r3,16
    8b5c:	3015883a 	mov	r10,r6
    8b60:	3017883a 	mov	r11,r6
    8b64:	8b3fea36 	bltu	r17,r12,8b10 <__mdiff+0xc8>
    8b68:	8200162e 	bgeu	r16,r8,8bc4 <__mdiff+0x17c>
    8b6c:	8017883a 	mov	r11,r16
    8b70:	59400017 	ldw	r5,0(r11)
    8b74:	31800104 	addi	r6,r6,4
    8b78:	5ac00104 	addi	r11,r11,4
    8b7c:	293fffcc 	andi	r4,r5,65535
    8b80:	20c7883a 	add	r3,r4,r3
    8b84:	280ed43a 	srli	r7,r5,16
    8b88:	180bd43a 	srai	r5,r3,16
    8b8c:	193fffcc 	andi	r4,r3,65535
    8b90:	3947883a 	add	r3,r7,r5
    8b94:	180a943a 	slli	r5,r3,16
    8b98:	1807d43a 	srai	r3,r3,16
    8b9c:	2908b03a 	or	r4,r5,r4
    8ba0:	313fff15 	stw	r4,-4(r6)
    8ba4:	5a3ff236 	bltu	r11,r8,8b70 <__mdiff+0x128>
    8ba8:	0406303a 	nor	r3,zero,r16
    8bac:	1a07883a 	add	r3,r3,r8
    8bb0:	1806d0ba 	srli	r3,r3,2
    8bb4:	18c00044 	addi	r3,r3,1
    8bb8:	18c7883a 	add	r3,r3,r3
    8bbc:	18c7883a 	add	r3,r3,r3
    8bc0:	50d5883a 	add	r10,r10,r3
    8bc4:	50ffff04 	addi	r3,r10,-4
    8bc8:	2000041e 	bne	r4,zero,8bdc <__mdiff+0x194>
    8bcc:	18ffff04 	addi	r3,r3,-4
    8bd0:	19000017 	ldw	r4,0(r3)
    8bd4:	4a7fffc4 	addi	r9,r9,-1
    8bd8:	203ffc26 	beq	r4,zero,8bcc <__mdiff+0x184>
    8bdc:	12400415 	stw	r9,16(r2)
    8be0:	dfc00517 	ldw	ra,20(sp)
    8be4:	dd000417 	ldw	r20,16(sp)
    8be8:	dcc00317 	ldw	r19,12(sp)
    8bec:	dc800217 	ldw	r18,8(sp)
    8bf0:	dc400117 	ldw	r17,4(sp)
    8bf4:	dc000017 	ldw	r16,0(sp)
    8bf8:	dec00604 	addi	sp,sp,24
    8bfc:	f800283a 	ret
    8c00:	000b883a 	mov	r5,zero
    8c04:	00081200 	call	8120 <_Balloc>
    8c08:	00c00044 	movi	r3,1
    8c0c:	10c00415 	stw	r3,16(r2)
    8c10:	10000515 	stw	zero,20(r2)
    8c14:	003ff206 	br	8be0 <__mdiff+0x198>
    8c18:	8023883a 	mov	r17,r16
    8c1c:	0029883a 	mov	r20,zero
    8c20:	4021883a 	mov	r16,r8
    8c24:	003fad06 	br	8adc <__mdiff+0x94>
    8c28:	9005883a 	mov	r2,r18
    8c2c:	94400504 	addi	r17,r18,20
    8c30:	9c000504 	addi	r16,r19,20
    8c34:	9825883a 	mov	r18,r19
    8c38:	05000044 	movi	r20,1
    8c3c:	1027883a 	mov	r19,r2
    8c40:	003fa606 	br	8adc <__mdiff+0x94>

00008c44 <__ulp>:
    8c44:	295ffc2c 	andhi	r5,r5,32752
    8c48:	00bf3034 	movhi	r2,64704
    8c4c:	2887883a 	add	r3,r5,r2
    8c50:	00c0020e 	bge	zero,r3,8c5c <__ulp+0x18>
    8c54:	0005883a 	mov	r2,zero
    8c58:	f800283a 	ret
    8c5c:	00c7c83a 	sub	r3,zero,r3
    8c60:	1807d53a 	srai	r3,r3,20
    8c64:	008004c4 	movi	r2,19
    8c68:	10c00b0e 	bge	r2,r3,8c98 <__ulp+0x54>
    8c6c:	18bffb04 	addi	r2,r3,-20
    8c70:	01000784 	movi	r4,30
    8c74:	0007883a 	mov	r3,zero
    8c78:	20800516 	blt	r4,r2,8c90 <__ulp+0x4c>
    8c7c:	010007c4 	movi	r4,31
    8c80:	2089c83a 	sub	r4,r4,r2
    8c84:	00800044 	movi	r2,1
    8c88:	1104983a 	sll	r2,r2,r4
    8c8c:	f800283a 	ret
    8c90:	00800044 	movi	r2,1
    8c94:	f800283a 	ret
    8c98:	01400234 	movhi	r5,8
    8c9c:	28c7d83a 	sra	r3,r5,r3
    8ca0:	0005883a 	mov	r2,zero
    8ca4:	f800283a 	ret

00008ca8 <__b2d>:
    8ca8:	defffa04 	addi	sp,sp,-24
    8cac:	dc000015 	stw	r16,0(sp)
    8cb0:	24000417 	ldw	r16,16(r4)
    8cb4:	dc400115 	stw	r17,4(sp)
    8cb8:	24400504 	addi	r17,r4,20
    8cbc:	8421883a 	add	r16,r16,r16
    8cc0:	8421883a 	add	r16,r16,r16
    8cc4:	8c21883a 	add	r16,r17,r16
    8cc8:	dc800215 	stw	r18,8(sp)
    8ccc:	84bfff17 	ldw	r18,-4(r16)
    8cd0:	dd000415 	stw	r20,16(sp)
    8cd4:	dcc00315 	stw	r19,12(sp)
    8cd8:	9009883a 	mov	r4,r18
    8cdc:	2829883a 	mov	r20,r5
    8ce0:	dfc00515 	stw	ra,20(sp)
    8ce4:	00084140 	call	8414 <__hi0bits>
    8ce8:	00c00804 	movi	r3,32
    8cec:	1889c83a 	sub	r4,r3,r2
    8cf0:	a1000015 	stw	r4,0(r20)
    8cf4:	01000284 	movi	r4,10
    8cf8:	84ffff04 	addi	r19,r16,-4
    8cfc:	20801216 	blt	r4,r2,8d48 <__b2d+0xa0>
    8d00:	018002c4 	movi	r6,11
    8d04:	308dc83a 	sub	r6,r6,r2
    8d08:	9186d83a 	srl	r3,r18,r6
    8d0c:	18cffc34 	orhi	r3,r3,16368
    8d10:	8cc0212e 	bgeu	r17,r19,8d98 <__b2d+0xf0>
    8d14:	813ffe17 	ldw	r4,-8(r16)
    8d18:	218cd83a 	srl	r6,r4,r6
    8d1c:	10800544 	addi	r2,r2,21
    8d20:	9084983a 	sll	r2,r18,r2
    8d24:	1184b03a 	or	r2,r2,r6
    8d28:	dfc00517 	ldw	ra,20(sp)
    8d2c:	dd000417 	ldw	r20,16(sp)
    8d30:	dcc00317 	ldw	r19,12(sp)
    8d34:	dc800217 	ldw	r18,8(sp)
    8d38:	dc400117 	ldw	r17,4(sp)
    8d3c:	dc000017 	ldw	r16,0(sp)
    8d40:	dec00604 	addi	sp,sp,24
    8d44:	f800283a 	ret
    8d48:	8cc00f2e 	bgeu	r17,r19,8d88 <__b2d+0xe0>
    8d4c:	117ffd44 	addi	r5,r2,-11
    8d50:	80bffe17 	ldw	r2,-8(r16)
    8d54:	28000e26 	beq	r5,zero,8d90 <__b2d+0xe8>
    8d58:	1949c83a 	sub	r4,r3,r5
    8d5c:	9164983a 	sll	r18,r18,r5
    8d60:	1106d83a 	srl	r3,r2,r4
    8d64:	81bffe04 	addi	r6,r16,-8
    8d68:	948ffc34 	orhi	r18,r18,16368
    8d6c:	90c6b03a 	or	r3,r18,r3
    8d70:	89800e2e 	bgeu	r17,r6,8dac <__b2d+0x104>
    8d74:	81bffd17 	ldw	r6,-12(r16)
    8d78:	1144983a 	sll	r2,r2,r5
    8d7c:	310ad83a 	srl	r5,r6,r4
    8d80:	2884b03a 	or	r2,r5,r2
    8d84:	003fe806 	br	8d28 <__b2d+0x80>
    8d88:	10bffd44 	addi	r2,r2,-11
    8d8c:	1000041e 	bne	r2,zero,8da0 <__b2d+0xf8>
    8d90:	90cffc34 	orhi	r3,r18,16368
    8d94:	003fe406 	br	8d28 <__b2d+0x80>
    8d98:	000d883a 	mov	r6,zero
    8d9c:	003fdf06 	br	8d1c <__b2d+0x74>
    8da0:	90a4983a 	sll	r18,r18,r2
    8da4:	0005883a 	mov	r2,zero
    8da8:	003ff906 	br	8d90 <__b2d+0xe8>
    8dac:	1144983a 	sll	r2,r2,r5
    8db0:	003fdd06 	br	8d28 <__b2d+0x80>

00008db4 <__d2b>:
    8db4:	defff804 	addi	sp,sp,-32
    8db8:	dc000215 	stw	r16,8(sp)
    8dbc:	3021883a 	mov	r16,r6
    8dc0:	dc400315 	stw	r17,12(sp)
    8dc4:	8022907a 	slli	r17,r16,1
    8dc8:	dd000615 	stw	r20,24(sp)
    8dcc:	2829883a 	mov	r20,r5
    8dd0:	01400044 	movi	r5,1
    8dd4:	dcc00515 	stw	r19,20(sp)
    8dd8:	dc800415 	stw	r18,16(sp)
    8ddc:	dfc00715 	stw	ra,28(sp)
    8de0:	3825883a 	mov	r18,r7
    8de4:	8822d57a 	srli	r17,r17,21
    8de8:	00081200 	call	8120 <_Balloc>
    8dec:	1027883a 	mov	r19,r2
    8df0:	00800434 	movhi	r2,16
    8df4:	10bfffc4 	addi	r2,r2,-1
    8df8:	808c703a 	and	r6,r16,r2
    8dfc:	88000126 	beq	r17,zero,8e04 <__d2b+0x50>
    8e00:	31800434 	orhi	r6,r6,16
    8e04:	d9800015 	stw	r6,0(sp)
    8e08:	a0002426 	beq	r20,zero,8e9c <__d2b+0xe8>
    8e0c:	d9000104 	addi	r4,sp,4
    8e10:	dd000115 	stw	r20,4(sp)
    8e14:	000847c0 	call	847c <__lo0bits>
    8e18:	d8c00017 	ldw	r3,0(sp)
    8e1c:	10002f1e 	bne	r2,zero,8edc <__d2b+0x128>
    8e20:	d9000117 	ldw	r4,4(sp)
    8e24:	99000515 	stw	r4,20(r19)
    8e28:	1821003a 	cmpeq	r16,r3,zero
    8e2c:	01000084 	movi	r4,2
    8e30:	2421c83a 	sub	r16,r4,r16
    8e34:	98c00615 	stw	r3,24(r19)
    8e38:	9c000415 	stw	r16,16(r19)
    8e3c:	88001f1e 	bne	r17,zero,8ebc <__d2b+0x108>
    8e40:	10bef384 	addi	r2,r2,-1074
    8e44:	90800015 	stw	r2,0(r18)
    8e48:	00900034 	movhi	r2,16384
    8e4c:	10bfffc4 	addi	r2,r2,-1
    8e50:	8085883a 	add	r2,r16,r2
    8e54:	1085883a 	add	r2,r2,r2
    8e58:	1085883a 	add	r2,r2,r2
    8e5c:	9885883a 	add	r2,r19,r2
    8e60:	11000517 	ldw	r4,20(r2)
    8e64:	8020917a 	slli	r16,r16,5
    8e68:	00084140 	call	8414 <__hi0bits>
    8e6c:	d8c00817 	ldw	r3,32(sp)
    8e70:	8085c83a 	sub	r2,r16,r2
    8e74:	18800015 	stw	r2,0(r3)
    8e78:	9805883a 	mov	r2,r19
    8e7c:	dfc00717 	ldw	ra,28(sp)
    8e80:	dd000617 	ldw	r20,24(sp)
    8e84:	dcc00517 	ldw	r19,20(sp)
    8e88:	dc800417 	ldw	r18,16(sp)
    8e8c:	dc400317 	ldw	r17,12(sp)
    8e90:	dc000217 	ldw	r16,8(sp)
    8e94:	dec00804 	addi	sp,sp,32
    8e98:	f800283a 	ret
    8e9c:	d809883a 	mov	r4,sp
    8ea0:	000847c0 	call	847c <__lo0bits>
    8ea4:	d8c00017 	ldw	r3,0(sp)
    8ea8:	04000044 	movi	r16,1
    8eac:	9c000415 	stw	r16,16(r19)
    8eb0:	98c00515 	stw	r3,20(r19)
    8eb4:	10800804 	addi	r2,r2,32
    8eb8:	883fe126 	beq	r17,zero,8e40 <__d2b+0x8c>
    8ebc:	00c00d44 	movi	r3,53
    8ec0:	8c7ef344 	addi	r17,r17,-1075
    8ec4:	88a3883a 	add	r17,r17,r2
    8ec8:	1885c83a 	sub	r2,r3,r2
    8ecc:	d8c00817 	ldw	r3,32(sp)
    8ed0:	94400015 	stw	r17,0(r18)
    8ed4:	18800015 	stw	r2,0(r3)
    8ed8:	003fe706 	br	8e78 <__d2b+0xc4>
    8edc:	01000804 	movi	r4,32
    8ee0:	2089c83a 	sub	r4,r4,r2
    8ee4:	1908983a 	sll	r4,r3,r4
    8ee8:	d9400117 	ldw	r5,4(sp)
    8eec:	1886d83a 	srl	r3,r3,r2
    8ef0:	2148b03a 	or	r4,r4,r5
    8ef4:	99000515 	stw	r4,20(r19)
    8ef8:	d8c00015 	stw	r3,0(sp)
    8efc:	003fca06 	br	8e28 <__d2b+0x74>

00008f00 <__ratio>:
    8f00:	defff904 	addi	sp,sp,-28
    8f04:	dc400315 	stw	r17,12(sp)
    8f08:	2823883a 	mov	r17,r5
    8f0c:	d9400104 	addi	r5,sp,4
    8f10:	dfc00615 	stw	ra,24(sp)
    8f14:	dcc00515 	stw	r19,20(sp)
    8f18:	dc800415 	stw	r18,16(sp)
    8f1c:	2027883a 	mov	r19,r4
    8f20:	dc000215 	stw	r16,8(sp)
    8f24:	0008ca80 	call	8ca8 <__b2d>
    8f28:	d80b883a 	mov	r5,sp
    8f2c:	8809883a 	mov	r4,r17
    8f30:	1025883a 	mov	r18,r2
    8f34:	1821883a 	mov	r16,r3
    8f38:	0008ca80 	call	8ca8 <__b2d>
    8f3c:	8a000417 	ldw	r8,16(r17)
    8f40:	99000417 	ldw	r4,16(r19)
    8f44:	d9400117 	ldw	r5,4(sp)
    8f48:	2209c83a 	sub	r4,r4,r8
    8f4c:	2010917a 	slli	r8,r4,5
    8f50:	d9000017 	ldw	r4,0(sp)
    8f54:	2909c83a 	sub	r4,r5,r4
    8f58:	4109883a 	add	r4,r8,r4
    8f5c:	01000e0e 	bge	zero,r4,8f98 <__ratio+0x98>
    8f60:	2008953a 	slli	r4,r4,20
    8f64:	2421883a 	add	r16,r4,r16
    8f68:	100d883a 	mov	r6,r2
    8f6c:	180f883a 	mov	r7,r3
    8f70:	9009883a 	mov	r4,r18
    8f74:	800b883a 	mov	r5,r16
    8f78:	000cbe40 	call	cbe4 <__divdf3>
    8f7c:	dfc00617 	ldw	ra,24(sp)
    8f80:	dcc00517 	ldw	r19,20(sp)
    8f84:	dc800417 	ldw	r18,16(sp)
    8f88:	dc400317 	ldw	r17,12(sp)
    8f8c:	dc000217 	ldw	r16,8(sp)
    8f90:	dec00704 	addi	sp,sp,28
    8f94:	f800283a 	ret
    8f98:	2008953a 	slli	r4,r4,20
    8f9c:	1907c83a 	sub	r3,r3,r4
    8fa0:	003ff106 	br	8f68 <__ratio+0x68>

00008fa4 <_mprec_log10>:
    8fa4:	defffe04 	addi	sp,sp,-8
    8fa8:	dc000015 	stw	r16,0(sp)
    8fac:	dfc00115 	stw	ra,4(sp)
    8fb0:	008005c4 	movi	r2,23
    8fb4:	2021883a 	mov	r16,r4
    8fb8:	11000d0e 	bge	r2,r4,8ff0 <_mprec_log10+0x4c>
    8fbc:	0005883a 	mov	r2,zero
    8fc0:	00cffc34 	movhi	r3,16368
    8fc4:	843fffc4 	addi	r16,r16,-1
    8fc8:	000d883a 	mov	r6,zero
    8fcc:	01d00934 	movhi	r7,16420
    8fd0:	1009883a 	mov	r4,r2
    8fd4:	180b883a 	mov	r5,r3
    8fd8:	000d7240 	call	d724 <__muldf3>
    8fdc:	803ff91e 	bne	r16,zero,8fc4 <_mprec_log10+0x20>
    8fe0:	dfc00117 	ldw	ra,4(sp)
    8fe4:	dc000017 	ldw	r16,0(sp)
    8fe8:	dec00204 	addi	sp,sp,8
    8fec:	f800283a 	ret
    8ff0:	202090fa 	slli	r16,r4,3
    8ff4:	00800074 	movhi	r2,1
    8ff8:	10865004 	addi	r2,r2,6464
    8ffc:	1421883a 	add	r16,r2,r16
    9000:	80800017 	ldw	r2,0(r16)
    9004:	80c00117 	ldw	r3,4(r16)
    9008:	dfc00117 	ldw	ra,4(sp)
    900c:	dc000017 	ldw	r16,0(sp)
    9010:	dec00204 	addi	sp,sp,8
    9014:	f800283a 	ret

00009018 <__copybits>:
    9018:	297fffc4 	addi	r5,r5,-1
    901c:	280fd17a 	srai	r7,r5,5
    9020:	30c00417 	ldw	r3,16(r6)
    9024:	30800504 	addi	r2,r6,20
    9028:	39c00044 	addi	r7,r7,1
    902c:	18c7883a 	add	r3,r3,r3
    9030:	39cf883a 	add	r7,r7,r7
    9034:	18c7883a 	add	r3,r3,r3
    9038:	39cf883a 	add	r7,r7,r7
    903c:	10c7883a 	add	r3,r2,r3
    9040:	21cf883a 	add	r7,r4,r7
    9044:	10c00d2e 	bgeu	r2,r3,907c <__copybits+0x64>
    9048:	200b883a 	mov	r5,r4
    904c:	12000017 	ldw	r8,0(r2)
    9050:	29400104 	addi	r5,r5,4
    9054:	10800104 	addi	r2,r2,4
    9058:	2a3fff15 	stw	r8,-4(r5)
    905c:	10fffb36 	bltu	r2,r3,904c <__copybits+0x34>
    9060:	1985c83a 	sub	r2,r3,r6
    9064:	10bffac4 	addi	r2,r2,-21
    9068:	1004d0ba 	srli	r2,r2,2
    906c:	10800044 	addi	r2,r2,1
    9070:	1085883a 	add	r2,r2,r2
    9074:	1085883a 	add	r2,r2,r2
    9078:	2089883a 	add	r4,r4,r2
    907c:	21c0032e 	bgeu	r4,r7,908c <__copybits+0x74>
    9080:	20000015 	stw	zero,0(r4)
    9084:	21000104 	addi	r4,r4,4
    9088:	21fffd36 	bltu	r4,r7,9080 <__copybits+0x68>
    908c:	f800283a 	ret

00009090 <__any_on>:
    9090:	20c00417 	ldw	r3,16(r4)
    9094:	2805d17a 	srai	r2,r5,5
    9098:	21000504 	addi	r4,r4,20
    909c:	18800d0e 	bge	r3,r2,90d4 <__any_on+0x44>
    90a0:	18c7883a 	add	r3,r3,r3
    90a4:	18c7883a 	add	r3,r3,r3
    90a8:	20c7883a 	add	r3,r4,r3
    90ac:	20c0192e 	bgeu	r4,r3,9114 <__any_on+0x84>
    90b0:	18bfff17 	ldw	r2,-4(r3)
    90b4:	18ffff04 	addi	r3,r3,-4
    90b8:	1000041e 	bne	r2,zero,90cc <__any_on+0x3c>
    90bc:	20c0142e 	bgeu	r4,r3,9110 <__any_on+0x80>
    90c0:	18ffff04 	addi	r3,r3,-4
    90c4:	19400017 	ldw	r5,0(r3)
    90c8:	283ffc26 	beq	r5,zero,90bc <__any_on+0x2c>
    90cc:	00800044 	movi	r2,1
    90d0:	f800283a 	ret
    90d4:	10c00a0e 	bge	r2,r3,9100 <__any_on+0x70>
    90d8:	1085883a 	add	r2,r2,r2
    90dc:	1085883a 	add	r2,r2,r2
    90e0:	294007cc 	andi	r5,r5,31
    90e4:	2087883a 	add	r3,r4,r2
    90e8:	283ff026 	beq	r5,zero,90ac <__any_on+0x1c>
    90ec:	19800017 	ldw	r6,0(r3)
    90f0:	3144d83a 	srl	r2,r6,r5
    90f4:	114a983a 	sll	r5,r2,r5
    90f8:	317ff41e 	bne	r6,r5,90cc <__any_on+0x3c>
    90fc:	003feb06 	br	90ac <__any_on+0x1c>
    9100:	1085883a 	add	r2,r2,r2
    9104:	1085883a 	add	r2,r2,r2
    9108:	2087883a 	add	r3,r4,r2
    910c:	003fe706 	br	90ac <__any_on+0x1c>
    9110:	f800283a 	ret
    9114:	0005883a 	mov	r2,zero
    9118:	f800283a 	ret

0000911c <_realloc_r>:
    911c:	defff604 	addi	sp,sp,-40
    9120:	dc800215 	stw	r18,8(sp)
    9124:	dfc00915 	stw	ra,36(sp)
    9128:	df000815 	stw	fp,32(sp)
    912c:	ddc00715 	stw	r23,28(sp)
    9130:	dd800615 	stw	r22,24(sp)
    9134:	dd400515 	stw	r21,20(sp)
    9138:	dd000415 	stw	r20,16(sp)
    913c:	dcc00315 	stw	r19,12(sp)
    9140:	dc400115 	stw	r17,4(sp)
    9144:	dc000015 	stw	r16,0(sp)
    9148:	3025883a 	mov	r18,r6
    914c:	2800b726 	beq	r5,zero,942c <_realloc_r+0x310>
    9150:	282b883a 	mov	r21,r5
    9154:	2029883a 	mov	r20,r4
    9158:	000ef1c0 	call	ef1c <__malloc_lock>
    915c:	a8bfff17 	ldw	r2,-4(r21)
    9160:	043fff04 	movi	r16,-4
    9164:	90c002c4 	addi	r3,r18,11
    9168:	01000584 	movi	r4,22
    916c:	acfffe04 	addi	r19,r21,-8
    9170:	1420703a 	and	r16,r2,r16
    9174:	20c0332e 	bgeu	r4,r3,9244 <_realloc_r+0x128>
    9178:	047ffe04 	movi	r17,-8
    917c:	1c62703a 	and	r17,r3,r17
    9180:	8807883a 	mov	r3,r17
    9184:	88005816 	blt	r17,zero,92e8 <_realloc_r+0x1cc>
    9188:	8c805736 	bltu	r17,r18,92e8 <_realloc_r+0x1cc>
    918c:	80c0300e 	bge	r16,r3,9250 <_realloc_r+0x134>
    9190:	07000074 	movhi	fp,1
    9194:	e706d504 	addi	fp,fp,6996
    9198:	e1c00217 	ldw	r7,8(fp)
    919c:	9c09883a 	add	r4,r19,r16
    91a0:	22000117 	ldw	r8,4(r4)
    91a4:	21c06326 	beq	r4,r7,9334 <_realloc_r+0x218>
    91a8:	017fff84 	movi	r5,-2
    91ac:	414a703a 	and	r5,r8,r5
    91b0:	214b883a 	add	r5,r4,r5
    91b4:	29800117 	ldw	r6,4(r5)
    91b8:	3180004c 	andi	r6,r6,1
    91bc:	30003f26 	beq	r6,zero,92bc <_realloc_r+0x1a0>
    91c0:	1080004c 	andi	r2,r2,1
    91c4:	10008326 	beq	r2,zero,93d4 <_realloc_r+0x2b8>
    91c8:	900b883a 	mov	r5,r18
    91cc:	a009883a 	mov	r4,r20
    91d0:	00022340 	call	2234 <_malloc_r>
    91d4:	1025883a 	mov	r18,r2
    91d8:	10011e26 	beq	r2,zero,9654 <_realloc_r+0x538>
    91dc:	a93fff17 	ldw	r4,-4(r21)
    91e0:	10fffe04 	addi	r3,r2,-8
    91e4:	00bfff84 	movi	r2,-2
    91e8:	2084703a 	and	r2,r4,r2
    91ec:	9885883a 	add	r2,r19,r2
    91f0:	1880ee26 	beq	r3,r2,95ac <_realloc_r+0x490>
    91f4:	81bfff04 	addi	r6,r16,-4
    91f8:	00800904 	movi	r2,36
    91fc:	1180b836 	bltu	r2,r6,94e0 <_realloc_r+0x3c4>
    9200:	00c004c4 	movi	r3,19
    9204:	19809636 	bltu	r3,r6,9460 <_realloc_r+0x344>
    9208:	9005883a 	mov	r2,r18
    920c:	a807883a 	mov	r3,r21
    9210:	19000017 	ldw	r4,0(r3)
    9214:	11000015 	stw	r4,0(r2)
    9218:	19000117 	ldw	r4,4(r3)
    921c:	11000115 	stw	r4,4(r2)
    9220:	18c00217 	ldw	r3,8(r3)
    9224:	10c00215 	stw	r3,8(r2)
    9228:	a80b883a 	mov	r5,r21
    922c:	a009883a 	mov	r4,r20
    9230:	00070840 	call	7084 <_free_r>
    9234:	a009883a 	mov	r4,r20
    9238:	000ef400 	call	ef40 <__malloc_unlock>
    923c:	9005883a 	mov	r2,r18
    9240:	00001206 	br	928c <_realloc_r+0x170>
    9244:	00c00404 	movi	r3,16
    9248:	1823883a 	mov	r17,r3
    924c:	003fce06 	br	9188 <_realloc_r+0x6c>
    9250:	a825883a 	mov	r18,r21
    9254:	8445c83a 	sub	r2,r16,r17
    9258:	00c003c4 	movi	r3,15
    925c:	18802636 	bltu	r3,r2,92f8 <_realloc_r+0x1dc>
    9260:	99800117 	ldw	r6,4(r19)
    9264:	9c07883a 	add	r3,r19,r16
    9268:	3180004c 	andi	r6,r6,1
    926c:	3420b03a 	or	r16,r6,r16
    9270:	9c000115 	stw	r16,4(r19)
    9274:	18800117 	ldw	r2,4(r3)
    9278:	10800054 	ori	r2,r2,1
    927c:	18800115 	stw	r2,4(r3)
    9280:	a009883a 	mov	r4,r20
    9284:	000ef400 	call	ef40 <__malloc_unlock>
    9288:	9005883a 	mov	r2,r18
    928c:	dfc00917 	ldw	ra,36(sp)
    9290:	df000817 	ldw	fp,32(sp)
    9294:	ddc00717 	ldw	r23,28(sp)
    9298:	dd800617 	ldw	r22,24(sp)
    929c:	dd400517 	ldw	r21,20(sp)
    92a0:	dd000417 	ldw	r20,16(sp)
    92a4:	dcc00317 	ldw	r19,12(sp)
    92a8:	dc800217 	ldw	r18,8(sp)
    92ac:	dc400117 	ldw	r17,4(sp)
    92b0:	dc000017 	ldw	r16,0(sp)
    92b4:	dec00a04 	addi	sp,sp,40
    92b8:	f800283a 	ret
    92bc:	017fff04 	movi	r5,-4
    92c0:	414a703a 	and	r5,r8,r5
    92c4:	814d883a 	add	r6,r16,r5
    92c8:	30c01f16 	blt	r6,r3,9348 <_realloc_r+0x22c>
    92cc:	20800317 	ldw	r2,12(r4)
    92d0:	20c00217 	ldw	r3,8(r4)
    92d4:	a825883a 	mov	r18,r21
    92d8:	3021883a 	mov	r16,r6
    92dc:	18800315 	stw	r2,12(r3)
    92e0:	10c00215 	stw	r3,8(r2)
    92e4:	003fdb06 	br	9254 <_realloc_r+0x138>
    92e8:	00800304 	movi	r2,12
    92ec:	a0800015 	stw	r2,0(r20)
    92f0:	0005883a 	mov	r2,zero
    92f4:	003fe506 	br	928c <_realloc_r+0x170>
    92f8:	98c00117 	ldw	r3,4(r19)
    92fc:	9c4b883a 	add	r5,r19,r17
    9300:	11000054 	ori	r4,r2,1
    9304:	18c0004c 	andi	r3,r3,1
    9308:	1c62b03a 	or	r17,r3,r17
    930c:	9c400115 	stw	r17,4(r19)
    9310:	29000115 	stw	r4,4(r5)
    9314:	2885883a 	add	r2,r5,r2
    9318:	10c00117 	ldw	r3,4(r2)
    931c:	29400204 	addi	r5,r5,8
    9320:	a009883a 	mov	r4,r20
    9324:	18c00054 	ori	r3,r3,1
    9328:	10c00115 	stw	r3,4(r2)
    932c:	00070840 	call	7084 <_free_r>
    9330:	003fd306 	br	9280 <_realloc_r+0x164>
    9334:	017fff04 	movi	r5,-4
    9338:	414a703a 	and	r5,r8,r5
    933c:	89800404 	addi	r6,r17,16
    9340:	8151883a 	add	r8,r16,r5
    9344:	4180590e 	bge	r8,r6,94ac <_realloc_r+0x390>
    9348:	1080004c 	andi	r2,r2,1
    934c:	103f9e1e 	bne	r2,zero,91c8 <_realloc_r+0xac>
    9350:	adbffe17 	ldw	r22,-8(r21)
    9354:	00bfff04 	movi	r2,-4
    9358:	9dadc83a 	sub	r22,r19,r22
    935c:	b1800117 	ldw	r6,4(r22)
    9360:	3084703a 	and	r2,r6,r2
    9364:	20002026 	beq	r4,zero,93e8 <_realloc_r+0x2cc>
    9368:	80af883a 	add	r23,r16,r2
    936c:	b96f883a 	add	r23,r23,r5
    9370:	21c05f26 	beq	r4,r7,94f0 <_realloc_r+0x3d4>
    9374:	b8c01c16 	blt	r23,r3,93e8 <_realloc_r+0x2cc>
    9378:	20800317 	ldw	r2,12(r4)
    937c:	20c00217 	ldw	r3,8(r4)
    9380:	81bfff04 	addi	r6,r16,-4
    9384:	01000904 	movi	r4,36
    9388:	18800315 	stw	r2,12(r3)
    938c:	10c00215 	stw	r3,8(r2)
    9390:	b0c00217 	ldw	r3,8(r22)
    9394:	b0800317 	ldw	r2,12(r22)
    9398:	b4800204 	addi	r18,r22,8
    939c:	18800315 	stw	r2,12(r3)
    93a0:	10c00215 	stw	r3,8(r2)
    93a4:	21801b36 	bltu	r4,r6,9414 <_realloc_r+0x2f8>
    93a8:	008004c4 	movi	r2,19
    93ac:	1180352e 	bgeu	r2,r6,9484 <_realloc_r+0x368>
    93b0:	a8800017 	ldw	r2,0(r21)
    93b4:	b0800215 	stw	r2,8(r22)
    93b8:	a8800117 	ldw	r2,4(r21)
    93bc:	b0800315 	stw	r2,12(r22)
    93c0:	008006c4 	movi	r2,27
    93c4:	11807f36 	bltu	r2,r6,95c4 <_realloc_r+0x4a8>
    93c8:	b0800404 	addi	r2,r22,16
    93cc:	ad400204 	addi	r21,r21,8
    93d0:	00002d06 	br	9488 <_realloc_r+0x36c>
    93d4:	adbffe17 	ldw	r22,-8(r21)
    93d8:	00bfff04 	movi	r2,-4
    93dc:	9dadc83a 	sub	r22,r19,r22
    93e0:	b1000117 	ldw	r4,4(r22)
    93e4:	2084703a 	and	r2,r4,r2
    93e8:	b03f7726 	beq	r22,zero,91c8 <_realloc_r+0xac>
    93ec:	80af883a 	add	r23,r16,r2
    93f0:	b8ff7516 	blt	r23,r3,91c8 <_realloc_r+0xac>
    93f4:	b0800317 	ldw	r2,12(r22)
    93f8:	b0c00217 	ldw	r3,8(r22)
    93fc:	81bfff04 	addi	r6,r16,-4
    9400:	01000904 	movi	r4,36
    9404:	18800315 	stw	r2,12(r3)
    9408:	10c00215 	stw	r3,8(r2)
    940c:	b4800204 	addi	r18,r22,8
    9410:	21bfe52e 	bgeu	r4,r6,93a8 <_realloc_r+0x28c>
    9414:	a80b883a 	mov	r5,r21
    9418:	9009883a 	mov	r4,r18
    941c:	0007e9c0 	call	7e9c <memmove>
    9420:	b821883a 	mov	r16,r23
    9424:	b027883a 	mov	r19,r22
    9428:	003f8a06 	br	9254 <_realloc_r+0x138>
    942c:	300b883a 	mov	r5,r6
    9430:	dfc00917 	ldw	ra,36(sp)
    9434:	df000817 	ldw	fp,32(sp)
    9438:	ddc00717 	ldw	r23,28(sp)
    943c:	dd800617 	ldw	r22,24(sp)
    9440:	dd400517 	ldw	r21,20(sp)
    9444:	dd000417 	ldw	r20,16(sp)
    9448:	dcc00317 	ldw	r19,12(sp)
    944c:	dc800217 	ldw	r18,8(sp)
    9450:	dc400117 	ldw	r17,4(sp)
    9454:	dc000017 	ldw	r16,0(sp)
    9458:	dec00a04 	addi	sp,sp,40
    945c:	00022341 	jmpi	2234 <_malloc_r>
    9460:	a8c00017 	ldw	r3,0(r21)
    9464:	90c00015 	stw	r3,0(r18)
    9468:	a8c00117 	ldw	r3,4(r21)
    946c:	90c00115 	stw	r3,4(r18)
    9470:	00c006c4 	movi	r3,27
    9474:	19804536 	bltu	r3,r6,958c <_realloc_r+0x470>
    9478:	90800204 	addi	r2,r18,8
    947c:	a8c00204 	addi	r3,r21,8
    9480:	003f6306 	br	9210 <_realloc_r+0xf4>
    9484:	9005883a 	mov	r2,r18
    9488:	a8c00017 	ldw	r3,0(r21)
    948c:	b821883a 	mov	r16,r23
    9490:	b027883a 	mov	r19,r22
    9494:	10c00015 	stw	r3,0(r2)
    9498:	a8c00117 	ldw	r3,4(r21)
    949c:	10c00115 	stw	r3,4(r2)
    94a0:	a8c00217 	ldw	r3,8(r21)
    94a4:	10c00215 	stw	r3,8(r2)
    94a8:	003f6a06 	br	9254 <_realloc_r+0x138>
    94ac:	9c67883a 	add	r19,r19,r17
    94b0:	4445c83a 	sub	r2,r8,r17
    94b4:	e4c00215 	stw	r19,8(fp)
    94b8:	10800054 	ori	r2,r2,1
    94bc:	98800115 	stw	r2,4(r19)
    94c0:	a8bfff17 	ldw	r2,-4(r21)
    94c4:	a009883a 	mov	r4,r20
    94c8:	1080004c 	andi	r2,r2,1
    94cc:	1462b03a 	or	r17,r2,r17
    94d0:	ac7fff15 	stw	r17,-4(r21)
    94d4:	000ef400 	call	ef40 <__malloc_unlock>
    94d8:	a805883a 	mov	r2,r21
    94dc:	003f6b06 	br	928c <_realloc_r+0x170>
    94e0:	a80b883a 	mov	r5,r21
    94e4:	9009883a 	mov	r4,r18
    94e8:	0007e9c0 	call	7e9c <memmove>
    94ec:	003f4e06 	br	9228 <_realloc_r+0x10c>
    94f0:	89000404 	addi	r4,r17,16
    94f4:	b93fbc16 	blt	r23,r4,93e8 <_realloc_r+0x2cc>
    94f8:	b0800317 	ldw	r2,12(r22)
    94fc:	b0c00217 	ldw	r3,8(r22)
    9500:	81bfff04 	addi	r6,r16,-4
    9504:	01000904 	movi	r4,36
    9508:	18800315 	stw	r2,12(r3)
    950c:	10c00215 	stw	r3,8(r2)
    9510:	b4800204 	addi	r18,r22,8
    9514:	21804336 	bltu	r4,r6,9624 <_realloc_r+0x508>
    9518:	008004c4 	movi	r2,19
    951c:	11803f2e 	bgeu	r2,r6,961c <_realloc_r+0x500>
    9520:	a8800017 	ldw	r2,0(r21)
    9524:	b0800215 	stw	r2,8(r22)
    9528:	a8800117 	ldw	r2,4(r21)
    952c:	b0800315 	stw	r2,12(r22)
    9530:	008006c4 	movi	r2,27
    9534:	11803f36 	bltu	r2,r6,9634 <_realloc_r+0x518>
    9538:	b0800404 	addi	r2,r22,16
    953c:	ad400204 	addi	r21,r21,8
    9540:	a8c00017 	ldw	r3,0(r21)
    9544:	10c00015 	stw	r3,0(r2)
    9548:	a8c00117 	ldw	r3,4(r21)
    954c:	10c00115 	stw	r3,4(r2)
    9550:	a8c00217 	ldw	r3,8(r21)
    9554:	10c00215 	stw	r3,8(r2)
    9558:	b447883a 	add	r3,r22,r17
    955c:	bc45c83a 	sub	r2,r23,r17
    9560:	e0c00215 	stw	r3,8(fp)
    9564:	10800054 	ori	r2,r2,1
    9568:	18800115 	stw	r2,4(r3)
    956c:	b0800117 	ldw	r2,4(r22)
    9570:	a009883a 	mov	r4,r20
    9574:	1080004c 	andi	r2,r2,1
    9578:	1462b03a 	or	r17,r2,r17
    957c:	b4400115 	stw	r17,4(r22)
    9580:	000ef400 	call	ef40 <__malloc_unlock>
    9584:	9005883a 	mov	r2,r18
    9588:	003f4006 	br	928c <_realloc_r+0x170>
    958c:	a8c00217 	ldw	r3,8(r21)
    9590:	90c00215 	stw	r3,8(r18)
    9594:	a8c00317 	ldw	r3,12(r21)
    9598:	90c00315 	stw	r3,12(r18)
    959c:	30801126 	beq	r6,r2,95e4 <_realloc_r+0x4c8>
    95a0:	90800404 	addi	r2,r18,16
    95a4:	a8c00404 	addi	r3,r21,16
    95a8:	003f1906 	br	9210 <_realloc_r+0xf4>
    95ac:	90ffff17 	ldw	r3,-4(r18)
    95b0:	00bfff04 	movi	r2,-4
    95b4:	a825883a 	mov	r18,r21
    95b8:	1884703a 	and	r2,r3,r2
    95bc:	80a1883a 	add	r16,r16,r2
    95c0:	003f2406 	br	9254 <_realloc_r+0x138>
    95c4:	a8800217 	ldw	r2,8(r21)
    95c8:	b0800415 	stw	r2,16(r22)
    95cc:	a8800317 	ldw	r2,12(r21)
    95d0:	b0800515 	stw	r2,20(r22)
    95d4:	31000a26 	beq	r6,r4,9600 <_realloc_r+0x4e4>
    95d8:	b0800604 	addi	r2,r22,24
    95dc:	ad400404 	addi	r21,r21,16
    95e0:	003fa906 	br	9488 <_realloc_r+0x36c>
    95e4:	a9000417 	ldw	r4,16(r21)
    95e8:	90800604 	addi	r2,r18,24
    95ec:	a8c00604 	addi	r3,r21,24
    95f0:	91000415 	stw	r4,16(r18)
    95f4:	a9000517 	ldw	r4,20(r21)
    95f8:	91000515 	stw	r4,20(r18)
    95fc:	003f0406 	br	9210 <_realloc_r+0xf4>
    9600:	a8c00417 	ldw	r3,16(r21)
    9604:	ad400604 	addi	r21,r21,24
    9608:	b0800804 	addi	r2,r22,32
    960c:	b0c00615 	stw	r3,24(r22)
    9610:	a8ffff17 	ldw	r3,-4(r21)
    9614:	b0c00715 	stw	r3,28(r22)
    9618:	003f9b06 	br	9488 <_realloc_r+0x36c>
    961c:	9005883a 	mov	r2,r18
    9620:	003fc706 	br	9540 <_realloc_r+0x424>
    9624:	a80b883a 	mov	r5,r21
    9628:	9009883a 	mov	r4,r18
    962c:	0007e9c0 	call	7e9c <memmove>
    9630:	003fc906 	br	9558 <_realloc_r+0x43c>
    9634:	a8800217 	ldw	r2,8(r21)
    9638:	b0800415 	stw	r2,16(r22)
    963c:	a8800317 	ldw	r2,12(r21)
    9640:	b0800515 	stw	r2,20(r22)
    9644:	31000726 	beq	r6,r4,9664 <_realloc_r+0x548>
    9648:	b0800604 	addi	r2,r22,24
    964c:	ad400404 	addi	r21,r21,16
    9650:	003fbb06 	br	9540 <_realloc_r+0x424>
    9654:	a009883a 	mov	r4,r20
    9658:	000ef400 	call	ef40 <__malloc_unlock>
    965c:	0005883a 	mov	r2,zero
    9660:	003f0a06 	br	928c <_realloc_r+0x170>
    9664:	a8c00417 	ldw	r3,16(r21)
    9668:	ad400604 	addi	r21,r21,24
    966c:	b0800804 	addi	r2,r22,32
    9670:	b0c00615 	stw	r3,24(r22)
    9674:	a8ffff17 	ldw	r3,-4(r21)
    9678:	b0c00715 	stw	r3,28(r22)
    967c:	003fb006 	br	9540 <_realloc_r+0x424>

00009680 <__fpclassifyd>:
    9680:	00a00034 	movhi	r2,32768
    9684:	10bfffc4 	addi	r2,r2,-1
    9688:	2884703a 	and	r2,r5,r2
    968c:	10000726 	beq	r2,zero,96ac <__fpclassifyd+0x2c>
    9690:	00fffc34 	movhi	r3,65520
    9694:	019ff834 	movhi	r6,32736
    9698:	28c7883a 	add	r3,r5,r3
    969c:	31bfffc4 	addi	r6,r6,-1
    96a0:	30c00536 	bltu	r6,r3,96b8 <__fpclassifyd+0x38>
    96a4:	00800104 	movi	r2,4
    96a8:	f800283a 	ret
    96ac:	2000021e 	bne	r4,zero,96b8 <__fpclassifyd+0x38>
    96b0:	00800084 	movi	r2,2
    96b4:	f800283a 	ret
    96b8:	00dffc34 	movhi	r3,32752
    96bc:	019ff834 	movhi	r6,32736
    96c0:	28cb883a 	add	r5,r5,r3
    96c4:	31bfffc4 	addi	r6,r6,-1
    96c8:	317ff62e 	bgeu	r6,r5,96a4 <__fpclassifyd+0x24>
    96cc:	01400434 	movhi	r5,16
    96d0:	297fffc4 	addi	r5,r5,-1
    96d4:	28800236 	bltu	r5,r2,96e0 <__fpclassifyd+0x60>
    96d8:	008000c4 	movi	r2,3
    96dc:	f800283a 	ret
    96e0:	10c00226 	beq	r2,r3,96ec <__fpclassifyd+0x6c>
    96e4:	0005883a 	mov	r2,zero
    96e8:	f800283a 	ret
    96ec:	2005003a 	cmpeq	r2,r4,zero
    96f0:	f800283a 	ret

000096f4 <__sread>:
    96f4:	defffe04 	addi	sp,sp,-8
    96f8:	dc000015 	stw	r16,0(sp)
    96fc:	2821883a 	mov	r16,r5
    9700:	2940038f 	ldh	r5,14(r5)
    9704:	dfc00115 	stw	ra,4(sp)
    9708:	000b4e80 	call	b4e8 <_read_r>
    970c:	10000716 	blt	r2,zero,972c <__sread+0x38>
    9710:	80c01417 	ldw	r3,80(r16)
    9714:	1887883a 	add	r3,r3,r2
    9718:	80c01415 	stw	r3,80(r16)
    971c:	dfc00117 	ldw	ra,4(sp)
    9720:	dc000017 	ldw	r16,0(sp)
    9724:	dec00204 	addi	sp,sp,8
    9728:	f800283a 	ret
    972c:	80c0030b 	ldhu	r3,12(r16)
    9730:	18fbffcc 	andi	r3,r3,61439
    9734:	80c0030d 	sth	r3,12(r16)
    9738:	dfc00117 	ldw	ra,4(sp)
    973c:	dc000017 	ldw	r16,0(sp)
    9740:	dec00204 	addi	sp,sp,8
    9744:	f800283a 	ret

00009748 <__seofread>:
    9748:	0005883a 	mov	r2,zero
    974c:	f800283a 	ret

00009750 <__swrite>:
    9750:	2880030b 	ldhu	r2,12(r5)
    9754:	defffb04 	addi	sp,sp,-20
    9758:	dcc00315 	stw	r19,12(sp)
    975c:	dc800215 	stw	r18,8(sp)
    9760:	dc400115 	stw	r17,4(sp)
    9764:	dc000015 	stw	r16,0(sp)
    9768:	dfc00415 	stw	ra,16(sp)
    976c:	10c0400c 	andi	r3,r2,256
    9770:	2821883a 	mov	r16,r5
    9774:	2023883a 	mov	r17,r4
    9778:	3025883a 	mov	r18,r6
    977c:	3827883a 	mov	r19,r7
    9780:	18000526 	beq	r3,zero,9798 <__swrite+0x48>
    9784:	2940038f 	ldh	r5,14(r5)
    9788:	01c00084 	movi	r7,2
    978c:	000d883a 	mov	r6,zero
    9790:	000b4880 	call	b488 <_lseek_r>
    9794:	8080030b 	ldhu	r2,12(r16)
    9798:	8140038f 	ldh	r5,14(r16)
    979c:	10bbffcc 	andi	r2,r2,61439
    97a0:	980f883a 	mov	r7,r19
    97a4:	900d883a 	mov	r6,r18
    97a8:	8809883a 	mov	r4,r17
    97ac:	8080030d 	sth	r2,12(r16)
    97b0:	dfc00417 	ldw	ra,16(sp)
    97b4:	dcc00317 	ldw	r19,12(sp)
    97b8:	dc800217 	ldw	r18,8(sp)
    97bc:	dc400117 	ldw	r17,4(sp)
    97c0:	dc000017 	ldw	r16,0(sp)
    97c4:	dec00504 	addi	sp,sp,20
    97c8:	000af541 	jmpi	af54 <_write_r>

000097cc <__sseek>:
    97cc:	defffe04 	addi	sp,sp,-8
    97d0:	dc000015 	stw	r16,0(sp)
    97d4:	2821883a 	mov	r16,r5
    97d8:	2940038f 	ldh	r5,14(r5)
    97dc:	dfc00115 	stw	ra,4(sp)
    97e0:	000b4880 	call	b488 <_lseek_r>
    97e4:	00ffffc4 	movi	r3,-1
    97e8:	10c00826 	beq	r2,r3,980c <__sseek+0x40>
    97ec:	80c0030b 	ldhu	r3,12(r16)
    97f0:	80801415 	stw	r2,80(r16)
    97f4:	18c40014 	ori	r3,r3,4096
    97f8:	80c0030d 	sth	r3,12(r16)
    97fc:	dfc00117 	ldw	ra,4(sp)
    9800:	dc000017 	ldw	r16,0(sp)
    9804:	dec00204 	addi	sp,sp,8
    9808:	f800283a 	ret
    980c:	80c0030b 	ldhu	r3,12(r16)
    9810:	18fbffcc 	andi	r3,r3,61439
    9814:	80c0030d 	sth	r3,12(r16)
    9818:	dfc00117 	ldw	ra,4(sp)
    981c:	dc000017 	ldw	r16,0(sp)
    9820:	dec00204 	addi	sp,sp,8
    9824:	f800283a 	ret

00009828 <__sclose>:
    9828:	2940038f 	ldh	r5,14(r5)
    982c:	000afb41 	jmpi	afb4 <_close_r>

00009830 <strcmp>:
    9830:	2144b03a 	or	r2,r4,r5
    9834:	108000cc 	andi	r2,r2,3
    9838:	1000171e 	bne	r2,zero,9898 <strcmp+0x68>
    983c:	20800017 	ldw	r2,0(r4)
    9840:	28c00017 	ldw	r3,0(r5)
    9844:	10c0141e 	bne	r2,r3,9898 <strcmp+0x68>
    9848:	027fbff4 	movhi	r9,65279
    984c:	4a7fbfc4 	addi	r9,r9,-257
    9850:	0086303a 	nor	r3,zero,r2
    9854:	02202074 	movhi	r8,32897
    9858:	1245883a 	add	r2,r2,r9
    985c:	42202004 	addi	r8,r8,-32640
    9860:	10c4703a 	and	r2,r2,r3
    9864:	1204703a 	and	r2,r2,r8
    9868:	10000226 	beq	r2,zero,9874 <strcmp+0x44>
    986c:	00002306 	br	98fc <strcmp+0xcc>
    9870:	1000221e 	bne	r2,zero,98fc <strcmp+0xcc>
    9874:	21000104 	addi	r4,r4,4
    9878:	20c00017 	ldw	r3,0(r4)
    987c:	29400104 	addi	r5,r5,4
    9880:	29800017 	ldw	r6,0(r5)
    9884:	1a4f883a 	add	r7,r3,r9
    9888:	00c4303a 	nor	r2,zero,r3
    988c:	3884703a 	and	r2,r7,r2
    9890:	1204703a 	and	r2,r2,r8
    9894:	19bff626 	beq	r3,r6,9870 <strcmp+0x40>
    9898:	20800003 	ldbu	r2,0(r4)
    989c:	10c03fcc 	andi	r3,r2,255
    98a0:	18c0201c 	xori	r3,r3,128
    98a4:	18ffe004 	addi	r3,r3,-128
    98a8:	18000c26 	beq	r3,zero,98dc <strcmp+0xac>
    98ac:	29800007 	ldb	r6,0(r5)
    98b0:	19800326 	beq	r3,r6,98c0 <strcmp+0x90>
    98b4:	00001306 	br	9904 <strcmp+0xd4>
    98b8:	29800007 	ldb	r6,0(r5)
    98bc:	11800b1e 	bne	r2,r6,98ec <strcmp+0xbc>
    98c0:	21000044 	addi	r4,r4,1
    98c4:	20c00003 	ldbu	r3,0(r4)
    98c8:	29400044 	addi	r5,r5,1
    98cc:	18803fcc 	andi	r2,r3,255
    98d0:	1080201c 	xori	r2,r2,128
    98d4:	10bfe004 	addi	r2,r2,-128
    98d8:	103ff71e 	bne	r2,zero,98b8 <strcmp+0x88>
    98dc:	0007883a 	mov	r3,zero
    98e0:	28800003 	ldbu	r2,0(r5)
    98e4:	1885c83a 	sub	r2,r3,r2
    98e8:	f800283a 	ret
    98ec:	28800003 	ldbu	r2,0(r5)
    98f0:	18c03fcc 	andi	r3,r3,255
    98f4:	1885c83a 	sub	r2,r3,r2
    98f8:	f800283a 	ret
    98fc:	0005883a 	mov	r2,zero
    9900:	f800283a 	ret
    9904:	10c03fcc 	andi	r3,r2,255
    9908:	003ff506 	br	98e0 <strcmp+0xb0>

0000990c <__sprint_r.part.0>:
    990c:	28801917 	ldw	r2,100(r5)
    9910:	defff604 	addi	sp,sp,-40
    9914:	dd400515 	stw	r21,20(sp)
    9918:	dfc00915 	stw	ra,36(sp)
    991c:	df000815 	stw	fp,32(sp)
    9920:	ddc00715 	stw	r23,28(sp)
    9924:	dd800615 	stw	r22,24(sp)
    9928:	dd000415 	stw	r20,16(sp)
    992c:	dcc00315 	stw	r19,12(sp)
    9930:	dc800215 	stw	r18,8(sp)
    9934:	dc400115 	stw	r17,4(sp)
    9938:	dc000015 	stw	r16,0(sp)
    993c:	1088000c 	andi	r2,r2,8192
    9940:	302b883a 	mov	r21,r6
    9944:	10002e26 	beq	r2,zero,9a00 <__sprint_r.part.0+0xf4>
    9948:	30800217 	ldw	r2,8(r6)
    994c:	35800017 	ldw	r22,0(r6)
    9950:	10002926 	beq	r2,zero,99f8 <__sprint_r.part.0+0xec>
    9954:	2827883a 	mov	r19,r5
    9958:	2029883a 	mov	r20,r4
    995c:	b5c00104 	addi	r23,r22,4
    9960:	04bfffc4 	movi	r18,-1
    9964:	bc400017 	ldw	r17,0(r23)
    9968:	b4000017 	ldw	r16,0(r22)
    996c:	0039883a 	mov	fp,zero
    9970:	8822d0ba 	srli	r17,r17,2
    9974:	8800031e 	bne	r17,zero,9984 <__sprint_r.part.0+0x78>
    9978:	00001806 	br	99dc <__sprint_r.part.0+0xd0>
    997c:	84000104 	addi	r16,r16,4
    9980:	8f001526 	beq	r17,fp,99d8 <__sprint_r.part.0+0xcc>
    9984:	81400017 	ldw	r5,0(r16)
    9988:	980d883a 	mov	r6,r19
    998c:	a009883a 	mov	r4,r20
    9990:	000b3340 	call	b334 <_fputwc_r>
    9994:	e7000044 	addi	fp,fp,1
    9998:	14bff81e 	bne	r2,r18,997c <__sprint_r.part.0+0x70>
    999c:	9005883a 	mov	r2,r18
    99a0:	a8000215 	stw	zero,8(r21)
    99a4:	a8000115 	stw	zero,4(r21)
    99a8:	dfc00917 	ldw	ra,36(sp)
    99ac:	df000817 	ldw	fp,32(sp)
    99b0:	ddc00717 	ldw	r23,28(sp)
    99b4:	dd800617 	ldw	r22,24(sp)
    99b8:	dd400517 	ldw	r21,20(sp)
    99bc:	dd000417 	ldw	r20,16(sp)
    99c0:	dcc00317 	ldw	r19,12(sp)
    99c4:	dc800217 	ldw	r18,8(sp)
    99c8:	dc400117 	ldw	r17,4(sp)
    99cc:	dc000017 	ldw	r16,0(sp)
    99d0:	dec00a04 	addi	sp,sp,40
    99d4:	f800283a 	ret
    99d8:	a8800217 	ldw	r2,8(r21)
    99dc:	8c63883a 	add	r17,r17,r17
    99e0:	8c63883a 	add	r17,r17,r17
    99e4:	1445c83a 	sub	r2,r2,r17
    99e8:	a8800215 	stw	r2,8(r21)
    99ec:	b5800204 	addi	r22,r22,8
    99f0:	bdc00204 	addi	r23,r23,8
    99f4:	103fdb1e 	bne	r2,zero,9964 <__sprint_r.part.0+0x58>
    99f8:	0005883a 	mov	r2,zero
    99fc:	003fe806 	br	99a0 <__sprint_r.part.0+0x94>
    9a00:	00073940 	call	7394 <__sfvwrite_r>
    9a04:	003fe606 	br	99a0 <__sprint_r.part.0+0x94>

00009a08 <__sprint_r>:
    9a08:	30c00217 	ldw	r3,8(r6)
    9a0c:	18000126 	beq	r3,zero,9a14 <__sprint_r+0xc>
    9a10:	000990c1 	jmpi	990c <__sprint_r.part.0>
    9a14:	30000115 	stw	zero,4(r6)
    9a18:	0005883a 	mov	r2,zero
    9a1c:	f800283a 	ret

00009a20 <___vfiprintf_internal_r>:
    9a20:	deffc904 	addi	sp,sp,-220
    9a24:	df003515 	stw	fp,212(sp)
    9a28:	dd003115 	stw	r20,196(sp)
    9a2c:	dfc03615 	stw	ra,216(sp)
    9a30:	ddc03415 	stw	r23,208(sp)
    9a34:	dd803315 	stw	r22,204(sp)
    9a38:	dd403215 	stw	r21,200(sp)
    9a3c:	dcc03015 	stw	r19,192(sp)
    9a40:	dc802f15 	stw	r18,188(sp)
    9a44:	dc402e15 	stw	r17,184(sp)
    9a48:	dc002d15 	stw	r16,180(sp)
    9a4c:	d9002015 	stw	r4,128(sp)
    9a50:	d9c02215 	stw	r7,136(sp)
    9a54:	2829883a 	mov	r20,r5
    9a58:	3039883a 	mov	fp,r6
    9a5c:	20000226 	beq	r4,zero,9a68 <___vfiprintf_internal_r+0x48>
    9a60:	20800e17 	ldw	r2,56(r4)
    9a64:	1000cf26 	beq	r2,zero,9da4 <___vfiprintf_internal_r+0x384>
    9a68:	a080030b 	ldhu	r2,12(r20)
    9a6c:	10c8000c 	andi	r3,r2,8192
    9a70:	1800061e 	bne	r3,zero,9a8c <___vfiprintf_internal_r+0x6c>
    9a74:	a1001917 	ldw	r4,100(r20)
    9a78:	00f7ffc4 	movi	r3,-8193
    9a7c:	10880014 	ori	r2,r2,8192
    9a80:	20c6703a 	and	r3,r4,r3
    9a84:	a080030d 	sth	r2,12(r20)
    9a88:	a0c01915 	stw	r3,100(r20)
    9a8c:	10c0020c 	andi	r3,r2,8
    9a90:	1800a926 	beq	r3,zero,9d38 <___vfiprintf_internal_r+0x318>
    9a94:	a0c00417 	ldw	r3,16(r20)
    9a98:	1800a726 	beq	r3,zero,9d38 <___vfiprintf_internal_r+0x318>
    9a9c:	1080068c 	andi	r2,r2,26
    9aa0:	00c00284 	movi	r3,10
    9aa4:	10c0ac26 	beq	r2,r3,9d58 <___vfiprintf_internal_r+0x338>
    9aa8:	da801a04 	addi	r10,sp,104
    9aac:	da801e15 	stw	r10,120(sp)
    9ab0:	d8801e17 	ldw	r2,120(sp)
    9ab4:	da8019c4 	addi	r10,sp,103
    9ab8:	05800074 	movhi	r22,1
    9abc:	05c00074 	movhi	r23,1
    9ac0:	da801f15 	stw	r10,124(sp)
    9ac4:	1295c83a 	sub	r10,r2,r10
    9ac8:	b5868604 	addi	r22,r22,6680
    9acc:	bdc68204 	addi	r23,r23,6664
    9ad0:	dec01a15 	stw	sp,104(sp)
    9ad4:	d8001c15 	stw	zero,112(sp)
    9ad8:	d8001b15 	stw	zero,108(sp)
    9adc:	d8002615 	stw	zero,152(sp)
    9ae0:	d8002315 	stw	zero,140(sp)
    9ae4:	da802715 	stw	r10,156(sp)
    9ae8:	d811883a 	mov	r8,sp
    9aec:	dd002115 	stw	r20,132(sp)
    9af0:	e021883a 	mov	r16,fp
    9af4:	80800007 	ldb	r2,0(r16)
    9af8:	1003ea26 	beq	r2,zero,aaa4 <___vfiprintf_internal_r+0x1084>
    9afc:	00c00944 	movi	r3,37
    9b00:	8025883a 	mov	r18,r16
    9b04:	10c0021e 	bne	r2,r3,9b10 <___vfiprintf_internal_r+0xf0>
    9b08:	00001606 	br	9b64 <___vfiprintf_internal_r+0x144>
    9b0c:	10c00326 	beq	r2,r3,9b1c <___vfiprintf_internal_r+0xfc>
    9b10:	94800044 	addi	r18,r18,1
    9b14:	90800007 	ldb	r2,0(r18)
    9b18:	103ffc1e 	bne	r2,zero,9b0c <___vfiprintf_internal_r+0xec>
    9b1c:	9423c83a 	sub	r17,r18,r16
    9b20:	88001026 	beq	r17,zero,9b64 <___vfiprintf_internal_r+0x144>
    9b24:	d8c01c17 	ldw	r3,112(sp)
    9b28:	d8801b17 	ldw	r2,108(sp)
    9b2c:	44000015 	stw	r16,0(r8)
    9b30:	88c7883a 	add	r3,r17,r3
    9b34:	10800044 	addi	r2,r2,1
    9b38:	44400115 	stw	r17,4(r8)
    9b3c:	d8c01c15 	stw	r3,112(sp)
    9b40:	d8801b15 	stw	r2,108(sp)
    9b44:	010001c4 	movi	r4,7
    9b48:	2080760e 	bge	r4,r2,9d24 <___vfiprintf_internal_r+0x304>
    9b4c:	1803821e 	bne	r3,zero,a958 <___vfiprintf_internal_r+0xf38>
    9b50:	da802317 	ldw	r10,140(sp)
    9b54:	d8001b15 	stw	zero,108(sp)
    9b58:	d811883a 	mov	r8,sp
    9b5c:	5455883a 	add	r10,r10,r17
    9b60:	da802315 	stw	r10,140(sp)
    9b64:	90800007 	ldb	r2,0(r18)
    9b68:	10044626 	beq	r2,zero,ac84 <___vfiprintf_internal_r+0x1264>
    9b6c:	90c00047 	ldb	r3,1(r18)
    9b70:	94000044 	addi	r16,r18,1
    9b74:	d8001d85 	stb	zero,118(sp)
    9b78:	0009883a 	mov	r4,zero
    9b7c:	000f883a 	mov	r7,zero
    9b80:	027fffc4 	movi	r9,-1
    9b84:	0023883a 	mov	r17,zero
    9b88:	0029883a 	mov	r20,zero
    9b8c:	01401604 	movi	r5,88
    9b90:	01800244 	movi	r6,9
    9b94:	03400a84 	movi	r13,42
    9b98:	03001b04 	movi	r12,108
    9b9c:	84000044 	addi	r16,r16,1
    9ba0:	18bff804 	addi	r2,r3,-32
    9ba4:	28827336 	bltu	r5,r2,a574 <___vfiprintf_internal_r+0xb54>
    9ba8:	100490ba 	slli	r2,r2,2
    9bac:	02800074 	movhi	r10,1
    9bb0:	52a6f004 	addi	r10,r10,-25664
    9bb4:	1285883a 	add	r2,r2,r10
    9bb8:	10800017 	ldw	r2,0(r2)
    9bbc:	1000683a 	jmp	r2
    9bc0:	0000a2a8 	cmpgeui	zero,zero,650
    9bc4:	0000a574 	movhi	zero,661
    9bc8:	0000a574 	movhi	zero,661
    9bcc:	0000a2c8 	cmpgei	zero,zero,651
    9bd0:	0000a574 	movhi	zero,661
    9bd4:	0000a574 	movhi	zero,661
    9bd8:	0000a574 	movhi	zero,661
    9bdc:	0000a574 	movhi	zero,661
    9be0:	0000a574 	movhi	zero,661
    9be4:	0000a574 	movhi	zero,661
    9be8:	0000a4b0 	cmpltui	zero,zero,658
    9bec:	0000a4cc 	andi	zero,zero,659
    9bf0:	0000a574 	movhi	zero,661
    9bf4:	00009db4 	movhi	zero,630
    9bf8:	0000a4dc 	xori	zero,zero,659
    9bfc:	0000a574 	movhi	zero,661
    9c00:	0000a2d4 	movui	zero,651
    9c04:	0000a2e0 	cmpeqi	zero,zero,651
    9c08:	0000a2e0 	cmpeqi	zero,zero,651
    9c0c:	0000a2e0 	cmpeqi	zero,zero,651
    9c10:	0000a2e0 	cmpeqi	zero,zero,651
    9c14:	0000a2e0 	cmpeqi	zero,zero,651
    9c18:	0000a2e0 	cmpeqi	zero,zero,651
    9c1c:	0000a2e0 	cmpeqi	zero,zero,651
    9c20:	0000a2e0 	cmpeqi	zero,zero,651
    9c24:	0000a2e0 	cmpeqi	zero,zero,651
    9c28:	0000a574 	movhi	zero,661
    9c2c:	0000a574 	movhi	zero,661
    9c30:	0000a574 	movhi	zero,661
    9c34:	0000a574 	movhi	zero,661
    9c38:	0000a574 	movhi	zero,661
    9c3c:	0000a574 	movhi	zero,661
    9c40:	0000a574 	movhi	zero,661
    9c44:	0000a574 	movhi	zero,661
    9c48:	0000a574 	movhi	zero,661
    9c4c:	0000a574 	movhi	zero,661
    9c50:	0000a30c 	andi	zero,zero,652
    9c54:	0000a574 	movhi	zero,661
    9c58:	0000a574 	movhi	zero,661
    9c5c:	0000a574 	movhi	zero,661
    9c60:	0000a574 	movhi	zero,661
    9c64:	0000a574 	movhi	zero,661
    9c68:	0000a574 	movhi	zero,661
    9c6c:	0000a574 	movhi	zero,661
    9c70:	0000a574 	movhi	zero,661
    9c74:	0000a574 	movhi	zero,661
    9c78:	0000a574 	movhi	zero,661
    9c7c:	0000a344 	movi	zero,653
    9c80:	0000a574 	movhi	zero,661
    9c84:	0000a574 	movhi	zero,661
    9c88:	0000a574 	movhi	zero,661
    9c8c:	0000a574 	movhi	zero,661
    9c90:	0000a574 	movhi	zero,661
    9c94:	0000a39c 	xori	zero,zero,654
    9c98:	0000a574 	movhi	zero,661
    9c9c:	0000a574 	movhi	zero,661
    9ca0:	0000a40c 	andi	zero,zero,656
    9ca4:	0000a574 	movhi	zero,661
    9ca8:	0000a574 	movhi	zero,661
    9cac:	0000a574 	movhi	zero,661
    9cb0:	0000a574 	movhi	zero,661
    9cb4:	0000a574 	movhi	zero,661
    9cb8:	0000a574 	movhi	zero,661
    9cbc:	0000a574 	movhi	zero,661
    9cc0:	0000a574 	movhi	zero,661
    9cc4:	0000a574 	movhi	zero,661
    9cc8:	0000a574 	movhi	zero,661
    9ccc:	0000a1b8 	rdprs	zero,zero,646
    9cd0:	0000a1e4 	muli	zero,zero,647
    9cd4:	0000a574 	movhi	zero,661
    9cd8:	0000a574 	movhi	zero,661
    9cdc:	0000a574 	movhi	zero,661
    9ce0:	0000a51c 	xori	zero,zero,660
    9ce4:	0000a1e4 	muli	zero,zero,647
    9ce8:	0000a574 	movhi	zero,661
    9cec:	0000a574 	movhi	zero,661
    9cf0:	0000a078 	rdprs	zero,zero,641
    9cf4:	0000a574 	movhi	zero,661
    9cf8:	0000a088 	cmpgei	zero,zero,642
    9cfc:	0000a0c4 	movi	zero,643
    9d00:	00009dc0 	call	9dc <take_picture_blocking+0x30>
    9d04:	0000a06c 	andhi	zero,zero,641
    9d08:	0000a574 	movhi	zero,661
    9d0c:	0000a448 	cmpgei	zero,zero,657
    9d10:	0000a574 	movhi	zero,661
    9d14:	0000a4a0 	cmpeqi	zero,zero,658
    9d18:	0000a574 	movhi	zero,661
    9d1c:	0000a574 	movhi	zero,661
    9d20:	0000a164 	muli	zero,zero,645
    9d24:	42000204 	addi	r8,r8,8
    9d28:	da802317 	ldw	r10,140(sp)
    9d2c:	5455883a 	add	r10,r10,r17
    9d30:	da802315 	stw	r10,140(sp)
    9d34:	003f8b06 	br	9b64 <___vfiprintf_internal_r+0x144>
    9d38:	d9002017 	ldw	r4,128(sp)
    9d3c:	a00b883a 	mov	r5,r20
    9d40:	0004f3c0 	call	4f3c <__swsetup_r>
    9d44:	1003b11e 	bne	r2,zero,ac0c <___vfiprintf_internal_r+0x11ec>
    9d48:	a080030b 	ldhu	r2,12(r20)
    9d4c:	00c00284 	movi	r3,10
    9d50:	1080068c 	andi	r2,r2,26
    9d54:	10ff541e 	bne	r2,r3,9aa8 <___vfiprintf_internal_r+0x88>
    9d58:	a080038f 	ldh	r2,14(r20)
    9d5c:	103f5216 	blt	r2,zero,9aa8 <___vfiprintf_internal_r+0x88>
    9d60:	d9c02217 	ldw	r7,136(sp)
    9d64:	d9002017 	ldw	r4,128(sp)
    9d68:	e00d883a 	mov	r6,fp
    9d6c:	a00b883a 	mov	r5,r20
    9d70:	000ae980 	call	ae98 <__sbprintf>
    9d74:	dfc03617 	ldw	ra,216(sp)
    9d78:	df003517 	ldw	fp,212(sp)
    9d7c:	ddc03417 	ldw	r23,208(sp)
    9d80:	dd803317 	ldw	r22,204(sp)
    9d84:	dd403217 	ldw	r21,200(sp)
    9d88:	dd003117 	ldw	r20,196(sp)
    9d8c:	dcc03017 	ldw	r19,192(sp)
    9d90:	dc802f17 	ldw	r18,188(sp)
    9d94:	dc402e17 	ldw	r17,184(sp)
    9d98:	dc002d17 	ldw	r16,180(sp)
    9d9c:	dec03704 	addi	sp,sp,220
    9da0:	f800283a 	ret
    9da4:	0006f100 	call	6f10 <__sinit>
    9da8:	003f2f06 	br	9a68 <___vfiprintf_internal_r+0x48>
    9dac:	0463c83a 	sub	r17,zero,r17
    9db0:	d8802215 	stw	r2,136(sp)
    9db4:	a5000114 	ori	r20,r20,4
    9db8:	80c00007 	ldb	r3,0(r16)
    9dbc:	003f7706 	br	9b9c <___vfiprintf_internal_r+0x17c>
    9dc0:	00800c04 	movi	r2,48
    9dc4:	da802217 	ldw	r10,136(sp)
    9dc8:	d8801d05 	stb	r2,116(sp)
    9dcc:	00801e04 	movi	r2,120
    9dd0:	d8801d45 	stb	r2,117(sp)
    9dd4:	d8001d85 	stb	zero,118(sp)
    9dd8:	50c00104 	addi	r3,r10,4
    9ddc:	54800017 	ldw	r18,0(r10)
    9de0:	0027883a 	mov	r19,zero
    9de4:	a0800094 	ori	r2,r20,2
    9de8:	48030b16 	blt	r9,zero,aa18 <___vfiprintf_internal_r+0xff8>
    9dec:	00bfdfc4 	movi	r2,-129
    9df0:	a096703a 	and	r11,r20,r2
    9df4:	d8c02215 	stw	r3,136(sp)
    9df8:	5d000094 	ori	r20,r11,2
    9dfc:	90032b1e 	bne	r18,zero,aaac <___vfiprintf_internal_r+0x108c>
    9e00:	00800074 	movhi	r2,1
    9e04:	10862104 	addi	r2,r2,6276
    9e08:	d8802615 	stw	r2,152(sp)
    9e0c:	0039883a 	mov	fp,zero
    9e10:	48017b1e 	bne	r9,zero,a400 <___vfiprintf_internal_r+0x9e0>
    9e14:	0013883a 	mov	r9,zero
    9e18:	0027883a 	mov	r19,zero
    9e1c:	dd401a04 	addi	r21,sp,104
    9e20:	4825883a 	mov	r18,r9
    9e24:	4cc0010e 	bge	r9,r19,9e2c <___vfiprintf_internal_r+0x40c>
    9e28:	9825883a 	mov	r18,r19
    9e2c:	e7003fcc 	andi	fp,fp,255
    9e30:	e700201c 	xori	fp,fp,128
    9e34:	e73fe004 	addi	fp,fp,-128
    9e38:	e0000126 	beq	fp,zero,9e40 <___vfiprintf_internal_r+0x420>
    9e3c:	94800044 	addi	r18,r18,1
    9e40:	a380008c 	andi	r14,r20,2
    9e44:	70000126 	beq	r14,zero,9e4c <___vfiprintf_internal_r+0x42c>
    9e48:	94800084 	addi	r18,r18,2
    9e4c:	a700210c 	andi	fp,r20,132
    9e50:	e001df1e 	bne	fp,zero,a5d0 <___vfiprintf_internal_r+0xbb0>
    9e54:	8c87c83a 	sub	r3,r17,r18
    9e58:	00c1dd0e 	bge	zero,r3,a5d0 <___vfiprintf_internal_r+0xbb0>
    9e5c:	01c00404 	movi	r7,16
    9e60:	d8801c17 	ldw	r2,112(sp)
    9e64:	38c3ad0e 	bge	r7,r3,ad1c <___vfiprintf_internal_r+0x12fc>
    9e68:	02800074 	movhi	r10,1
    9e6c:	52868604 	addi	r10,r10,6680
    9e70:	dc002915 	stw	r16,164(sp)
    9e74:	d9801b17 	ldw	r6,108(sp)
    9e78:	da802415 	stw	r10,144(sp)
    9e7c:	03c001c4 	movi	r15,7
    9e80:	da402515 	stw	r9,148(sp)
    9e84:	db802815 	stw	r14,160(sp)
    9e88:	1821883a 	mov	r16,r3
    9e8c:	00000506 	br	9ea4 <___vfiprintf_internal_r+0x484>
    9e90:	31400084 	addi	r5,r6,2
    9e94:	42000204 	addi	r8,r8,8
    9e98:	200d883a 	mov	r6,r4
    9e9c:	843ffc04 	addi	r16,r16,-16
    9ea0:	3c000d0e 	bge	r7,r16,9ed8 <___vfiprintf_internal_r+0x4b8>
    9ea4:	10800404 	addi	r2,r2,16
    9ea8:	31000044 	addi	r4,r6,1
    9eac:	45800015 	stw	r22,0(r8)
    9eb0:	41c00115 	stw	r7,4(r8)
    9eb4:	d8801c15 	stw	r2,112(sp)
    9eb8:	d9001b15 	stw	r4,108(sp)
    9ebc:	793ff40e 	bge	r15,r4,9e90 <___vfiprintf_internal_r+0x470>
    9ec0:	1001b51e 	bne	r2,zero,a598 <___vfiprintf_internal_r+0xb78>
    9ec4:	843ffc04 	addi	r16,r16,-16
    9ec8:	000d883a 	mov	r6,zero
    9ecc:	01400044 	movi	r5,1
    9ed0:	d811883a 	mov	r8,sp
    9ed4:	3c3ff316 	blt	r7,r16,9ea4 <___vfiprintf_internal_r+0x484>
    9ed8:	8007883a 	mov	r3,r16
    9edc:	da402517 	ldw	r9,148(sp)
    9ee0:	db802817 	ldw	r14,160(sp)
    9ee4:	dc002917 	ldw	r16,164(sp)
    9ee8:	da802417 	ldw	r10,144(sp)
    9eec:	1885883a 	add	r2,r3,r2
    9ef0:	40c00115 	stw	r3,4(r8)
    9ef4:	42800015 	stw	r10,0(r8)
    9ef8:	d8801c15 	stw	r2,112(sp)
    9efc:	d9401b15 	stw	r5,108(sp)
    9f00:	00c001c4 	movi	r3,7
    9f04:	19426016 	blt	r3,r5,a888 <___vfiprintf_internal_r+0xe68>
    9f08:	d8c01d87 	ldb	r3,118(sp)
    9f0c:	42000204 	addi	r8,r8,8
    9f10:	29000044 	addi	r4,r5,1
    9f14:	1801b31e 	bne	r3,zero,a5e4 <___vfiprintf_internal_r+0xbc4>
    9f18:	7001c026 	beq	r14,zero,a61c <___vfiprintf_internal_r+0xbfc>
    9f1c:	d8c01d04 	addi	r3,sp,116
    9f20:	10800084 	addi	r2,r2,2
    9f24:	40c00015 	stw	r3,0(r8)
    9f28:	00c00084 	movi	r3,2
    9f2c:	40c00115 	stw	r3,4(r8)
    9f30:	d8801c15 	stw	r2,112(sp)
    9f34:	d9001b15 	stw	r4,108(sp)
    9f38:	00c001c4 	movi	r3,7
    9f3c:	1902650e 	bge	r3,r4,a8d4 <___vfiprintf_internal_r+0xeb4>
    9f40:	10029a1e 	bne	r2,zero,a9ac <___vfiprintf_internal_r+0xf8c>
    9f44:	00c02004 	movi	r3,128
    9f48:	01000044 	movi	r4,1
    9f4c:	000b883a 	mov	r5,zero
    9f50:	d811883a 	mov	r8,sp
    9f54:	e0c1b31e 	bne	fp,r3,a624 <___vfiprintf_internal_r+0xc04>
    9f58:	8cb9c83a 	sub	fp,r17,r18
    9f5c:	0701b10e 	bge	zero,fp,a624 <___vfiprintf_internal_r+0xc04>
    9f60:	01c00404 	movi	r7,16
    9f64:	3f03890e 	bge	r7,fp,ad8c <___vfiprintf_internal_r+0x136c>
    9f68:	00c00074 	movhi	r3,1
    9f6c:	18c68204 	addi	r3,r3,6664
    9f70:	d8c02415 	stw	r3,144(sp)
    9f74:	8007883a 	mov	r3,r16
    9f78:	034001c4 	movi	r13,7
    9f7c:	e021883a 	mov	r16,fp
    9f80:	da402515 	stw	r9,148(sp)
    9f84:	1839883a 	mov	fp,r3
    9f88:	00000506 	br	9fa0 <___vfiprintf_internal_r+0x580>
    9f8c:	29800084 	addi	r6,r5,2
    9f90:	42000204 	addi	r8,r8,8
    9f94:	180b883a 	mov	r5,r3
    9f98:	843ffc04 	addi	r16,r16,-16
    9f9c:	3c000d0e 	bge	r7,r16,9fd4 <___vfiprintf_internal_r+0x5b4>
    9fa0:	10800404 	addi	r2,r2,16
    9fa4:	28c00044 	addi	r3,r5,1
    9fa8:	45c00015 	stw	r23,0(r8)
    9fac:	41c00115 	stw	r7,4(r8)
    9fb0:	d8801c15 	stw	r2,112(sp)
    9fb4:	d8c01b15 	stw	r3,108(sp)
    9fb8:	68fff40e 	bge	r13,r3,9f8c <___vfiprintf_internal_r+0x56c>
    9fbc:	1002241e 	bne	r2,zero,a850 <___vfiprintf_internal_r+0xe30>
    9fc0:	843ffc04 	addi	r16,r16,-16
    9fc4:	01800044 	movi	r6,1
    9fc8:	000b883a 	mov	r5,zero
    9fcc:	d811883a 	mov	r8,sp
    9fd0:	3c3ff316 	blt	r7,r16,9fa0 <___vfiprintf_internal_r+0x580>
    9fd4:	da402517 	ldw	r9,148(sp)
    9fd8:	e007883a 	mov	r3,fp
    9fdc:	8039883a 	mov	fp,r16
    9fe0:	1821883a 	mov	r16,r3
    9fe4:	d8c02417 	ldw	r3,144(sp)
    9fe8:	1705883a 	add	r2,r2,fp
    9fec:	47000115 	stw	fp,4(r8)
    9ff0:	40c00015 	stw	r3,0(r8)
    9ff4:	d8801c15 	stw	r2,112(sp)
    9ff8:	d9801b15 	stw	r6,108(sp)
    9ffc:	00c001c4 	movi	r3,7
    a000:	19827616 	blt	r3,r6,a9dc <___vfiprintf_internal_r+0xfbc>
    a004:	4cf9c83a 	sub	fp,r9,r19
    a008:	42000204 	addi	r8,r8,8
    a00c:	31000044 	addi	r4,r6,1
    a010:	300b883a 	mov	r5,r6
    a014:	07018516 	blt	zero,fp,a62c <___vfiprintf_internal_r+0xc0c>
    a018:	9885883a 	add	r2,r19,r2
    a01c:	45400015 	stw	r21,0(r8)
    a020:	44c00115 	stw	r19,4(r8)
    a024:	d8801c15 	stw	r2,112(sp)
    a028:	d9001b15 	stw	r4,108(sp)
    a02c:	00c001c4 	movi	r3,7
    a030:	1901dd0e 	bge	r3,r4,a7a8 <___vfiprintf_internal_r+0xd88>
    a034:	1002401e 	bne	r2,zero,a938 <___vfiprintf_internal_r+0xf18>
    a038:	d8001b15 	stw	zero,108(sp)
    a03c:	a2c0010c 	andi	r11,r20,4
    a040:	58000226 	beq	r11,zero,a04c <___vfiprintf_internal_r+0x62c>
    a044:	8ca7c83a 	sub	r19,r17,r18
    a048:	04c2f216 	blt	zero,r19,ac14 <___vfiprintf_internal_r+0x11f4>
    a04c:	8c80010e 	bge	r17,r18,a054 <___vfiprintf_internal_r+0x634>
    a050:	9023883a 	mov	r17,r18
    a054:	da802317 	ldw	r10,140(sp)
    a058:	5455883a 	add	r10,r10,r17
    a05c:	da802315 	stw	r10,140(sp)
    a060:	d8001b15 	stw	zero,108(sp)
    a064:	d811883a 	mov	r8,sp
    a068:	003ea206 	br	9af4 <___vfiprintf_internal_r+0xd4>
    a06c:	a5000814 	ori	r20,r20,32
    a070:	80c00007 	ldb	r3,0(r16)
    a074:	003ec906 	br	9b9c <___vfiprintf_internal_r+0x17c>
    a078:	80c00007 	ldb	r3,0(r16)
    a07c:	1b030926 	beq	r3,r12,aca4 <___vfiprintf_internal_r+0x1284>
    a080:	a5000414 	ori	r20,r20,16
    a084:	003ec506 	br	9b9c <___vfiprintf_internal_r+0x17c>
    a088:	21003fcc 	andi	r4,r4,255
    a08c:	20035e1e 	bne	r4,zero,ae08 <___vfiprintf_internal_r+0x13e8>
    a090:	a080080c 	andi	r2,r20,32
    a094:	1002a526 	beq	r2,zero,ab2c <___vfiprintf_internal_r+0x110c>
    a098:	da802217 	ldw	r10,136(sp)
    a09c:	50800017 	ldw	r2,0(r10)
    a0a0:	da802317 	ldw	r10,140(sp)
    a0a4:	5007d7fa 	srai	r3,r10,31
    a0a8:	da802217 	ldw	r10,136(sp)
    a0ac:	10c00115 	stw	r3,4(r2)
    a0b0:	52800104 	addi	r10,r10,4
    a0b4:	da802215 	stw	r10,136(sp)
    a0b8:	da802317 	ldw	r10,140(sp)
    a0bc:	12800015 	stw	r10,0(r2)
    a0c0:	003e8c06 	br	9af4 <___vfiprintf_internal_r+0xd4>
    a0c4:	21003fcc 	andi	r4,r4,255
    a0c8:	2003511e 	bne	r4,zero,ae10 <___vfiprintf_internal_r+0x13f0>
    a0cc:	a080080c 	andi	r2,r20,32
    a0d0:	1000a126 	beq	r2,zero,a358 <___vfiprintf_internal_r+0x938>
    a0d4:	da802217 	ldw	r10,136(sp)
    a0d8:	d8001d85 	stb	zero,118(sp)
    a0dc:	50800204 	addi	r2,r10,8
    a0e0:	54800017 	ldw	r18,0(r10)
    a0e4:	54c00117 	ldw	r19,4(r10)
    a0e8:	4802b416 	blt	r9,zero,abbc <___vfiprintf_internal_r+0x119c>
    a0ec:	013fdfc4 	movi	r4,-129
    a0f0:	94c6b03a 	or	r3,r18,r19
    a0f4:	d8802215 	stw	r2,136(sp)
    a0f8:	a128703a 	and	r20,r20,r4
    a0fc:	1800a226 	beq	r3,zero,a388 <___vfiprintf_internal_r+0x968>
    a100:	0039883a 	mov	fp,zero
    a104:	dd401a04 	addi	r21,sp,104
    a108:	9006d0fa 	srli	r3,r18,3
    a10c:	9808977a 	slli	r4,r19,29
    a110:	9826d0fa 	srli	r19,r19,3
    a114:	948001cc 	andi	r18,r18,7
    a118:	90800c04 	addi	r2,r18,48
    a11c:	ad7fffc4 	addi	r21,r21,-1
    a120:	20e4b03a 	or	r18,r4,r3
    a124:	a8800005 	stb	r2,0(r21)
    a128:	94c6b03a 	or	r3,r18,r19
    a12c:	183ff61e 	bne	r3,zero,a108 <___vfiprintf_internal_r+0x6e8>
    a130:	a0c0004c 	andi	r3,r20,1
    a134:	18005926 	beq	r3,zero,a29c <___vfiprintf_internal_r+0x87c>
    a138:	10803fcc 	andi	r2,r2,255
    a13c:	1080201c 	xori	r2,r2,128
    a140:	10bfe004 	addi	r2,r2,-128
    a144:	00c00c04 	movi	r3,48
    a148:	10c05426 	beq	r2,r3,a29c <___vfiprintf_internal_r+0x87c>
    a14c:	da801e17 	ldw	r10,120(sp)
    a150:	a8bfffc4 	addi	r2,r21,-1
    a154:	a8ffffc5 	stb	r3,-1(r21)
    a158:	50a7c83a 	sub	r19,r10,r2
    a15c:	102b883a 	mov	r21,r2
    a160:	003f2f06 	br	9e20 <___vfiprintf_internal_r+0x400>
    a164:	21003fcc 	andi	r4,r4,255
    a168:	2003421e 	bne	r4,zero,ae74 <___vfiprintf_internal_r+0x1454>
    a16c:	00800074 	movhi	r2,1
    a170:	10862104 	addi	r2,r2,6276
    a174:	d8802615 	stw	r2,152(sp)
    a178:	a080080c 	andi	r2,r20,32
    a17c:	1000aa26 	beq	r2,zero,a428 <___vfiprintf_internal_r+0xa08>
    a180:	da802217 	ldw	r10,136(sp)
    a184:	54800017 	ldw	r18,0(r10)
    a188:	54c00117 	ldw	r19,4(r10)
    a18c:	52800204 	addi	r10,r10,8
    a190:	da802215 	stw	r10,136(sp)
    a194:	a080004c 	andi	r2,r20,1
    a198:	1001d226 	beq	r2,zero,a8e4 <___vfiprintf_internal_r+0xec4>
    a19c:	94c4b03a 	or	r2,r18,r19
    a1a0:	1002351e 	bne	r2,zero,aa78 <___vfiprintf_internal_r+0x1058>
    a1a4:	d8001d85 	stb	zero,118(sp)
    a1a8:	48022216 	blt	r9,zero,aa34 <___vfiprintf_internal_r+0x1014>
    a1ac:	00bfdfc4 	movi	r2,-129
    a1b0:	a0a8703a 	and	r20,r20,r2
    a1b4:	003f1506 	br	9e0c <___vfiprintf_internal_r+0x3ec>
    a1b8:	da802217 	ldw	r10,136(sp)
    a1bc:	04800044 	movi	r18,1
    a1c0:	d8001d85 	stb	zero,118(sp)
    a1c4:	50800017 	ldw	r2,0(r10)
    a1c8:	52800104 	addi	r10,r10,4
    a1cc:	da802215 	stw	r10,136(sp)
    a1d0:	d8801005 	stb	r2,64(sp)
    a1d4:	9027883a 	mov	r19,r18
    a1d8:	dd401004 	addi	r21,sp,64
    a1dc:	0013883a 	mov	r9,zero
    a1e0:	003f1706 	br	9e40 <___vfiprintf_internal_r+0x420>
    a1e4:	21003fcc 	andi	r4,r4,255
    a1e8:	2003201e 	bne	r4,zero,ae6c <___vfiprintf_internal_r+0x144c>
    a1ec:	a080080c 	andi	r2,r20,32
    a1f0:	10004b26 	beq	r2,zero,a320 <___vfiprintf_internal_r+0x900>
    a1f4:	da802217 	ldw	r10,136(sp)
    a1f8:	50800117 	ldw	r2,4(r10)
    a1fc:	54800017 	ldw	r18,0(r10)
    a200:	52800204 	addi	r10,r10,8
    a204:	da802215 	stw	r10,136(sp)
    a208:	1027883a 	mov	r19,r2
    a20c:	10022c16 	blt	r2,zero,aac0 <___vfiprintf_internal_r+0x10a0>
    a210:	df001d83 	ldbu	fp,118(sp)
    a214:	48007216 	blt	r9,zero,a3e0 <___vfiprintf_internal_r+0x9c0>
    a218:	00ffdfc4 	movi	r3,-129
    a21c:	94c4b03a 	or	r2,r18,r19
    a220:	a0e8703a 	and	r20,r20,r3
    a224:	1000cc26 	beq	r2,zero,a558 <___vfiprintf_internal_r+0xb38>
    a228:	98021026 	beq	r19,zero,aa6c <___vfiprintf_internal_r+0x104c>
    a22c:	dc402415 	stw	r17,144(sp)
    a230:	dc002515 	stw	r16,148(sp)
    a234:	9823883a 	mov	r17,r19
    a238:	9021883a 	mov	r16,r18
    a23c:	dd401a04 	addi	r21,sp,104
    a240:	4825883a 	mov	r18,r9
    a244:	4027883a 	mov	r19,r8
    a248:	8009883a 	mov	r4,r16
    a24c:	880b883a 	mov	r5,r17
    a250:	01800284 	movi	r6,10
    a254:	000f883a 	mov	r7,zero
    a258:	000be000 	call	be00 <__umoddi3>
    a25c:	10800c04 	addi	r2,r2,48
    a260:	ad7fffc4 	addi	r21,r21,-1
    a264:	8009883a 	mov	r4,r16
    a268:	880b883a 	mov	r5,r17
    a26c:	a8800005 	stb	r2,0(r21)
    a270:	01800284 	movi	r6,10
    a274:	000f883a 	mov	r7,zero
    a278:	000b8880 	call	b888 <__udivdi3>
    a27c:	1021883a 	mov	r16,r2
    a280:	10c4b03a 	or	r2,r2,r3
    a284:	1823883a 	mov	r17,r3
    a288:	103fef1e 	bne	r2,zero,a248 <___vfiprintf_internal_r+0x828>
    a28c:	dc402417 	ldw	r17,144(sp)
    a290:	dc002517 	ldw	r16,148(sp)
    a294:	9013883a 	mov	r9,r18
    a298:	9811883a 	mov	r8,r19
    a29c:	da801e17 	ldw	r10,120(sp)
    a2a0:	5567c83a 	sub	r19,r10,r21
    a2a4:	003ede06 	br	9e20 <___vfiprintf_internal_r+0x400>
    a2a8:	38803fcc 	andi	r2,r7,255
    a2ac:	1080201c 	xori	r2,r2,128
    a2b0:	10bfe004 	addi	r2,r2,-128
    a2b4:	1002371e 	bne	r2,zero,ab94 <___vfiprintf_internal_r+0x1174>
    a2b8:	01000044 	movi	r4,1
    a2bc:	01c00804 	movi	r7,32
    a2c0:	80c00007 	ldb	r3,0(r16)
    a2c4:	003e3506 	br	9b9c <___vfiprintf_internal_r+0x17c>
    a2c8:	a5000054 	ori	r20,r20,1
    a2cc:	80c00007 	ldb	r3,0(r16)
    a2d0:	003e3206 	br	9b9c <___vfiprintf_internal_r+0x17c>
    a2d4:	a5002014 	ori	r20,r20,128
    a2d8:	80c00007 	ldb	r3,0(r16)
    a2dc:	003e2f06 	br	9b9c <___vfiprintf_internal_r+0x17c>
    a2e0:	8015883a 	mov	r10,r16
    a2e4:	0023883a 	mov	r17,zero
    a2e8:	18bff404 	addi	r2,r3,-48
    a2ec:	50c00007 	ldb	r3,0(r10)
    a2f0:	8c4002a4 	muli	r17,r17,10
    a2f4:	84000044 	addi	r16,r16,1
    a2f8:	8015883a 	mov	r10,r16
    a2fc:	1463883a 	add	r17,r2,r17
    a300:	18bff404 	addi	r2,r3,-48
    a304:	30bff92e 	bgeu	r6,r2,a2ec <___vfiprintf_internal_r+0x8cc>
    a308:	003e2506 	br	9ba0 <___vfiprintf_internal_r+0x180>
    a30c:	21003fcc 	andi	r4,r4,255
    a310:	2002d41e 	bne	r4,zero,ae64 <___vfiprintf_internal_r+0x1444>
    a314:	a5000414 	ori	r20,r20,16
    a318:	a080080c 	andi	r2,r20,32
    a31c:	103fb51e 	bne	r2,zero,a1f4 <___vfiprintf_internal_r+0x7d4>
    a320:	a080040c 	andi	r2,r20,16
    a324:	1001f826 	beq	r2,zero,ab08 <___vfiprintf_internal_r+0x10e8>
    a328:	da802217 	ldw	r10,136(sp)
    a32c:	54800017 	ldw	r18,0(r10)
    a330:	52800104 	addi	r10,r10,4
    a334:	da802215 	stw	r10,136(sp)
    a338:	9027d7fa 	srai	r19,r18,31
    a33c:	9805883a 	mov	r2,r19
    a340:	003fb206 	br	a20c <___vfiprintf_internal_r+0x7ec>
    a344:	21003fcc 	andi	r4,r4,255
    a348:	2002c41e 	bne	r4,zero,ae5c <___vfiprintf_internal_r+0x143c>
    a34c:	a5000414 	ori	r20,r20,16
    a350:	a080080c 	andi	r2,r20,32
    a354:	103f5f1e 	bne	r2,zero,a0d4 <___vfiprintf_internal_r+0x6b4>
    a358:	a080040c 	andi	r2,r20,16
    a35c:	10020f26 	beq	r2,zero,ab9c <___vfiprintf_internal_r+0x117c>
    a360:	da802217 	ldw	r10,136(sp)
    a364:	d8001d85 	stb	zero,118(sp)
    a368:	0027883a 	mov	r19,zero
    a36c:	50800104 	addi	r2,r10,4
    a370:	54800017 	ldw	r18,0(r10)
    a374:	48021116 	blt	r9,zero,abbc <___vfiprintf_internal_r+0x119c>
    a378:	00ffdfc4 	movi	r3,-129
    a37c:	d8802215 	stw	r2,136(sp)
    a380:	a0e8703a 	and	r20,r20,r3
    a384:	903f5e1e 	bne	r18,zero,a100 <___vfiprintf_internal_r+0x6e0>
    a388:	0039883a 	mov	fp,zero
    a38c:	4802a626 	beq	r9,zero,ae28 <___vfiprintf_internal_r+0x1408>
    a390:	0025883a 	mov	r18,zero
    a394:	0027883a 	mov	r19,zero
    a398:	003f5a06 	br	a104 <___vfiprintf_internal_r+0x6e4>
    a39c:	21003fcc 	andi	r4,r4,255
    a3a0:	20029f1e 	bne	r4,zero,ae20 <___vfiprintf_internal_r+0x1400>
    a3a4:	a5000414 	ori	r20,r20,16
    a3a8:	a080080c 	andi	r2,r20,32
    a3ac:	10005e1e 	bne	r2,zero,a528 <___vfiprintf_internal_r+0xb08>
    a3b0:	a080040c 	andi	r2,r20,16
    a3b4:	1001a21e 	bne	r2,zero,aa40 <___vfiprintf_internal_r+0x1020>
    a3b8:	a080100c 	andi	r2,r20,64
    a3bc:	d8001d85 	stb	zero,118(sp)
    a3c0:	da802217 	ldw	r10,136(sp)
    a3c4:	1002231e 	bne	r2,zero,ac54 <___vfiprintf_internal_r+0x1234>
    a3c8:	50800104 	addi	r2,r10,4
    a3cc:	54800017 	ldw	r18,0(r10)
    a3d0:	0027883a 	mov	r19,zero
    a3d4:	4801a00e 	bge	r9,zero,aa58 <___vfiprintf_internal_r+0x1038>
    a3d8:	d8802215 	stw	r2,136(sp)
    a3dc:	0039883a 	mov	fp,zero
    a3e0:	94c4b03a 	or	r2,r18,r19
    a3e4:	103f901e 	bne	r2,zero,a228 <___vfiprintf_internal_r+0x808>
    a3e8:	00800044 	movi	r2,1
    a3ec:	10803fcc 	andi	r2,r2,255
    a3f0:	00c00044 	movi	r3,1
    a3f4:	10c05926 	beq	r2,r3,a55c <___vfiprintf_internal_r+0xb3c>
    a3f8:	00c00084 	movi	r3,2
    a3fc:	10ffe41e 	bne	r2,r3,a390 <___vfiprintf_internal_r+0x970>
    a400:	0025883a 	mov	r18,zero
    a404:	0027883a 	mov	r19,zero
    a408:	00013d06 	br	a900 <___vfiprintf_internal_r+0xee0>
    a40c:	21003fcc 	andi	r4,r4,255
    a410:	2002811e 	bne	r4,zero,ae18 <___vfiprintf_internal_r+0x13f8>
    a414:	00800074 	movhi	r2,1
    a418:	10861c04 	addi	r2,r2,6256
    a41c:	d8802615 	stw	r2,152(sp)
    a420:	a080080c 	andi	r2,r20,32
    a424:	103f561e 	bne	r2,zero,a180 <___vfiprintf_internal_r+0x760>
    a428:	a080040c 	andi	r2,r20,16
    a42c:	1001d126 	beq	r2,zero,ab74 <___vfiprintf_internal_r+0x1154>
    a430:	da802217 	ldw	r10,136(sp)
    a434:	0027883a 	mov	r19,zero
    a438:	54800017 	ldw	r18,0(r10)
    a43c:	52800104 	addi	r10,r10,4
    a440:	da802215 	stw	r10,136(sp)
    a444:	003f5306 	br	a194 <___vfiprintf_internal_r+0x774>
    a448:	da802217 	ldw	r10,136(sp)
    a44c:	d8001d85 	stb	zero,118(sp)
    a450:	55400017 	ldw	r21,0(r10)
    a454:	50c00104 	addi	r3,r10,4
    a458:	a8024226 	beq	r21,zero,ad64 <___vfiprintf_internal_r+0x1344>
    a45c:	48021816 	blt	r9,zero,acc0 <___vfiprintf_internal_r+0x12a0>
    a460:	480d883a 	mov	r6,r9
    a464:	000b883a 	mov	r5,zero
    a468:	a809883a 	mov	r4,r21
    a46c:	d8c02a15 	stw	r3,168(sp)
    a470:	da002b15 	stw	r8,172(sp)
    a474:	da402c15 	stw	r9,176(sp)
    a478:	0007c700 	call	7c70 <memchr>
    a47c:	d8c02a17 	ldw	r3,168(sp)
    a480:	da002b17 	ldw	r8,172(sp)
    a484:	da402c17 	ldw	r9,176(sp)
    a488:	10024826 	beq	r2,zero,adac <___vfiprintf_internal_r+0x138c>
    a48c:	1567c83a 	sub	r19,r2,r21
    a490:	df001d83 	ldbu	fp,118(sp)
    a494:	d8c02215 	stw	r3,136(sp)
    a498:	0013883a 	mov	r9,zero
    a49c:	003e6006 	br	9e20 <___vfiprintf_internal_r+0x400>
    a4a0:	21003fcc 	andi	r4,r4,255
    a4a4:	203fc026 	beq	r4,zero,a3a8 <___vfiprintf_internal_r+0x988>
    a4a8:	d9c01d85 	stb	r7,118(sp)
    a4ac:	003fbe06 	br	a3a8 <___vfiprintf_internal_r+0x988>
    a4b0:	da802217 	ldw	r10,136(sp)
    a4b4:	54400017 	ldw	r17,0(r10)
    a4b8:	50800104 	addi	r2,r10,4
    a4bc:	883e3b16 	blt	r17,zero,9dac <___vfiprintf_internal_r+0x38c>
    a4c0:	d8802215 	stw	r2,136(sp)
    a4c4:	80c00007 	ldb	r3,0(r16)
    a4c8:	003db406 	br	9b9c <___vfiprintf_internal_r+0x17c>
    a4cc:	01000044 	movi	r4,1
    a4d0:	01c00ac4 	movi	r7,43
    a4d4:	80c00007 	ldb	r3,0(r16)
    a4d8:	003db006 	br	9b9c <___vfiprintf_internal_r+0x17c>
    a4dc:	80c00007 	ldb	r3,0(r16)
    a4e0:	82800044 	addi	r10,r16,1
    a4e4:	1b423c26 	beq	r3,r13,add8 <___vfiprintf_internal_r+0x13b8>
    a4e8:	18bff404 	addi	r2,r3,-48
    a4ec:	0013883a 	mov	r9,zero
    a4f0:	30822b36 	bltu	r6,r2,ada0 <___vfiprintf_internal_r+0x1380>
    a4f4:	50c00007 	ldb	r3,0(r10)
    a4f8:	4a4002a4 	muli	r9,r9,10
    a4fc:	54000044 	addi	r16,r10,1
    a500:	8015883a 	mov	r10,r16
    a504:	4893883a 	add	r9,r9,r2
    a508:	18bff404 	addi	r2,r3,-48
    a50c:	30bff92e 	bgeu	r6,r2,a4f4 <___vfiprintf_internal_r+0xad4>
    a510:	483da30e 	bge	r9,zero,9ba0 <___vfiprintf_internal_r+0x180>
    a514:	027fffc4 	movi	r9,-1
    a518:	003da106 	br	9ba0 <___vfiprintf_internal_r+0x180>
    a51c:	a5001014 	ori	r20,r20,64
    a520:	80c00007 	ldb	r3,0(r16)
    a524:	003d9d06 	br	9b9c <___vfiprintf_internal_r+0x17c>
    a528:	da802217 	ldw	r10,136(sp)
    a52c:	d8001d85 	stb	zero,118(sp)
    a530:	50c00204 	addi	r3,r10,8
    a534:	54800017 	ldw	r18,0(r10)
    a538:	54c00117 	ldw	r19,4(r10)
    a53c:	4801ca16 	blt	r9,zero,ac68 <___vfiprintf_internal_r+0x1248>
    a540:	013fdfc4 	movi	r4,-129
    a544:	94c4b03a 	or	r2,r18,r19
    a548:	d8c02215 	stw	r3,136(sp)
    a54c:	a128703a 	and	r20,r20,r4
    a550:	0039883a 	mov	fp,zero
    a554:	103f341e 	bne	r2,zero,a228 <___vfiprintf_internal_r+0x808>
    a558:	483e2e26 	beq	r9,zero,9e14 <___vfiprintf_internal_r+0x3f4>
    a55c:	0025883a 	mov	r18,zero
    a560:	94800c04 	addi	r18,r18,48
    a564:	dc8019c5 	stb	r18,103(sp)
    a568:	dcc02717 	ldw	r19,156(sp)
    a56c:	dd4019c4 	addi	r21,sp,103
    a570:	003e2b06 	br	9e20 <___vfiprintf_internal_r+0x400>
    a574:	21003fcc 	andi	r4,r4,255
    a578:	2002361e 	bne	r4,zero,ae54 <___vfiprintf_internal_r+0x1434>
    a57c:	1801c126 	beq	r3,zero,ac84 <___vfiprintf_internal_r+0x1264>
    a580:	04800044 	movi	r18,1
    a584:	d8c01005 	stb	r3,64(sp)
    a588:	d8001d85 	stb	zero,118(sp)
    a58c:	9027883a 	mov	r19,r18
    a590:	dd401004 	addi	r21,sp,64
    a594:	003f1106 	br	a1dc <___vfiprintf_internal_r+0x7bc>
    a598:	d9402117 	ldw	r5,132(sp)
    a59c:	d9002017 	ldw	r4,128(sp)
    a5a0:	d9801a04 	addi	r6,sp,104
    a5a4:	d9c02b15 	stw	r7,172(sp)
    a5a8:	dbc02a15 	stw	r15,168(sp)
    a5ac:	000990c0 	call	990c <__sprint_r.part.0>
    a5b0:	d9c02b17 	ldw	r7,172(sp)
    a5b4:	dbc02a17 	ldw	r15,168(sp)
    a5b8:	10006d1e 	bne	r2,zero,a770 <___vfiprintf_internal_r+0xd50>
    a5bc:	d9801b17 	ldw	r6,108(sp)
    a5c0:	d8801c17 	ldw	r2,112(sp)
    a5c4:	d811883a 	mov	r8,sp
    a5c8:	31400044 	addi	r5,r6,1
    a5cc:	003e3306 	br	9e9c <___vfiprintf_internal_r+0x47c>
    a5d0:	d9401b17 	ldw	r5,108(sp)
    a5d4:	d8801c17 	ldw	r2,112(sp)
    a5d8:	29000044 	addi	r4,r5,1
    a5dc:	d8c01d87 	ldb	r3,118(sp)
    a5e0:	183e4d26 	beq	r3,zero,9f18 <___vfiprintf_internal_r+0x4f8>
    a5e4:	00c00044 	movi	r3,1
    a5e8:	d9401d84 	addi	r5,sp,118
    a5ec:	10c5883a 	add	r2,r2,r3
    a5f0:	41400015 	stw	r5,0(r8)
    a5f4:	40c00115 	stw	r3,4(r8)
    a5f8:	d8801c15 	stw	r2,112(sp)
    a5fc:	d9001b15 	stw	r4,108(sp)
    a600:	014001c4 	movi	r5,7
    a604:	2900a90e 	bge	r5,r4,a8ac <___vfiprintf_internal_r+0xe8c>
    a608:	1000da1e 	bne	r2,zero,a974 <___vfiprintf_internal_r+0xf54>
    a60c:	7000ab1e 	bne	r14,zero,a8bc <___vfiprintf_internal_r+0xe9c>
    a610:	000b883a 	mov	r5,zero
    a614:	1809883a 	mov	r4,r3
    a618:	d811883a 	mov	r8,sp
    a61c:	00c02004 	movi	r3,128
    a620:	e0fe4d26 	beq	fp,r3,9f58 <___vfiprintf_internal_r+0x538>
    a624:	4cf9c83a 	sub	fp,r9,r19
    a628:	073e7b0e 	bge	zero,fp,a018 <___vfiprintf_internal_r+0x5f8>
    a62c:	01c00404 	movi	r7,16
    a630:	3f01900e 	bge	r7,fp,ac74 <___vfiprintf_internal_r+0x1254>
    a634:	00c00074 	movhi	r3,1
    a638:	18c68204 	addi	r3,r3,6664
    a63c:	d8c02415 	stw	r3,144(sp)
    a640:	034001c4 	movi	r13,7
    a644:	00000506 	br	a65c <___vfiprintf_internal_r+0xc3c>
    a648:	29000084 	addi	r4,r5,2
    a64c:	42000204 	addi	r8,r8,8
    a650:	180b883a 	mov	r5,r3
    a654:	e73ffc04 	addi	fp,fp,-16
    a658:	3f000d0e 	bge	r7,fp,a690 <___vfiprintf_internal_r+0xc70>
    a65c:	10800404 	addi	r2,r2,16
    a660:	28c00044 	addi	r3,r5,1
    a664:	45c00015 	stw	r23,0(r8)
    a668:	41c00115 	stw	r7,4(r8)
    a66c:	d8801c15 	stw	r2,112(sp)
    a670:	d8c01b15 	stw	r3,108(sp)
    a674:	68fff40e 	bge	r13,r3,a648 <___vfiprintf_internal_r+0xc28>
    a678:	1000101e 	bne	r2,zero,a6bc <___vfiprintf_internal_r+0xc9c>
    a67c:	e73ffc04 	addi	fp,fp,-16
    a680:	01000044 	movi	r4,1
    a684:	000b883a 	mov	r5,zero
    a688:	d811883a 	mov	r8,sp
    a68c:	3f3ff316 	blt	r7,fp,a65c <___vfiprintf_internal_r+0xc3c>
    a690:	da802417 	ldw	r10,144(sp)
    a694:	1705883a 	add	r2,r2,fp
    a698:	47000115 	stw	fp,4(r8)
    a69c:	42800015 	stw	r10,0(r8)
    a6a0:	d8801c15 	stw	r2,112(sp)
    a6a4:	d9001b15 	stw	r4,108(sp)
    a6a8:	00c001c4 	movi	r3,7
    a6ac:	19003616 	blt	r3,r4,a788 <___vfiprintf_internal_r+0xd68>
    a6b0:	42000204 	addi	r8,r8,8
    a6b4:	21000044 	addi	r4,r4,1
    a6b8:	003e5706 	br	a018 <___vfiprintf_internal_r+0x5f8>
    a6bc:	d9402117 	ldw	r5,132(sp)
    a6c0:	d9002017 	ldw	r4,128(sp)
    a6c4:	d9801a04 	addi	r6,sp,104
    a6c8:	d9c02b15 	stw	r7,172(sp)
    a6cc:	db402a15 	stw	r13,168(sp)
    a6d0:	000990c0 	call	990c <__sprint_r.part.0>
    a6d4:	d9c02b17 	ldw	r7,172(sp)
    a6d8:	db402a17 	ldw	r13,168(sp)
    a6dc:	1000241e 	bne	r2,zero,a770 <___vfiprintf_internal_r+0xd50>
    a6e0:	d9401b17 	ldw	r5,108(sp)
    a6e4:	d8801c17 	ldw	r2,112(sp)
    a6e8:	d811883a 	mov	r8,sp
    a6ec:	29000044 	addi	r4,r5,1
    a6f0:	003fd806 	br	a654 <___vfiprintf_internal_r+0xc34>
    a6f4:	d9401b17 	ldw	r5,108(sp)
    a6f8:	00c00074 	movhi	r3,1
    a6fc:	18c68604 	addi	r3,r3,6680
    a700:	d8c02415 	stw	r3,144(sp)
    a704:	29400044 	addi	r5,r5,1
    a708:	d8c02417 	ldw	r3,144(sp)
    a70c:	14c5883a 	add	r2,r2,r19
    a710:	44c00115 	stw	r19,4(r8)
    a714:	40c00015 	stw	r3,0(r8)
    a718:	d8801c15 	stw	r2,112(sp)
    a71c:	d9401b15 	stw	r5,108(sp)
    a720:	00c001c4 	movi	r3,7
    a724:	1940070e 	bge	r3,r5,a744 <___vfiprintf_internal_r+0xd24>
    a728:	103e4826 	beq	r2,zero,a04c <___vfiprintf_internal_r+0x62c>
    a72c:	d9402117 	ldw	r5,132(sp)
    a730:	d9002017 	ldw	r4,128(sp)
    a734:	d9801a04 	addi	r6,sp,104
    a738:	000990c0 	call	990c <__sprint_r.part.0>
    a73c:	10000c1e 	bne	r2,zero,a770 <___vfiprintf_internal_r+0xd50>
    a740:	d8801c17 	ldw	r2,112(sp)
    a744:	8c80010e 	bge	r17,r18,a74c <___vfiprintf_internal_r+0xd2c>
    a748:	9023883a 	mov	r17,r18
    a74c:	da802317 	ldw	r10,140(sp)
    a750:	5455883a 	add	r10,r10,r17
    a754:	da802315 	stw	r10,140(sp)
    a758:	103e4126 	beq	r2,zero,a060 <___vfiprintf_internal_r+0x640>
    a75c:	d9402117 	ldw	r5,132(sp)
    a760:	d9002017 	ldw	r4,128(sp)
    a764:	d9801a04 	addi	r6,sp,104
    a768:	000990c0 	call	990c <__sprint_r.part.0>
    a76c:	103e3c26 	beq	r2,zero,a060 <___vfiprintf_internal_r+0x640>
    a770:	dd002117 	ldw	r20,132(sp)
    a774:	a080030b 	ldhu	r2,12(r20)
    a778:	1080100c 	andi	r2,r2,64
    a77c:	1001231e 	bne	r2,zero,ac0c <___vfiprintf_internal_r+0x11ec>
    a780:	d8802317 	ldw	r2,140(sp)
    a784:	003d7b06 	br	9d74 <___vfiprintf_internal_r+0x354>
    a788:	1000991e 	bne	r2,zero,a9f0 <___vfiprintf_internal_r+0xfd0>
    a78c:	00c00044 	movi	r3,1
    a790:	9805883a 	mov	r2,r19
    a794:	dd400015 	stw	r21,0(sp)
    a798:	dcc00115 	stw	r19,4(sp)
    a79c:	dcc01c15 	stw	r19,112(sp)
    a7a0:	d8c01b15 	stw	r3,108(sp)
    a7a4:	d811883a 	mov	r8,sp
    a7a8:	42000204 	addi	r8,r8,8
    a7ac:	a2c0010c 	andi	r11,r20,4
    a7b0:	583fe426 	beq	r11,zero,a744 <___vfiprintf_internal_r+0xd24>
    a7b4:	8ca7c83a 	sub	r19,r17,r18
    a7b8:	04ffe20e 	bge	zero,r19,a744 <___vfiprintf_internal_r+0xd24>
    a7bc:	01c00404 	movi	r7,16
    a7c0:	3cffcc0e 	bge	r7,r19,a6f4 <___vfiprintf_internal_r+0xcd4>
    a7c4:	02800074 	movhi	r10,1
    a7c8:	52868604 	addi	r10,r10,6680
    a7cc:	d9001b17 	ldw	r4,108(sp)
    a7d0:	da802415 	stw	r10,144(sp)
    a7d4:	382b883a 	mov	r21,r7
    a7d8:	050001c4 	movi	r20,7
    a7dc:	df002017 	ldw	fp,128(sp)
    a7e0:	00000506 	br	a7f8 <___vfiprintf_internal_r+0xdd8>
    a7e4:	21400084 	addi	r5,r4,2
    a7e8:	42000204 	addi	r8,r8,8
    a7ec:	1809883a 	mov	r4,r3
    a7f0:	9cfffc04 	addi	r19,r19,-16
    a7f4:	acffc40e 	bge	r21,r19,a708 <___vfiprintf_internal_r+0xce8>
    a7f8:	10800404 	addi	r2,r2,16
    a7fc:	20c00044 	addi	r3,r4,1
    a800:	45800015 	stw	r22,0(r8)
    a804:	45400115 	stw	r21,4(r8)
    a808:	d8801c15 	stw	r2,112(sp)
    a80c:	d8c01b15 	stw	r3,108(sp)
    a810:	a0fff40e 	bge	r20,r3,a7e4 <___vfiprintf_internal_r+0xdc4>
    a814:	1000041e 	bne	r2,zero,a828 <___vfiprintf_internal_r+0xe08>
    a818:	01400044 	movi	r5,1
    a81c:	0009883a 	mov	r4,zero
    a820:	d811883a 	mov	r8,sp
    a824:	003ff206 	br	a7f0 <___vfiprintf_internal_r+0xdd0>
    a828:	d9402117 	ldw	r5,132(sp)
    a82c:	d9801a04 	addi	r6,sp,104
    a830:	e009883a 	mov	r4,fp
    a834:	000990c0 	call	990c <__sprint_r.part.0>
    a838:	103fcd1e 	bne	r2,zero,a770 <___vfiprintf_internal_r+0xd50>
    a83c:	d9001b17 	ldw	r4,108(sp)
    a840:	d8801c17 	ldw	r2,112(sp)
    a844:	d811883a 	mov	r8,sp
    a848:	21400044 	addi	r5,r4,1
    a84c:	003fe806 	br	a7f0 <___vfiprintf_internal_r+0xdd0>
    a850:	d9402117 	ldw	r5,132(sp)
    a854:	d9002017 	ldw	r4,128(sp)
    a858:	d9801a04 	addi	r6,sp,104
    a85c:	d9c02b15 	stw	r7,172(sp)
    a860:	db402a15 	stw	r13,168(sp)
    a864:	000990c0 	call	990c <__sprint_r.part.0>
    a868:	d9c02b17 	ldw	r7,172(sp)
    a86c:	db402a17 	ldw	r13,168(sp)
    a870:	103fbf1e 	bne	r2,zero,a770 <___vfiprintf_internal_r+0xd50>
    a874:	d9401b17 	ldw	r5,108(sp)
    a878:	d8801c17 	ldw	r2,112(sp)
    a87c:	d811883a 	mov	r8,sp
    a880:	29800044 	addi	r6,r5,1
    a884:	003dc406 	br	9f98 <___vfiprintf_internal_r+0x578>
    a888:	1000d21e 	bne	r2,zero,abd4 <___vfiprintf_internal_r+0x11b4>
    a88c:	d8c01d87 	ldb	r3,118(sp)
    a890:	18009526 	beq	r3,zero,aae8 <___vfiprintf_internal_r+0x10c8>
    a894:	00800044 	movi	r2,1
    a898:	d8c01d84 	addi	r3,sp,118
    a89c:	1009883a 	mov	r4,r2
    a8a0:	d8c00015 	stw	r3,0(sp)
    a8a4:	d8800115 	stw	r2,4(sp)
    a8a8:	d811883a 	mov	r8,sp
    a8ac:	200b883a 	mov	r5,r4
    a8b0:	42000204 	addi	r8,r8,8
    a8b4:	21000044 	addi	r4,r4,1
    a8b8:	003d9706 	br	9f18 <___vfiprintf_internal_r+0x4f8>
    a8bc:	d9001d04 	addi	r4,sp,116
    a8c0:	00800084 	movi	r2,2
    a8c4:	d9000015 	stw	r4,0(sp)
    a8c8:	d8800115 	stw	r2,4(sp)
    a8cc:	1809883a 	mov	r4,r3
    a8d0:	d811883a 	mov	r8,sp
    a8d4:	200b883a 	mov	r5,r4
    a8d8:	42000204 	addi	r8,r8,8
    a8dc:	21000044 	addi	r4,r4,1
    a8e0:	003f4e06 	br	a61c <___vfiprintf_internal_r+0xbfc>
    a8e4:	d8001d85 	stb	zero,118(sp)
    a8e8:	48005016 	blt	r9,zero,aa2c <___vfiprintf_internal_r+0x100c>
    a8ec:	00ffdfc4 	movi	r3,-129
    a8f0:	94c4b03a 	or	r2,r18,r19
    a8f4:	a0e8703a 	and	r20,r20,r3
    a8f8:	103d4426 	beq	r2,zero,9e0c <___vfiprintf_internal_r+0x3ec>
    a8fc:	0039883a 	mov	fp,zero
    a900:	d9002617 	ldw	r4,152(sp)
    a904:	dd401a04 	addi	r21,sp,104
    a908:	908003cc 	andi	r2,r18,15
    a90c:	9806973a 	slli	r3,r19,28
    a910:	2085883a 	add	r2,r4,r2
    a914:	9024d13a 	srli	r18,r18,4
    a918:	10800003 	ldbu	r2,0(r2)
    a91c:	9826d13a 	srli	r19,r19,4
    a920:	ad7fffc4 	addi	r21,r21,-1
    a924:	1ca4b03a 	or	r18,r3,r18
    a928:	a8800005 	stb	r2,0(r21)
    a92c:	94c4b03a 	or	r2,r18,r19
    a930:	103ff51e 	bne	r2,zero,a908 <___vfiprintf_internal_r+0xee8>
    a934:	003e5906 	br	a29c <___vfiprintf_internal_r+0x87c>
    a938:	d9402117 	ldw	r5,132(sp)
    a93c:	d9002017 	ldw	r4,128(sp)
    a940:	d9801a04 	addi	r6,sp,104
    a944:	000990c0 	call	990c <__sprint_r.part.0>
    a948:	103f891e 	bne	r2,zero,a770 <___vfiprintf_internal_r+0xd50>
    a94c:	d8801c17 	ldw	r2,112(sp)
    a950:	d811883a 	mov	r8,sp
    a954:	003f9506 	br	a7ac <___vfiprintf_internal_r+0xd8c>
    a958:	d9402117 	ldw	r5,132(sp)
    a95c:	d9002017 	ldw	r4,128(sp)
    a960:	d9801a04 	addi	r6,sp,104
    a964:	000990c0 	call	990c <__sprint_r.part.0>
    a968:	103f811e 	bne	r2,zero,a770 <___vfiprintf_internal_r+0xd50>
    a96c:	d811883a 	mov	r8,sp
    a970:	003ced06 	br	9d28 <___vfiprintf_internal_r+0x308>
    a974:	d9402117 	ldw	r5,132(sp)
    a978:	d9002017 	ldw	r4,128(sp)
    a97c:	d9801a04 	addi	r6,sp,104
    a980:	da402c15 	stw	r9,176(sp)
    a984:	db802a15 	stw	r14,168(sp)
    a988:	000990c0 	call	990c <__sprint_r.part.0>
    a98c:	da402c17 	ldw	r9,176(sp)
    a990:	db802a17 	ldw	r14,168(sp)
    a994:	103f761e 	bne	r2,zero,a770 <___vfiprintf_internal_r+0xd50>
    a998:	d9401b17 	ldw	r5,108(sp)
    a99c:	d8801c17 	ldw	r2,112(sp)
    a9a0:	d811883a 	mov	r8,sp
    a9a4:	29000044 	addi	r4,r5,1
    a9a8:	003d5b06 	br	9f18 <___vfiprintf_internal_r+0x4f8>
    a9ac:	d9402117 	ldw	r5,132(sp)
    a9b0:	d9002017 	ldw	r4,128(sp)
    a9b4:	d9801a04 	addi	r6,sp,104
    a9b8:	da402c15 	stw	r9,176(sp)
    a9bc:	000990c0 	call	990c <__sprint_r.part.0>
    a9c0:	da402c17 	ldw	r9,176(sp)
    a9c4:	103f6a1e 	bne	r2,zero,a770 <___vfiprintf_internal_r+0xd50>
    a9c8:	d9401b17 	ldw	r5,108(sp)
    a9cc:	d8801c17 	ldw	r2,112(sp)
    a9d0:	d811883a 	mov	r8,sp
    a9d4:	29000044 	addi	r4,r5,1
    a9d8:	003f1006 	br	a61c <___vfiprintf_internal_r+0xbfc>
    a9dc:	1000c31e 	bne	r2,zero,acec <___vfiprintf_internal_r+0x12cc>
    a9e0:	01000044 	movi	r4,1
    a9e4:	000b883a 	mov	r5,zero
    a9e8:	d811883a 	mov	r8,sp
    a9ec:	003f0d06 	br	a624 <___vfiprintf_internal_r+0xc04>
    a9f0:	d9402117 	ldw	r5,132(sp)
    a9f4:	d9002017 	ldw	r4,128(sp)
    a9f8:	d9801a04 	addi	r6,sp,104
    a9fc:	000990c0 	call	990c <__sprint_r.part.0>
    aa00:	103f5b1e 	bne	r2,zero,a770 <___vfiprintf_internal_r+0xd50>
    aa04:	d9001b17 	ldw	r4,108(sp)
    aa08:	d8801c17 	ldw	r2,112(sp)
    aa0c:	d811883a 	mov	r8,sp
    aa10:	21000044 	addi	r4,r4,1
    aa14:	003d8006 	br	a018 <___vfiprintf_internal_r+0x5f8>
    aa18:	01000074 	movhi	r4,1
    aa1c:	21062104 	addi	r4,r4,6276
    aa20:	d9002615 	stw	r4,152(sp)
    aa24:	d8c02215 	stw	r3,136(sp)
    aa28:	1029883a 	mov	r20,r2
    aa2c:	94c4b03a 	or	r2,r18,r19
    aa30:	103fb21e 	bne	r2,zero,a8fc <___vfiprintf_internal_r+0xedc>
    aa34:	0039883a 	mov	fp,zero
    aa38:	00800084 	movi	r2,2
    aa3c:	003e6b06 	br	a3ec <___vfiprintf_internal_r+0x9cc>
    aa40:	da802217 	ldw	r10,136(sp)
    aa44:	d8001d85 	stb	zero,118(sp)
    aa48:	0027883a 	mov	r19,zero
    aa4c:	50800104 	addi	r2,r10,4
    aa50:	54800017 	ldw	r18,0(r10)
    aa54:	483e6016 	blt	r9,zero,a3d8 <___vfiprintf_internal_r+0x9b8>
    aa58:	00ffdfc4 	movi	r3,-129
    aa5c:	d8802215 	stw	r2,136(sp)
    aa60:	a0e8703a 	and	r20,r20,r3
    aa64:	0039883a 	mov	fp,zero
    aa68:	903ebb26 	beq	r18,zero,a558 <___vfiprintf_internal_r+0xb38>
    aa6c:	00800244 	movi	r2,9
    aa70:	14bdee36 	bltu	r2,r18,a22c <___vfiprintf_internal_r+0x80c>
    aa74:	003eba06 	br	a560 <___vfiprintf_internal_r+0xb40>
    aa78:	00800c04 	movi	r2,48
    aa7c:	d8c01d45 	stb	r3,117(sp)
    aa80:	d8801d05 	stb	r2,116(sp)
    aa84:	d8001d85 	stb	zero,118(sp)
    aa88:	a0c00094 	ori	r3,r20,2
    aa8c:	4800a916 	blt	r9,zero,ad34 <___vfiprintf_internal_r+0x1314>
    aa90:	00bfdfc4 	movi	r2,-129
    aa94:	a096703a 	and	r11,r20,r2
    aa98:	5d000094 	ori	r20,r11,2
    aa9c:	0039883a 	mov	fp,zero
    aaa0:	003f9706 	br	a900 <___vfiprintf_internal_r+0xee0>
    aaa4:	8025883a 	mov	r18,r16
    aaa8:	003c2e06 	br	9b64 <___vfiprintf_internal_r+0x144>
    aaac:	00800074 	movhi	r2,1
    aab0:	10862104 	addi	r2,r2,6276
    aab4:	0039883a 	mov	fp,zero
    aab8:	d8802615 	stw	r2,152(sp)
    aabc:	003f9006 	br	a900 <___vfiprintf_internal_r+0xee0>
    aac0:	04a5c83a 	sub	r18,zero,r18
    aac4:	07000b44 	movi	fp,45
    aac8:	9004c03a 	cmpne	r2,r18,zero
    aacc:	04e7c83a 	sub	r19,zero,r19
    aad0:	df001d85 	stb	fp,118(sp)
    aad4:	98a7c83a 	sub	r19,r19,r2
    aad8:	48009f16 	blt	r9,zero,ad58 <___vfiprintf_internal_r+0x1338>
    aadc:	00bfdfc4 	movi	r2,-129
    aae0:	a0a8703a 	and	r20,r20,r2
    aae4:	003dd006 	br	a228 <___vfiprintf_internal_r+0x808>
    aae8:	70004c26 	beq	r14,zero,ac1c <___vfiprintf_internal_r+0x11fc>
    aaec:	00800084 	movi	r2,2
    aaf0:	d8c01d04 	addi	r3,sp,116
    aaf4:	d8c00015 	stw	r3,0(sp)
    aaf8:	d8800115 	stw	r2,4(sp)
    aafc:	01000044 	movi	r4,1
    ab00:	d811883a 	mov	r8,sp
    ab04:	003f7306 	br	a8d4 <___vfiprintf_internal_r+0xeb4>
    ab08:	a080100c 	andi	r2,r20,64
    ab0c:	da802217 	ldw	r10,136(sp)
    ab10:	103e0626 	beq	r2,zero,a32c <___vfiprintf_internal_r+0x90c>
    ab14:	5480000f 	ldh	r18,0(r10)
    ab18:	52800104 	addi	r10,r10,4
    ab1c:	da802215 	stw	r10,136(sp)
    ab20:	9027d7fa 	srai	r19,r18,31
    ab24:	9805883a 	mov	r2,r19
    ab28:	003db806 	br	a20c <___vfiprintf_internal_r+0x7ec>
    ab2c:	a080040c 	andi	r2,r20,16
    ab30:	1000091e 	bne	r2,zero,ab58 <___vfiprintf_internal_r+0x1138>
    ab34:	a2c0100c 	andi	r11,r20,64
    ab38:	58000726 	beq	r11,zero,ab58 <___vfiprintf_internal_r+0x1138>
    ab3c:	da802217 	ldw	r10,136(sp)
    ab40:	50800017 	ldw	r2,0(r10)
    ab44:	52800104 	addi	r10,r10,4
    ab48:	da802215 	stw	r10,136(sp)
    ab4c:	da802317 	ldw	r10,140(sp)
    ab50:	1280000d 	sth	r10,0(r2)
    ab54:	003be706 	br	9af4 <___vfiprintf_internal_r+0xd4>
    ab58:	da802217 	ldw	r10,136(sp)
    ab5c:	50800017 	ldw	r2,0(r10)
    ab60:	52800104 	addi	r10,r10,4
    ab64:	da802215 	stw	r10,136(sp)
    ab68:	da802317 	ldw	r10,140(sp)
    ab6c:	12800015 	stw	r10,0(r2)
    ab70:	003be006 	br	9af4 <___vfiprintf_internal_r+0xd4>
    ab74:	a080100c 	andi	r2,r20,64
    ab78:	da802217 	ldw	r10,136(sp)
    ab7c:	10003026 	beq	r2,zero,ac40 <___vfiprintf_internal_r+0x1220>
    ab80:	5480000b 	ldhu	r18,0(r10)
    ab84:	52800104 	addi	r10,r10,4
    ab88:	0027883a 	mov	r19,zero
    ab8c:	da802215 	stw	r10,136(sp)
    ab90:	003d8006 	br	a194 <___vfiprintf_internal_r+0x774>
    ab94:	80c00007 	ldb	r3,0(r16)
    ab98:	003c0006 	br	9b9c <___vfiprintf_internal_r+0x17c>
    ab9c:	a080100c 	andi	r2,r20,64
    aba0:	d8001d85 	stb	zero,118(sp)
    aba4:	da802217 	ldw	r10,136(sp)
    aba8:	1000201e 	bne	r2,zero,ac2c <___vfiprintf_internal_r+0x120c>
    abac:	50800104 	addi	r2,r10,4
    abb0:	54800017 	ldw	r18,0(r10)
    abb4:	0027883a 	mov	r19,zero
    abb8:	483def0e 	bge	r9,zero,a378 <___vfiprintf_internal_r+0x958>
    abbc:	94c6b03a 	or	r3,r18,r19
    abc0:	d8802215 	stw	r2,136(sp)
    abc4:	183d4e1e 	bne	r3,zero,a100 <___vfiprintf_internal_r+0x6e0>
    abc8:	0039883a 	mov	fp,zero
    abcc:	0005883a 	mov	r2,zero
    abd0:	003e0606 	br	a3ec <___vfiprintf_internal_r+0x9cc>
    abd4:	d9402117 	ldw	r5,132(sp)
    abd8:	d9002017 	ldw	r4,128(sp)
    abdc:	d9801a04 	addi	r6,sp,104
    abe0:	da402c15 	stw	r9,176(sp)
    abe4:	db802a15 	stw	r14,168(sp)
    abe8:	000990c0 	call	990c <__sprint_r.part.0>
    abec:	da402c17 	ldw	r9,176(sp)
    abf0:	db802a17 	ldw	r14,168(sp)
    abf4:	103ede1e 	bne	r2,zero,a770 <___vfiprintf_internal_r+0xd50>
    abf8:	d9401b17 	ldw	r5,108(sp)
    abfc:	d8801c17 	ldw	r2,112(sp)
    ac00:	d811883a 	mov	r8,sp
    ac04:	29000044 	addi	r4,r5,1
    ac08:	003e7406 	br	a5dc <___vfiprintf_internal_r+0xbbc>
    ac0c:	00bfffc4 	movi	r2,-1
    ac10:	003c5806 	br	9d74 <___vfiprintf_internal_r+0x354>
    ac14:	d811883a 	mov	r8,sp
    ac18:	003ee806 	br	a7bc <___vfiprintf_internal_r+0xd9c>
    ac1c:	000b883a 	mov	r5,zero
    ac20:	01000044 	movi	r4,1
    ac24:	d811883a 	mov	r8,sp
    ac28:	003e7c06 	br	a61c <___vfiprintf_internal_r+0xbfc>
    ac2c:	50800104 	addi	r2,r10,4
    ac30:	5480000b 	ldhu	r18,0(r10)
    ac34:	0027883a 	mov	r19,zero
    ac38:	483dcf0e 	bge	r9,zero,a378 <___vfiprintf_internal_r+0x958>
    ac3c:	003fdf06 	br	abbc <___vfiprintf_internal_r+0x119c>
    ac40:	54800017 	ldw	r18,0(r10)
    ac44:	52800104 	addi	r10,r10,4
    ac48:	0027883a 	mov	r19,zero
    ac4c:	da802215 	stw	r10,136(sp)
    ac50:	003d5006 	br	a194 <___vfiprintf_internal_r+0x774>
    ac54:	50800104 	addi	r2,r10,4
    ac58:	5480000b 	ldhu	r18,0(r10)
    ac5c:	0027883a 	mov	r19,zero
    ac60:	483f7d0e 	bge	r9,zero,aa58 <___vfiprintf_internal_r+0x1038>
    ac64:	003ddc06 	br	a3d8 <___vfiprintf_internal_r+0x9b8>
    ac68:	d8c02215 	stw	r3,136(sp)
    ac6c:	0039883a 	mov	fp,zero
    ac70:	003ddb06 	br	a3e0 <___vfiprintf_internal_r+0x9c0>
    ac74:	02800074 	movhi	r10,1
    ac78:	52868204 	addi	r10,r10,6664
    ac7c:	da802415 	stw	r10,144(sp)
    ac80:	003e8306 	br	a690 <___vfiprintf_internal_r+0xc70>
    ac84:	d8801c17 	ldw	r2,112(sp)
    ac88:	dd002117 	ldw	r20,132(sp)
    ac8c:	103eb926 	beq	r2,zero,a774 <___vfiprintf_internal_r+0xd54>
    ac90:	d9002017 	ldw	r4,128(sp)
    ac94:	d9801a04 	addi	r6,sp,104
    ac98:	a00b883a 	mov	r5,r20
    ac9c:	000990c0 	call	990c <__sprint_r.part.0>
    aca0:	003eb406 	br	a774 <___vfiprintf_internal_r+0xd54>
    aca4:	80c00043 	ldbu	r3,1(r16)
    aca8:	a5000814 	ori	r20,r20,32
    acac:	84000044 	addi	r16,r16,1
    acb0:	18c03fcc 	andi	r3,r3,255
    acb4:	18c0201c 	xori	r3,r3,128
    acb8:	18ffe004 	addi	r3,r3,-128
    acbc:	003bb706 	br	9b9c <___vfiprintf_internal_r+0x17c>
    acc0:	a809883a 	mov	r4,r21
    acc4:	d8c02a15 	stw	r3,168(sp)
    acc8:	da002b15 	stw	r8,172(sp)
    accc:	0002bd40 	call	2bd4 <strlen>
    acd0:	d8c02a17 	ldw	r3,168(sp)
    acd4:	1027883a 	mov	r19,r2
    acd8:	df001d83 	ldbu	fp,118(sp)
    acdc:	d8c02215 	stw	r3,136(sp)
    ace0:	0013883a 	mov	r9,zero
    ace4:	da002b17 	ldw	r8,172(sp)
    ace8:	003c4d06 	br	9e20 <___vfiprintf_internal_r+0x400>
    acec:	d9402117 	ldw	r5,132(sp)
    acf0:	d9002017 	ldw	r4,128(sp)
    acf4:	d9801a04 	addi	r6,sp,104
    acf8:	da402c15 	stw	r9,176(sp)
    acfc:	000990c0 	call	990c <__sprint_r.part.0>
    ad00:	da402c17 	ldw	r9,176(sp)
    ad04:	103e9a1e 	bne	r2,zero,a770 <___vfiprintf_internal_r+0xd50>
    ad08:	d9401b17 	ldw	r5,108(sp)
    ad0c:	d8801c17 	ldw	r2,112(sp)
    ad10:	d811883a 	mov	r8,sp
    ad14:	29000044 	addi	r4,r5,1
    ad18:	003e4206 	br	a624 <___vfiprintf_internal_r+0xc04>
    ad1c:	d9401b17 	ldw	r5,108(sp)
    ad20:	01000074 	movhi	r4,1
    ad24:	21068604 	addi	r4,r4,6680
    ad28:	d9002415 	stw	r4,144(sp)
    ad2c:	29400044 	addi	r5,r5,1
    ad30:	003c6d06 	br	9ee8 <___vfiprintf_internal_r+0x4c8>
    ad34:	0039883a 	mov	fp,zero
    ad38:	00800084 	movi	r2,2
    ad3c:	10803fcc 	andi	r2,r2,255
    ad40:	01000044 	movi	r4,1
    ad44:	11001e26 	beq	r2,r4,adc0 <___vfiprintf_internal_r+0x13a0>
    ad48:	01000084 	movi	r4,2
    ad4c:	11001e1e 	bne	r2,r4,adc8 <___vfiprintf_internal_r+0x13a8>
    ad50:	1829883a 	mov	r20,r3
    ad54:	003eea06 	br	a900 <___vfiprintf_internal_r+0xee0>
    ad58:	a007883a 	mov	r3,r20
    ad5c:	00800044 	movi	r2,1
    ad60:	003ff606 	br	ad3c <___vfiprintf_internal_r+0x131c>
    ad64:	00800184 	movi	r2,6
    ad68:	1240012e 	bgeu	r2,r9,ad70 <___vfiprintf_internal_r+0x1350>
    ad6c:	1013883a 	mov	r9,r2
    ad70:	4827883a 	mov	r19,r9
    ad74:	4825883a 	mov	r18,r9
    ad78:	48001516 	blt	r9,zero,add0 <___vfiprintf_internal_r+0x13b0>
    ad7c:	05400074 	movhi	r21,1
    ad80:	d8c02215 	stw	r3,136(sp)
    ad84:	ad462604 	addi	r21,r21,6296
    ad88:	003d1406 	br	a1dc <___vfiprintf_internal_r+0x7bc>
    ad8c:	02800074 	movhi	r10,1
    ad90:	52868204 	addi	r10,r10,6664
    ad94:	da802415 	stw	r10,144(sp)
    ad98:	200d883a 	mov	r6,r4
    ad9c:	003c9106 	br	9fe4 <___vfiprintf_internal_r+0x5c4>
    ada0:	5021883a 	mov	r16,r10
    ada4:	0013883a 	mov	r9,zero
    ada8:	003b7d06 	br	9ba0 <___vfiprintf_internal_r+0x180>
    adac:	4827883a 	mov	r19,r9
    adb0:	df001d83 	ldbu	fp,118(sp)
    adb4:	d8c02215 	stw	r3,136(sp)
    adb8:	0013883a 	mov	r9,zero
    adbc:	003c1806 	br	9e20 <___vfiprintf_internal_r+0x400>
    adc0:	1829883a 	mov	r20,r3
    adc4:	003d1806 	br	a228 <___vfiprintf_internal_r+0x808>
    adc8:	1829883a 	mov	r20,r3
    adcc:	003ccd06 	br	a104 <___vfiprintf_internal_r+0x6e4>
    add0:	0025883a 	mov	r18,zero
    add4:	003fe906 	br	ad7c <___vfiprintf_internal_r+0x135c>
    add8:	d8802217 	ldw	r2,136(sp)
    addc:	80c00043 	ldbu	r3,1(r16)
    ade0:	5021883a 	mov	r16,r10
    ade4:	12400017 	ldw	r9,0(r2)
    ade8:	10800104 	addi	r2,r2,4
    adec:	d8802215 	stw	r2,136(sp)
    adf0:	483faf0e 	bge	r9,zero,acb0 <___vfiprintf_internal_r+0x1290>
    adf4:	18c03fcc 	andi	r3,r3,255
    adf8:	18c0201c 	xori	r3,r3,128
    adfc:	027fffc4 	movi	r9,-1
    ae00:	18ffe004 	addi	r3,r3,-128
    ae04:	003b6506 	br	9b9c <___vfiprintf_internal_r+0x17c>
    ae08:	d9c01d85 	stb	r7,118(sp)
    ae0c:	003ca006 	br	a090 <___vfiprintf_internal_r+0x670>
    ae10:	d9c01d85 	stb	r7,118(sp)
    ae14:	003cad06 	br	a0cc <___vfiprintf_internal_r+0x6ac>
    ae18:	d9c01d85 	stb	r7,118(sp)
    ae1c:	003d7d06 	br	a414 <___vfiprintf_internal_r+0x9f4>
    ae20:	d9c01d85 	stb	r7,118(sp)
    ae24:	003d5f06 	br	a3a4 <___vfiprintf_internal_r+0x984>
    ae28:	a080004c 	andi	r2,r20,1
    ae2c:	0039883a 	mov	fp,zero
    ae30:	10000526 	beq	r2,zero,ae48 <___vfiprintf_internal_r+0x1428>
    ae34:	00800c04 	movi	r2,48
    ae38:	d88019c5 	stb	r2,103(sp)
    ae3c:	dcc02717 	ldw	r19,156(sp)
    ae40:	dd4019c4 	addi	r21,sp,103
    ae44:	003bf606 	br	9e20 <___vfiprintf_internal_r+0x400>
    ae48:	0027883a 	mov	r19,zero
    ae4c:	dd401a04 	addi	r21,sp,104
    ae50:	003bf306 	br	9e20 <___vfiprintf_internal_r+0x400>
    ae54:	d9c01d85 	stb	r7,118(sp)
    ae58:	003dc806 	br	a57c <___vfiprintf_internal_r+0xb5c>
    ae5c:	d9c01d85 	stb	r7,118(sp)
    ae60:	003d3a06 	br	a34c <___vfiprintf_internal_r+0x92c>
    ae64:	d9c01d85 	stb	r7,118(sp)
    ae68:	003d2a06 	br	a314 <___vfiprintf_internal_r+0x8f4>
    ae6c:	d9c01d85 	stb	r7,118(sp)
    ae70:	003cde06 	br	a1ec <___vfiprintf_internal_r+0x7cc>
    ae74:	d9c01d85 	stb	r7,118(sp)
    ae78:	003cbc06 	br	a16c <___vfiprintf_internal_r+0x74c>

0000ae7c <__vfiprintf_internal>:
    ae7c:	00800074 	movhi	r2,1
    ae80:	108d8304 	addi	r2,r2,13836
    ae84:	300f883a 	mov	r7,r6
    ae88:	280d883a 	mov	r6,r5
    ae8c:	200b883a 	mov	r5,r4
    ae90:	11000017 	ldw	r4,0(r2)
    ae94:	0009a201 	jmpi	9a20 <___vfiprintf_internal_r>

0000ae98 <__sbprintf>:
    ae98:	2880030b 	ldhu	r2,12(r5)
    ae9c:	2ac01917 	ldw	r11,100(r5)
    aea0:	2a80038b 	ldhu	r10,14(r5)
    aea4:	2a400717 	ldw	r9,28(r5)
    aea8:	2a000917 	ldw	r8,36(r5)
    aeac:	defee204 	addi	sp,sp,-1144
    aeb0:	00c10004 	movi	r3,1024
    aeb4:	dc011a15 	stw	r16,1128(sp)
    aeb8:	10bfff4c 	andi	r2,r2,65533
    aebc:	2821883a 	mov	r16,r5
    aec0:	d8cb883a 	add	r5,sp,r3
    aec4:	dc811c15 	stw	r18,1136(sp)
    aec8:	dc411b15 	stw	r17,1132(sp)
    aecc:	dfc11d15 	stw	ra,1140(sp)
    aed0:	2025883a 	mov	r18,r4
    aed4:	d881030d 	sth	r2,1036(sp)
    aed8:	dac11915 	stw	r11,1124(sp)
    aedc:	da81038d 	sth	r10,1038(sp)
    aee0:	da410715 	stw	r9,1052(sp)
    aee4:	da010915 	stw	r8,1060(sp)
    aee8:	dec10015 	stw	sp,1024(sp)
    aeec:	dec10415 	stw	sp,1040(sp)
    aef0:	d8c10215 	stw	r3,1032(sp)
    aef4:	d8c10515 	stw	r3,1044(sp)
    aef8:	d8010615 	stw	zero,1048(sp)
    aefc:	0009a200 	call	9a20 <___vfiprintf_internal_r>
    af00:	1023883a 	mov	r17,r2
    af04:	10000416 	blt	r2,zero,af18 <__sbprintf+0x80>
    af08:	d9410004 	addi	r5,sp,1024
    af0c:	9009883a 	mov	r4,r18
    af10:	0006b340 	call	6b34 <_fflush_r>
    af14:	10000d1e 	bne	r2,zero,af4c <__sbprintf+0xb4>
    af18:	d881030b 	ldhu	r2,1036(sp)
    af1c:	1080100c 	andi	r2,r2,64
    af20:	10000326 	beq	r2,zero,af30 <__sbprintf+0x98>
    af24:	8080030b 	ldhu	r2,12(r16)
    af28:	10801014 	ori	r2,r2,64
    af2c:	8080030d 	sth	r2,12(r16)
    af30:	8805883a 	mov	r2,r17
    af34:	dfc11d17 	ldw	ra,1140(sp)
    af38:	dc811c17 	ldw	r18,1136(sp)
    af3c:	dc411b17 	ldw	r17,1132(sp)
    af40:	dc011a17 	ldw	r16,1128(sp)
    af44:	dec11e04 	addi	sp,sp,1144
    af48:	f800283a 	ret
    af4c:	047fffc4 	movi	r17,-1
    af50:	003ff106 	br	af18 <__sbprintf+0x80>

0000af54 <_write_r>:
    af54:	defffd04 	addi	sp,sp,-12
    af58:	2805883a 	mov	r2,r5
    af5c:	dc000015 	stw	r16,0(sp)
    af60:	04000074 	movhi	r16,1
    af64:	dc400115 	stw	r17,4(sp)
    af68:	300b883a 	mov	r5,r6
    af6c:	84145804 	addi	r16,r16,20832
    af70:	2023883a 	mov	r17,r4
    af74:	380d883a 	mov	r6,r7
    af78:	1009883a 	mov	r4,r2
    af7c:	dfc00215 	stw	ra,8(sp)
    af80:	80000015 	stw	zero,0(r16)
    af84:	000f21c0 	call	f21c <write>
    af88:	00ffffc4 	movi	r3,-1
    af8c:	10c00526 	beq	r2,r3,afa4 <_write_r+0x50>
    af90:	dfc00217 	ldw	ra,8(sp)
    af94:	dc400117 	ldw	r17,4(sp)
    af98:	dc000017 	ldw	r16,0(sp)
    af9c:	dec00304 	addi	sp,sp,12
    afa0:	f800283a 	ret
    afa4:	80c00017 	ldw	r3,0(r16)
    afa8:	183ff926 	beq	r3,zero,af90 <_write_r+0x3c>
    afac:	88c00015 	stw	r3,0(r17)
    afb0:	003ff706 	br	af90 <_write_r+0x3c>

0000afb4 <_close_r>:
    afb4:	defffd04 	addi	sp,sp,-12
    afb8:	dc000015 	stw	r16,0(sp)
    afbc:	04000074 	movhi	r16,1
    afc0:	dc400115 	stw	r17,4(sp)
    afc4:	84145804 	addi	r16,r16,20832
    afc8:	2023883a 	mov	r17,r4
    afcc:	2809883a 	mov	r4,r5
    afd0:	dfc00215 	stw	ra,8(sp)
    afd4:	80000015 	stw	zero,0(r16)
    afd8:	000e9dc0 	call	e9dc <close>
    afdc:	00ffffc4 	movi	r3,-1
    afe0:	10c00526 	beq	r2,r3,aff8 <_close_r+0x44>
    afe4:	dfc00217 	ldw	ra,8(sp)
    afe8:	dc400117 	ldw	r17,4(sp)
    afec:	dc000017 	ldw	r16,0(sp)
    aff0:	dec00304 	addi	sp,sp,12
    aff4:	f800283a 	ret
    aff8:	80c00017 	ldw	r3,0(r16)
    affc:	183ff926 	beq	r3,zero,afe4 <_close_r+0x30>
    b000:	88c00015 	stw	r3,0(r17)
    b004:	003ff706 	br	afe4 <_close_r+0x30>

0000b008 <_calloc_r>:
    b008:	298b383a 	mul	r5,r5,r6
    b00c:	defffe04 	addi	sp,sp,-8
    b010:	dfc00115 	stw	ra,4(sp)
    b014:	dc000015 	stw	r16,0(sp)
    b018:	00022340 	call	2234 <_malloc_r>
    b01c:	10002926 	beq	r2,zero,b0c4 <_calloc_r+0xbc>
    b020:	11bfff17 	ldw	r6,-4(r2)
    b024:	1021883a 	mov	r16,r2
    b028:	00bfff04 	movi	r2,-4
    b02c:	308c703a 	and	r6,r6,r2
    b030:	00c00904 	movi	r3,36
    b034:	308d883a 	add	r6,r6,r2
    b038:	19801636 	bltu	r3,r6,b094 <_calloc_r+0x8c>
    b03c:	008004c4 	movi	r2,19
    b040:	11800b2e 	bgeu	r2,r6,b070 <_calloc_r+0x68>
    b044:	80000015 	stw	zero,0(r16)
    b048:	80000115 	stw	zero,4(r16)
    b04c:	008006c4 	movi	r2,27
    b050:	11801a2e 	bgeu	r2,r6,b0bc <_calloc_r+0xb4>
    b054:	80000215 	stw	zero,8(r16)
    b058:	80000315 	stw	zero,12(r16)
    b05c:	30c0151e 	bne	r6,r3,b0b4 <_calloc_r+0xac>
    b060:	80000415 	stw	zero,16(r16)
    b064:	80800604 	addi	r2,r16,24
    b068:	80000515 	stw	zero,20(r16)
    b06c:	00000106 	br	b074 <_calloc_r+0x6c>
    b070:	8005883a 	mov	r2,r16
    b074:	10000015 	stw	zero,0(r2)
    b078:	10000115 	stw	zero,4(r2)
    b07c:	10000215 	stw	zero,8(r2)
    b080:	8005883a 	mov	r2,r16
    b084:	dfc00117 	ldw	ra,4(sp)
    b088:	dc000017 	ldw	r16,0(sp)
    b08c:	dec00204 	addi	sp,sp,8
    b090:	f800283a 	ret
    b094:	000b883a 	mov	r5,zero
    b098:	8009883a 	mov	r4,r16
    b09c:	0007ff80 	call	7ff8 <memset>
    b0a0:	8005883a 	mov	r2,r16
    b0a4:	dfc00117 	ldw	ra,4(sp)
    b0a8:	dc000017 	ldw	r16,0(sp)
    b0ac:	dec00204 	addi	sp,sp,8
    b0b0:	f800283a 	ret
    b0b4:	80800404 	addi	r2,r16,16
    b0b8:	003fee06 	br	b074 <_calloc_r+0x6c>
    b0bc:	80800204 	addi	r2,r16,8
    b0c0:	003fec06 	br	b074 <_calloc_r+0x6c>
    b0c4:	0005883a 	mov	r2,zero
    b0c8:	003fee06 	br	b084 <_calloc_r+0x7c>

0000b0cc <_fclose_r>:
    b0cc:	28003926 	beq	r5,zero,b1b4 <_fclose_r+0xe8>
    b0d0:	defffc04 	addi	sp,sp,-16
    b0d4:	dc400115 	stw	r17,4(sp)
    b0d8:	dc000015 	stw	r16,0(sp)
    b0dc:	dfc00315 	stw	ra,12(sp)
    b0e0:	dc800215 	stw	r18,8(sp)
    b0e4:	2023883a 	mov	r17,r4
    b0e8:	2821883a 	mov	r16,r5
    b0ec:	20000226 	beq	r4,zero,b0f8 <_fclose_r+0x2c>
    b0f0:	20800e17 	ldw	r2,56(r4)
    b0f4:	10002726 	beq	r2,zero,b194 <_fclose_r+0xc8>
    b0f8:	8080030f 	ldh	r2,12(r16)
    b0fc:	1000071e 	bne	r2,zero,b11c <_fclose_r+0x50>
    b100:	0005883a 	mov	r2,zero
    b104:	dfc00317 	ldw	ra,12(sp)
    b108:	dc800217 	ldw	r18,8(sp)
    b10c:	dc400117 	ldw	r17,4(sp)
    b110:	dc000017 	ldw	r16,0(sp)
    b114:	dec00404 	addi	sp,sp,16
    b118:	f800283a 	ret
    b11c:	800b883a 	mov	r5,r16
    b120:	8809883a 	mov	r4,r17
    b124:	00069180 	call	6918 <__sflush_r>
    b128:	1025883a 	mov	r18,r2
    b12c:	80800b17 	ldw	r2,44(r16)
    b130:	10000426 	beq	r2,zero,b144 <_fclose_r+0x78>
    b134:	81400717 	ldw	r5,28(r16)
    b138:	8809883a 	mov	r4,r17
    b13c:	103ee83a 	callr	r2
    b140:	10001616 	blt	r2,zero,b19c <_fclose_r+0xd0>
    b144:	8080030b 	ldhu	r2,12(r16)
    b148:	1080200c 	andi	r2,r2,128
    b14c:	1000151e 	bne	r2,zero,b1a4 <_fclose_r+0xd8>
    b150:	81400c17 	ldw	r5,48(r16)
    b154:	28000526 	beq	r5,zero,b16c <_fclose_r+0xa0>
    b158:	80801004 	addi	r2,r16,64
    b15c:	28800226 	beq	r5,r2,b168 <_fclose_r+0x9c>
    b160:	8809883a 	mov	r4,r17
    b164:	00070840 	call	7084 <_free_r>
    b168:	80000c15 	stw	zero,48(r16)
    b16c:	81401117 	ldw	r5,68(r16)
    b170:	28000326 	beq	r5,zero,b180 <_fclose_r+0xb4>
    b174:	8809883a 	mov	r4,r17
    b178:	00070840 	call	7084 <_free_r>
    b17c:	80001115 	stw	zero,68(r16)
    b180:	0006f200 	call	6f20 <__sfp_lock_acquire>
    b184:	8000030d 	sth	zero,12(r16)
    b188:	0006f240 	call	6f24 <__sfp_lock_release>
    b18c:	9005883a 	mov	r2,r18
    b190:	003fdc06 	br	b104 <_fclose_r+0x38>
    b194:	0006f100 	call	6f10 <__sinit>
    b198:	003fd706 	br	b0f8 <_fclose_r+0x2c>
    b19c:	04bfffc4 	movi	r18,-1
    b1a0:	003fe806 	br	b144 <_fclose_r+0x78>
    b1a4:	81400417 	ldw	r5,16(r16)
    b1a8:	8809883a 	mov	r4,r17
    b1ac:	00070840 	call	7084 <_free_r>
    b1b0:	003fe706 	br	b150 <_fclose_r+0x84>
    b1b4:	0005883a 	mov	r2,zero
    b1b8:	f800283a 	ret

0000b1bc <fclose>:
    b1bc:	00800074 	movhi	r2,1
    b1c0:	108d8304 	addi	r2,r2,13836
    b1c4:	200b883a 	mov	r5,r4
    b1c8:	11000017 	ldw	r4,0(r2)
    b1cc:	000b0cc1 	jmpi	b0cc <_fclose_r>

0000b1d0 <__fputwc>:
    b1d0:	defff804 	addi	sp,sp,-32
    b1d4:	dcc00415 	stw	r19,16(sp)
    b1d8:	dc800315 	stw	r18,12(sp)
    b1dc:	dc000115 	stw	r16,4(sp)
    b1e0:	dfc00715 	stw	ra,28(sp)
    b1e4:	dd400615 	stw	r21,24(sp)
    b1e8:	dd000515 	stw	r20,20(sp)
    b1ec:	dc400215 	stw	r17,8(sp)
    b1f0:	2027883a 	mov	r19,r4
    b1f4:	2825883a 	mov	r18,r5
    b1f8:	3021883a 	mov	r16,r6
    b1fc:	0007a600 	call	7a60 <__locale_mb_cur_max>
    b200:	00c00044 	movi	r3,1
    b204:	10c03e26 	beq	r2,r3,b300 <__fputwc+0x130>
    b208:	81c01704 	addi	r7,r16,92
    b20c:	900d883a 	mov	r6,r18
    b210:	d80b883a 	mov	r5,sp
    b214:	9809883a 	mov	r4,r19
    b218:	000b6a00 	call	b6a0 <_wcrtomb_r>
    b21c:	1029883a 	mov	r20,r2
    b220:	00bfffc4 	movi	r2,-1
    b224:	a0802026 	beq	r20,r2,b2a8 <__fputwc+0xd8>
    b228:	d9400003 	ldbu	r5,0(sp)
    b22c:	a0001c26 	beq	r20,zero,b2a0 <__fputwc+0xd0>
    b230:	0023883a 	mov	r17,zero
    b234:	05400284 	movi	r21,10
    b238:	00000906 	br	b260 <__fputwc+0x90>
    b23c:	80800017 	ldw	r2,0(r16)
    b240:	11400005 	stb	r5,0(r2)
    b244:	80c00017 	ldw	r3,0(r16)
    b248:	18c00044 	addi	r3,r3,1
    b24c:	80c00015 	stw	r3,0(r16)
    b250:	8c400044 	addi	r17,r17,1
    b254:	dc45883a 	add	r2,sp,r17
    b258:	8d00112e 	bgeu	r17,r20,b2a0 <__fputwc+0xd0>
    b25c:	11400003 	ldbu	r5,0(r2)
    b260:	80c00217 	ldw	r3,8(r16)
    b264:	18ffffc4 	addi	r3,r3,-1
    b268:	80c00215 	stw	r3,8(r16)
    b26c:	183ff30e 	bge	r3,zero,b23c <__fputwc+0x6c>
    b270:	80800617 	ldw	r2,24(r16)
    b274:	18801916 	blt	r3,r2,b2dc <__fputwc+0x10c>
    b278:	80800017 	ldw	r2,0(r16)
    b27c:	11400005 	stb	r5,0(r2)
    b280:	80800017 	ldw	r2,0(r16)
    b284:	10c00003 	ldbu	r3,0(r2)
    b288:	10800044 	addi	r2,r2,1
    b28c:	1d402326 	beq	r3,r21,b31c <__fputwc+0x14c>
    b290:	80800015 	stw	r2,0(r16)
    b294:	8c400044 	addi	r17,r17,1
    b298:	dc45883a 	add	r2,sp,r17
    b29c:	8d3fef36 	bltu	r17,r20,b25c <__fputwc+0x8c>
    b2a0:	9005883a 	mov	r2,r18
    b2a4:	00000406 	br	b2b8 <__fputwc+0xe8>
    b2a8:	80c0030b 	ldhu	r3,12(r16)
    b2ac:	a005883a 	mov	r2,r20
    b2b0:	18c01014 	ori	r3,r3,64
    b2b4:	80c0030d 	sth	r3,12(r16)
    b2b8:	dfc00717 	ldw	ra,28(sp)
    b2bc:	dd400617 	ldw	r21,24(sp)
    b2c0:	dd000517 	ldw	r20,20(sp)
    b2c4:	dcc00417 	ldw	r19,16(sp)
    b2c8:	dc800317 	ldw	r18,12(sp)
    b2cc:	dc400217 	ldw	r17,8(sp)
    b2d0:	dc000117 	ldw	r16,4(sp)
    b2d4:	dec00804 	addi	sp,sp,32
    b2d8:	f800283a 	ret
    b2dc:	800d883a 	mov	r6,r16
    b2e0:	29403fcc 	andi	r5,r5,255
    b2e4:	9809883a 	mov	r4,r19
    b2e8:	000b5480 	call	b548 <__swbuf_r>
    b2ec:	10bfffe0 	cmpeqi	r2,r2,-1
    b2f0:	10803fcc 	andi	r2,r2,255
    b2f4:	103fd626 	beq	r2,zero,b250 <__fputwc+0x80>
    b2f8:	00bfffc4 	movi	r2,-1
    b2fc:	003fee06 	br	b2b8 <__fputwc+0xe8>
    b300:	90ffffc4 	addi	r3,r18,-1
    b304:	01003f84 	movi	r4,254
    b308:	20ffbf36 	bltu	r4,r3,b208 <__fputwc+0x38>
    b30c:	900b883a 	mov	r5,r18
    b310:	dc800005 	stb	r18,0(sp)
    b314:	1029883a 	mov	r20,r2
    b318:	003fc506 	br	b230 <__fputwc+0x60>
    b31c:	800d883a 	mov	r6,r16
    b320:	a80b883a 	mov	r5,r21
    b324:	9809883a 	mov	r4,r19
    b328:	000b5480 	call	b548 <__swbuf_r>
    b32c:	10bfffe0 	cmpeqi	r2,r2,-1
    b330:	003fef06 	br	b2f0 <__fputwc+0x120>

0000b334 <_fputwc_r>:
    b334:	3080030b 	ldhu	r2,12(r6)
    b338:	10c8000c 	andi	r3,r2,8192
    b33c:	1800051e 	bne	r3,zero,b354 <_fputwc_r+0x20>
    b340:	30c01917 	ldw	r3,100(r6)
    b344:	10880014 	ori	r2,r2,8192
    b348:	3080030d 	sth	r2,12(r6)
    b34c:	18880014 	ori	r2,r3,8192
    b350:	30801915 	stw	r2,100(r6)
    b354:	000b1d01 	jmpi	b1d0 <__fputwc>

0000b358 <fputwc>:
    b358:	00800074 	movhi	r2,1
    b35c:	defffc04 	addi	sp,sp,-16
    b360:	108d8304 	addi	r2,r2,13836
    b364:	dc000115 	stw	r16,4(sp)
    b368:	14000017 	ldw	r16,0(r2)
    b36c:	dc400215 	stw	r17,8(sp)
    b370:	dfc00315 	stw	ra,12(sp)
    b374:	2023883a 	mov	r17,r4
    b378:	80000226 	beq	r16,zero,b384 <fputwc+0x2c>
    b37c:	80800e17 	ldw	r2,56(r16)
    b380:	10001026 	beq	r2,zero,b3c4 <fputwc+0x6c>
    b384:	2880030b 	ldhu	r2,12(r5)
    b388:	10c8000c 	andi	r3,r2,8192
    b38c:	1800051e 	bne	r3,zero,b3a4 <fputwc+0x4c>
    b390:	28c01917 	ldw	r3,100(r5)
    b394:	10880014 	ori	r2,r2,8192
    b398:	2880030d 	sth	r2,12(r5)
    b39c:	18880014 	ori	r2,r3,8192
    b3a0:	28801915 	stw	r2,100(r5)
    b3a4:	280d883a 	mov	r6,r5
    b3a8:	8009883a 	mov	r4,r16
    b3ac:	880b883a 	mov	r5,r17
    b3b0:	dfc00317 	ldw	ra,12(sp)
    b3b4:	dc400217 	ldw	r17,8(sp)
    b3b8:	dc000117 	ldw	r16,4(sp)
    b3bc:	dec00404 	addi	sp,sp,16
    b3c0:	000b1d01 	jmpi	b1d0 <__fputwc>
    b3c4:	8009883a 	mov	r4,r16
    b3c8:	d9400015 	stw	r5,0(sp)
    b3cc:	0006f100 	call	6f10 <__sinit>
    b3d0:	d9400017 	ldw	r5,0(sp)
    b3d4:	003feb06 	br	b384 <fputwc+0x2c>

0000b3d8 <_fstat_r>:
    b3d8:	defffd04 	addi	sp,sp,-12
    b3dc:	2805883a 	mov	r2,r5
    b3e0:	dc000015 	stw	r16,0(sp)
    b3e4:	04000074 	movhi	r16,1
    b3e8:	dc400115 	stw	r17,4(sp)
    b3ec:	84145804 	addi	r16,r16,20832
    b3f0:	2023883a 	mov	r17,r4
    b3f4:	300b883a 	mov	r5,r6
    b3f8:	1009883a 	mov	r4,r2
    b3fc:	dfc00215 	stw	ra,8(sp)
    b400:	80000015 	stw	zero,0(r16)
    b404:	000eb140 	call	eb14 <fstat>
    b408:	00ffffc4 	movi	r3,-1
    b40c:	10c00526 	beq	r2,r3,b424 <_fstat_r+0x4c>
    b410:	dfc00217 	ldw	ra,8(sp)
    b414:	dc400117 	ldw	r17,4(sp)
    b418:	dc000017 	ldw	r16,0(sp)
    b41c:	dec00304 	addi	sp,sp,12
    b420:	f800283a 	ret
    b424:	80c00017 	ldw	r3,0(r16)
    b428:	183ff926 	beq	r3,zero,b410 <_fstat_r+0x38>
    b42c:	88c00015 	stw	r3,0(r17)
    b430:	003ff706 	br	b410 <_fstat_r+0x38>

0000b434 <_isatty_r>:
    b434:	defffd04 	addi	sp,sp,-12
    b438:	dc000015 	stw	r16,0(sp)
    b43c:	04000074 	movhi	r16,1
    b440:	dc400115 	stw	r17,4(sp)
    b444:	84145804 	addi	r16,r16,20832
    b448:	2023883a 	mov	r17,r4
    b44c:	2809883a 	mov	r4,r5
    b450:	dfc00215 	stw	ra,8(sp)
    b454:	80000015 	stw	zero,0(r16)
    b458:	000ec000 	call	ec00 <isatty>
    b45c:	00ffffc4 	movi	r3,-1
    b460:	10c00526 	beq	r2,r3,b478 <_isatty_r+0x44>
    b464:	dfc00217 	ldw	ra,8(sp)
    b468:	dc400117 	ldw	r17,4(sp)
    b46c:	dc000017 	ldw	r16,0(sp)
    b470:	dec00304 	addi	sp,sp,12
    b474:	f800283a 	ret
    b478:	80c00017 	ldw	r3,0(r16)
    b47c:	183ff926 	beq	r3,zero,b464 <_isatty_r+0x30>
    b480:	88c00015 	stw	r3,0(r17)
    b484:	003ff706 	br	b464 <_isatty_r+0x30>

0000b488 <_lseek_r>:
    b488:	defffd04 	addi	sp,sp,-12
    b48c:	2805883a 	mov	r2,r5
    b490:	dc000015 	stw	r16,0(sp)
    b494:	04000074 	movhi	r16,1
    b498:	dc400115 	stw	r17,4(sp)
    b49c:	300b883a 	mov	r5,r6
    b4a0:	84145804 	addi	r16,r16,20832
    b4a4:	2023883a 	mov	r17,r4
    b4a8:	380d883a 	mov	r6,r7
    b4ac:	1009883a 	mov	r4,r2
    b4b0:	dfc00215 	stw	ra,8(sp)
    b4b4:	80000015 	stw	zero,0(r16)
    b4b8:	000edcc0 	call	edcc <lseek>
    b4bc:	00ffffc4 	movi	r3,-1
    b4c0:	10c00526 	beq	r2,r3,b4d8 <_lseek_r+0x50>
    b4c4:	dfc00217 	ldw	ra,8(sp)
    b4c8:	dc400117 	ldw	r17,4(sp)
    b4cc:	dc000017 	ldw	r16,0(sp)
    b4d0:	dec00304 	addi	sp,sp,12
    b4d4:	f800283a 	ret
    b4d8:	80c00017 	ldw	r3,0(r16)
    b4dc:	183ff926 	beq	r3,zero,b4c4 <_lseek_r+0x3c>
    b4e0:	88c00015 	stw	r3,0(r17)
    b4e4:	003ff706 	br	b4c4 <_lseek_r+0x3c>

0000b4e8 <_read_r>:
    b4e8:	defffd04 	addi	sp,sp,-12
    b4ec:	2805883a 	mov	r2,r5
    b4f0:	dc000015 	stw	r16,0(sp)
    b4f4:	04000074 	movhi	r16,1
    b4f8:	dc400115 	stw	r17,4(sp)
    b4fc:	300b883a 	mov	r5,r6
    b500:	84145804 	addi	r16,r16,20832
    b504:	2023883a 	mov	r17,r4
    b508:	380d883a 	mov	r6,r7
    b50c:	1009883a 	mov	r4,r2
    b510:	dfc00215 	stw	ra,8(sp)
    b514:	80000015 	stw	zero,0(r16)
    b518:	000efa00 	call	efa0 <read>
    b51c:	00ffffc4 	movi	r3,-1
    b520:	10c00526 	beq	r2,r3,b538 <_read_r+0x50>
    b524:	dfc00217 	ldw	ra,8(sp)
    b528:	dc400117 	ldw	r17,4(sp)
    b52c:	dc000017 	ldw	r16,0(sp)
    b530:	dec00304 	addi	sp,sp,12
    b534:	f800283a 	ret
    b538:	80c00017 	ldw	r3,0(r16)
    b53c:	183ff926 	beq	r3,zero,b524 <_read_r+0x3c>
    b540:	88c00015 	stw	r3,0(r17)
    b544:	003ff706 	br	b524 <_read_r+0x3c>

0000b548 <__swbuf_r>:
    b548:	defffb04 	addi	sp,sp,-20
    b54c:	dcc00315 	stw	r19,12(sp)
    b550:	dc800215 	stw	r18,8(sp)
    b554:	dc000015 	stw	r16,0(sp)
    b558:	dfc00415 	stw	ra,16(sp)
    b55c:	dc400115 	stw	r17,4(sp)
    b560:	2025883a 	mov	r18,r4
    b564:	2827883a 	mov	r19,r5
    b568:	3021883a 	mov	r16,r6
    b56c:	20000226 	beq	r4,zero,b578 <__swbuf_r+0x30>
    b570:	20800e17 	ldw	r2,56(r4)
    b574:	10004226 	beq	r2,zero,b680 <__swbuf_r+0x138>
    b578:	80800617 	ldw	r2,24(r16)
    b57c:	8100030b 	ldhu	r4,12(r16)
    b580:	80800215 	stw	r2,8(r16)
    b584:	2080020c 	andi	r2,r4,8
    b588:	10003626 	beq	r2,zero,b664 <__swbuf_r+0x11c>
    b58c:	80c00417 	ldw	r3,16(r16)
    b590:	18003426 	beq	r3,zero,b664 <__swbuf_r+0x11c>
    b594:	2088000c 	andi	r2,r4,8192
    b598:	9c403fcc 	andi	r17,r19,255
    b59c:	10001a26 	beq	r2,zero,b608 <__swbuf_r+0xc0>
    b5a0:	80800017 	ldw	r2,0(r16)
    b5a4:	81000517 	ldw	r4,20(r16)
    b5a8:	10c7c83a 	sub	r3,r2,r3
    b5ac:	1900200e 	bge	r3,r4,b630 <__swbuf_r+0xe8>
    b5b0:	18c00044 	addi	r3,r3,1
    b5b4:	81000217 	ldw	r4,8(r16)
    b5b8:	11400044 	addi	r5,r2,1
    b5bc:	81400015 	stw	r5,0(r16)
    b5c0:	213fffc4 	addi	r4,r4,-1
    b5c4:	81000215 	stw	r4,8(r16)
    b5c8:	14c00005 	stb	r19,0(r2)
    b5cc:	80800517 	ldw	r2,20(r16)
    b5d0:	10c01e26 	beq	r2,r3,b64c <__swbuf_r+0x104>
    b5d4:	8080030b 	ldhu	r2,12(r16)
    b5d8:	1080004c 	andi	r2,r2,1
    b5dc:	10000226 	beq	r2,zero,b5e8 <__swbuf_r+0xa0>
    b5e0:	00800284 	movi	r2,10
    b5e4:	88801926 	beq	r17,r2,b64c <__swbuf_r+0x104>
    b5e8:	8805883a 	mov	r2,r17
    b5ec:	dfc00417 	ldw	ra,16(sp)
    b5f0:	dcc00317 	ldw	r19,12(sp)
    b5f4:	dc800217 	ldw	r18,8(sp)
    b5f8:	dc400117 	ldw	r17,4(sp)
    b5fc:	dc000017 	ldw	r16,0(sp)
    b600:	dec00504 	addi	sp,sp,20
    b604:	f800283a 	ret
    b608:	81401917 	ldw	r5,100(r16)
    b60c:	00b7ffc4 	movi	r2,-8193
    b610:	21080014 	ori	r4,r4,8192
    b614:	2884703a 	and	r2,r5,r2
    b618:	80801915 	stw	r2,100(r16)
    b61c:	80800017 	ldw	r2,0(r16)
    b620:	8100030d 	sth	r4,12(r16)
    b624:	81000517 	ldw	r4,20(r16)
    b628:	10c7c83a 	sub	r3,r2,r3
    b62c:	193fe016 	blt	r3,r4,b5b0 <__swbuf_r+0x68>
    b630:	800b883a 	mov	r5,r16
    b634:	9009883a 	mov	r4,r18
    b638:	0006b340 	call	6b34 <_fflush_r>
    b63c:	1000071e 	bne	r2,zero,b65c <__swbuf_r+0x114>
    b640:	80800017 	ldw	r2,0(r16)
    b644:	00c00044 	movi	r3,1
    b648:	003fda06 	br	b5b4 <__swbuf_r+0x6c>
    b64c:	800b883a 	mov	r5,r16
    b650:	9009883a 	mov	r4,r18
    b654:	0006b340 	call	6b34 <_fflush_r>
    b658:	103fe326 	beq	r2,zero,b5e8 <__swbuf_r+0xa0>
    b65c:	00bfffc4 	movi	r2,-1
    b660:	003fe206 	br	b5ec <__swbuf_r+0xa4>
    b664:	800b883a 	mov	r5,r16
    b668:	9009883a 	mov	r4,r18
    b66c:	0004f3c0 	call	4f3c <__swsetup_r>
    b670:	103ffa1e 	bne	r2,zero,b65c <__swbuf_r+0x114>
    b674:	8100030b 	ldhu	r4,12(r16)
    b678:	80c00417 	ldw	r3,16(r16)
    b67c:	003fc506 	br	b594 <__swbuf_r+0x4c>
    b680:	0006f100 	call	6f10 <__sinit>
    b684:	003fbc06 	br	b578 <__swbuf_r+0x30>

0000b688 <__swbuf>:
    b688:	00800074 	movhi	r2,1
    b68c:	108d8304 	addi	r2,r2,13836
    b690:	280d883a 	mov	r6,r5
    b694:	200b883a 	mov	r5,r4
    b698:	11000017 	ldw	r4,0(r2)
    b69c:	000b5481 	jmpi	b548 <__swbuf_r>

0000b6a0 <_wcrtomb_r>:
    b6a0:	defff604 	addi	sp,sp,-40
    b6a4:	00800074 	movhi	r2,1
    b6a8:	dc800815 	stw	r18,32(sp)
    b6ac:	dc400715 	stw	r17,28(sp)
    b6b0:	dc000615 	stw	r16,24(sp)
    b6b4:	108d8504 	addi	r2,r2,13844
    b6b8:	dfc00915 	stw	ra,36(sp)
    b6bc:	2021883a 	mov	r16,r4
    b6c0:	3823883a 	mov	r17,r7
    b6c4:	14800017 	ldw	r18,0(r2)
    b6c8:	28001426 	beq	r5,zero,b71c <_wcrtomb_r+0x7c>
    b6cc:	d9400415 	stw	r5,16(sp)
    b6d0:	d9800515 	stw	r6,20(sp)
    b6d4:	0007a540 	call	7a54 <__locale_charset>
    b6d8:	d9800517 	ldw	r6,20(sp)
    b6dc:	d9400417 	ldw	r5,16(sp)
    b6e0:	100f883a 	mov	r7,r2
    b6e4:	dc400015 	stw	r17,0(sp)
    b6e8:	8009883a 	mov	r4,r16
    b6ec:	903ee83a 	callr	r18
    b6f0:	00ffffc4 	movi	r3,-1
    b6f4:	10c0031e 	bne	r2,r3,b704 <_wcrtomb_r+0x64>
    b6f8:	88000015 	stw	zero,0(r17)
    b6fc:	00c02284 	movi	r3,138
    b700:	80c00015 	stw	r3,0(r16)
    b704:	dfc00917 	ldw	ra,36(sp)
    b708:	dc800817 	ldw	r18,32(sp)
    b70c:	dc400717 	ldw	r17,28(sp)
    b710:	dc000617 	ldw	r16,24(sp)
    b714:	dec00a04 	addi	sp,sp,40
    b718:	f800283a 	ret
    b71c:	0007a540 	call	7a54 <__locale_charset>
    b720:	100f883a 	mov	r7,r2
    b724:	dc400015 	stw	r17,0(sp)
    b728:	000d883a 	mov	r6,zero
    b72c:	d9400104 	addi	r5,sp,4
    b730:	8009883a 	mov	r4,r16
    b734:	903ee83a 	callr	r18
    b738:	003fed06 	br	b6f0 <_wcrtomb_r+0x50>

0000b73c <wcrtomb>:
    b73c:	defff604 	addi	sp,sp,-40
    b740:	00800074 	movhi	r2,1
    b744:	dc800615 	stw	r18,24(sp)
    b748:	dc400515 	stw	r17,20(sp)
    b74c:	108d8304 	addi	r2,r2,13836
    b750:	dfc00915 	stw	ra,36(sp)
    b754:	dd000815 	stw	r20,32(sp)
    b758:	dcc00715 	stw	r19,28(sp)
    b75c:	dc000415 	stw	r16,16(sp)
    b760:	3025883a 	mov	r18,r6
    b764:	14400017 	ldw	r17,0(r2)
    b768:	20001926 	beq	r4,zero,b7d0 <wcrtomb+0x94>
    b76c:	00800074 	movhi	r2,1
    b770:	108d8504 	addi	r2,r2,13844
    b774:	15000017 	ldw	r20,0(r2)
    b778:	2021883a 	mov	r16,r4
    b77c:	2827883a 	mov	r19,r5
    b780:	0007a540 	call	7a54 <__locale_charset>
    b784:	100f883a 	mov	r7,r2
    b788:	dc800015 	stw	r18,0(sp)
    b78c:	980d883a 	mov	r6,r19
    b790:	800b883a 	mov	r5,r16
    b794:	8809883a 	mov	r4,r17
    b798:	a03ee83a 	callr	r20
    b79c:	00ffffc4 	movi	r3,-1
    b7a0:	10c0031e 	bne	r2,r3,b7b0 <wcrtomb+0x74>
    b7a4:	90000015 	stw	zero,0(r18)
    b7a8:	00c02284 	movi	r3,138
    b7ac:	88c00015 	stw	r3,0(r17)
    b7b0:	dfc00917 	ldw	ra,36(sp)
    b7b4:	dd000817 	ldw	r20,32(sp)
    b7b8:	dcc00717 	ldw	r19,28(sp)
    b7bc:	dc800617 	ldw	r18,24(sp)
    b7c0:	dc400517 	ldw	r17,20(sp)
    b7c4:	dc000417 	ldw	r16,16(sp)
    b7c8:	dec00a04 	addi	sp,sp,40
    b7cc:	f800283a 	ret
    b7d0:	00800074 	movhi	r2,1
    b7d4:	108d8504 	addi	r2,r2,13844
    b7d8:	14000017 	ldw	r16,0(r2)
    b7dc:	0007a540 	call	7a54 <__locale_charset>
    b7e0:	100f883a 	mov	r7,r2
    b7e4:	dc800015 	stw	r18,0(sp)
    b7e8:	000d883a 	mov	r6,zero
    b7ec:	d9400104 	addi	r5,sp,4
    b7f0:	8809883a 	mov	r4,r17
    b7f4:	803ee83a 	callr	r16
    b7f8:	003fe806 	br	b79c <wcrtomb+0x60>

0000b7fc <__ascii_wctomb>:
    b7fc:	28000526 	beq	r5,zero,b814 <__ascii_wctomb+0x18>
    b800:	00803fc4 	movi	r2,255
    b804:	11800536 	bltu	r2,r6,b81c <__ascii_wctomb+0x20>
    b808:	29800005 	stb	r6,0(r5)
    b80c:	00800044 	movi	r2,1
    b810:	f800283a 	ret
    b814:	0005883a 	mov	r2,zero
    b818:	f800283a 	ret
    b81c:	00802284 	movi	r2,138
    b820:	20800015 	stw	r2,0(r4)
    b824:	00bfffc4 	movi	r2,-1
    b828:	f800283a 	ret

0000b82c <_wctomb_r>:
    b82c:	00800074 	movhi	r2,1
    b830:	defff904 	addi	sp,sp,-28
    b834:	108d8504 	addi	r2,r2,13844
    b838:	dfc00615 	stw	ra,24(sp)
    b83c:	dc400515 	stw	r17,20(sp)
    b840:	dc000415 	stw	r16,16(sp)
    b844:	3823883a 	mov	r17,r7
    b848:	14000017 	ldw	r16,0(r2)
    b84c:	d9000115 	stw	r4,4(sp)
    b850:	d9400215 	stw	r5,8(sp)
    b854:	d9800315 	stw	r6,12(sp)
    b858:	0007a540 	call	7a54 <__locale_charset>
    b85c:	d9800317 	ldw	r6,12(sp)
    b860:	d9400217 	ldw	r5,8(sp)
    b864:	d9000117 	ldw	r4,4(sp)
    b868:	100f883a 	mov	r7,r2
    b86c:	dc400015 	stw	r17,0(sp)
    b870:	803ee83a 	callr	r16
    b874:	dfc00617 	ldw	ra,24(sp)
    b878:	dc400517 	ldw	r17,20(sp)
    b87c:	dc000417 	ldw	r16,16(sp)
    b880:	dec00704 	addi	sp,sp,28
    b884:	f800283a 	ret

0000b888 <__udivdi3>:
    b888:	defff504 	addi	sp,sp,-44
    b88c:	dcc00415 	stw	r19,16(sp)
    b890:	dc000115 	stw	r16,4(sp)
    b894:	dfc00a15 	stw	ra,40(sp)
    b898:	df000915 	stw	fp,36(sp)
    b89c:	ddc00815 	stw	r23,32(sp)
    b8a0:	dd800715 	stw	r22,28(sp)
    b8a4:	dd400615 	stw	r21,24(sp)
    b8a8:	dd000515 	stw	r20,20(sp)
    b8ac:	dc800315 	stw	r18,12(sp)
    b8b0:	dc400215 	stw	r17,8(sp)
    b8b4:	2027883a 	mov	r19,r4
    b8b8:	2821883a 	mov	r16,r5
    b8bc:	3800411e 	bne	r7,zero,b9c4 <__udivdi3+0x13c>
    b8c0:	3023883a 	mov	r17,r6
    b8c4:	2025883a 	mov	r18,r4
    b8c8:	2980522e 	bgeu	r5,r6,ba14 <__udivdi3+0x18c>
    b8cc:	00bfffd4 	movui	r2,65535
    b8d0:	282d883a 	mov	r22,r5
    b8d4:	1180a836 	bltu	r2,r6,bb78 <__udivdi3+0x2f0>
    b8d8:	00803fc4 	movi	r2,255
    b8dc:	1185803a 	cmpltu	r2,r2,r6
    b8e0:	100490fa 	slli	r2,r2,3
    b8e4:	3086d83a 	srl	r3,r6,r2
    b8e8:	01000074 	movhi	r4,1
    b8ec:	21068a04 	addi	r4,r4,6696
    b8f0:	20c7883a 	add	r3,r4,r3
    b8f4:	18c00003 	ldbu	r3,0(r3)
    b8f8:	1885883a 	add	r2,r3,r2
    b8fc:	00c00804 	movi	r3,32
    b900:	1887c83a 	sub	r3,r3,r2
    b904:	18000526 	beq	r3,zero,b91c <__udivdi3+0x94>
    b908:	80e0983a 	sll	r16,r16,r3
    b90c:	9884d83a 	srl	r2,r19,r2
    b910:	30e2983a 	sll	r17,r6,r3
    b914:	98e4983a 	sll	r18,r19,r3
    b918:	142cb03a 	or	r22,r2,r16
    b91c:	882ad43a 	srli	r21,r17,16
    b920:	b009883a 	mov	r4,r22
    b924:	8d3fffcc 	andi	r20,r17,65535
    b928:	a80b883a 	mov	r5,r21
    b92c:	00021b40 	call	21b4 <__umodsi3>
    b930:	b009883a 	mov	r4,r22
    b934:	a80b883a 	mov	r5,r21
    b938:	1027883a 	mov	r19,r2
    b93c:	00021500 	call	2150 <__udivsi3>
    b940:	102d883a 	mov	r22,r2
    b944:	9826943a 	slli	r19,r19,16
    b948:	9004d43a 	srli	r2,r18,16
    b94c:	a5a1383a 	mul	r16,r20,r22
    b950:	14c4b03a 	or	r2,r2,r19
    b954:	1400052e 	bgeu	r2,r16,b96c <__udivdi3+0xe4>
    b958:	1445883a 	add	r2,r2,r17
    b95c:	b0ffffc4 	addi	r3,r22,-1
    b960:	14400136 	bltu	r2,r17,b968 <__udivdi3+0xe0>
    b964:	14012336 	bltu	r2,r16,bdf4 <__udivdi3+0x56c>
    b968:	182d883a 	mov	r22,r3
    b96c:	1421c83a 	sub	r16,r2,r16
    b970:	a80b883a 	mov	r5,r21
    b974:	8009883a 	mov	r4,r16
    b978:	00021b40 	call	21b4 <__umodsi3>
    b97c:	1027883a 	mov	r19,r2
    b980:	a80b883a 	mov	r5,r21
    b984:	8009883a 	mov	r4,r16
    b988:	00021500 	call	2150 <__udivsi3>
    b98c:	9826943a 	slli	r19,r19,16
    b990:	a0a9383a 	mul	r20,r20,r2
    b994:	94bfffcc 	andi	r18,r18,65535
    b998:	94e4b03a 	or	r18,r18,r19
    b99c:	9500052e 	bgeu	r18,r20,b9b4 <__udivdi3+0x12c>
    b9a0:	8ca5883a 	add	r18,r17,r18
    b9a4:	10ffffc4 	addi	r3,r2,-1
    b9a8:	9440f136 	bltu	r18,r17,bd70 <__udivdi3+0x4e8>
    b9ac:	9500f02e 	bgeu	r18,r20,bd70 <__udivdi3+0x4e8>
    b9b0:	10bfff84 	addi	r2,r2,-2
    b9b4:	b00c943a 	slli	r6,r22,16
    b9b8:	0007883a 	mov	r3,zero
    b9bc:	3084b03a 	or	r2,r6,r2
    b9c0:	00005906 	br	bb28 <__udivdi3+0x2a0>
    b9c4:	29c05636 	bltu	r5,r7,bb20 <__udivdi3+0x298>
    b9c8:	00bfffd4 	movui	r2,65535
    b9cc:	11c0622e 	bgeu	r2,r7,bb58 <__udivdi3+0x2d0>
    b9d0:	00804034 	movhi	r2,256
    b9d4:	10bfffc4 	addi	r2,r2,-1
    b9d8:	11c0ee36 	bltu	r2,r7,bd94 <__udivdi3+0x50c>
    b9dc:	00800404 	movi	r2,16
    b9e0:	3886d83a 	srl	r3,r7,r2
    b9e4:	01000074 	movhi	r4,1
    b9e8:	21068a04 	addi	r4,r4,6696
    b9ec:	20c7883a 	add	r3,r4,r3
    b9f0:	18c00003 	ldbu	r3,0(r3)
    b9f4:	05400804 	movi	r21,32
    b9f8:	1885883a 	add	r2,r3,r2
    b9fc:	a8abc83a 	sub	r21,r21,r2
    ba00:	a800621e 	bne	r21,zero,bb8c <__udivdi3+0x304>
    ba04:	3c00e936 	bltu	r7,r16,bdac <__udivdi3+0x524>
    ba08:	9985403a 	cmpgeu	r2,r19,r6
    ba0c:	0007883a 	mov	r3,zero
    ba10:	00004506 	br	bb28 <__udivdi3+0x2a0>
    ba14:	3000041e 	bne	r6,zero,ba28 <__udivdi3+0x1a0>
    ba18:	000b883a 	mov	r5,zero
    ba1c:	01000044 	movi	r4,1
    ba20:	00021500 	call	2150 <__udivsi3>
    ba24:	1023883a 	mov	r17,r2
    ba28:	00bfffd4 	movui	r2,65535
    ba2c:	14404e2e 	bgeu	r2,r17,bb68 <__udivdi3+0x2e0>
    ba30:	00804034 	movhi	r2,256
    ba34:	10bfffc4 	addi	r2,r2,-1
    ba38:	1440d836 	bltu	r2,r17,bd9c <__udivdi3+0x514>
    ba3c:	00800404 	movi	r2,16
    ba40:	8886d83a 	srl	r3,r17,r2
    ba44:	01000074 	movhi	r4,1
    ba48:	21068a04 	addi	r4,r4,6696
    ba4c:	20c7883a 	add	r3,r4,r3
    ba50:	18c00003 	ldbu	r3,0(r3)
    ba54:	1885883a 	add	r2,r3,r2
    ba58:	00c00804 	movi	r3,32
    ba5c:	1887c83a 	sub	r3,r3,r2
    ba60:	18008f1e 	bne	r3,zero,bca0 <__udivdi3+0x418>
    ba64:	882ad43a 	srli	r21,r17,16
    ba68:	8461c83a 	sub	r16,r16,r17
    ba6c:	8d3fffcc 	andi	r20,r17,65535
    ba70:	00c00044 	movi	r3,1
    ba74:	8009883a 	mov	r4,r16
    ba78:	a80b883a 	mov	r5,r21
    ba7c:	d8c00015 	stw	r3,0(sp)
    ba80:	00021b40 	call	21b4 <__umodsi3>
    ba84:	8009883a 	mov	r4,r16
    ba88:	a80b883a 	mov	r5,r21
    ba8c:	1027883a 	mov	r19,r2
    ba90:	00021500 	call	2150 <__udivsi3>
    ba94:	9826943a 	slli	r19,r19,16
    ba98:	9008d43a 	srli	r4,r18,16
    ba9c:	1521383a 	mul	r16,r2,r20
    baa0:	102d883a 	mov	r22,r2
    baa4:	24c8b03a 	or	r4,r4,r19
    baa8:	d8c00017 	ldw	r3,0(sp)
    baac:	2400052e 	bgeu	r4,r16,bac4 <__udivdi3+0x23c>
    bab0:	2449883a 	add	r4,r4,r17
    bab4:	b0bfffc4 	addi	r2,r22,-1
    bab8:	24400136 	bltu	r4,r17,bac0 <__udivdi3+0x238>
    babc:	2400ca36 	bltu	r4,r16,bde8 <__udivdi3+0x560>
    bac0:	102d883a 	mov	r22,r2
    bac4:	2421c83a 	sub	r16,r4,r16
    bac8:	a80b883a 	mov	r5,r21
    bacc:	8009883a 	mov	r4,r16
    bad0:	d8c00015 	stw	r3,0(sp)
    bad4:	00021b40 	call	21b4 <__umodsi3>
    bad8:	1027883a 	mov	r19,r2
    badc:	a80b883a 	mov	r5,r21
    bae0:	8009883a 	mov	r4,r16
    bae4:	00021500 	call	2150 <__udivsi3>
    bae8:	9826943a 	slli	r19,r19,16
    baec:	1529383a 	mul	r20,r2,r20
    baf0:	94bfffcc 	andi	r18,r18,65535
    baf4:	94e4b03a 	or	r18,r18,r19
    baf8:	d8c00017 	ldw	r3,0(sp)
    bafc:	9500052e 	bgeu	r18,r20,bb14 <__udivdi3+0x28c>
    bb00:	8ca5883a 	add	r18,r17,r18
    bb04:	113fffc4 	addi	r4,r2,-1
    bb08:	94409736 	bltu	r18,r17,bd68 <__udivdi3+0x4e0>
    bb0c:	9500962e 	bgeu	r18,r20,bd68 <__udivdi3+0x4e0>
    bb10:	10bfff84 	addi	r2,r2,-2
    bb14:	b00c943a 	slli	r6,r22,16
    bb18:	3084b03a 	or	r2,r6,r2
    bb1c:	00000206 	br	bb28 <__udivdi3+0x2a0>
    bb20:	0007883a 	mov	r3,zero
    bb24:	0005883a 	mov	r2,zero
    bb28:	dfc00a17 	ldw	ra,40(sp)
    bb2c:	df000917 	ldw	fp,36(sp)
    bb30:	ddc00817 	ldw	r23,32(sp)
    bb34:	dd800717 	ldw	r22,28(sp)
    bb38:	dd400617 	ldw	r21,24(sp)
    bb3c:	dd000517 	ldw	r20,20(sp)
    bb40:	dcc00417 	ldw	r19,16(sp)
    bb44:	dc800317 	ldw	r18,12(sp)
    bb48:	dc400217 	ldw	r17,8(sp)
    bb4c:	dc000117 	ldw	r16,4(sp)
    bb50:	dec00b04 	addi	sp,sp,44
    bb54:	f800283a 	ret
    bb58:	00803fc4 	movi	r2,255
    bb5c:	11c5803a 	cmpltu	r2,r2,r7
    bb60:	100490fa 	slli	r2,r2,3
    bb64:	003f9e06 	br	b9e0 <__udivdi3+0x158>
    bb68:	00803fc4 	movi	r2,255
    bb6c:	1445803a 	cmpltu	r2,r2,r17
    bb70:	100490fa 	slli	r2,r2,3
    bb74:	003fb206 	br	ba40 <__udivdi3+0x1b8>
    bb78:	00804034 	movhi	r2,256
    bb7c:	10bfffc4 	addi	r2,r2,-1
    bb80:	11808836 	bltu	r2,r6,bda4 <__udivdi3+0x51c>
    bb84:	00800404 	movi	r2,16
    bb88:	003f5606 	br	b8e4 <__udivdi3+0x5c>
    bb8c:	30aed83a 	srl	r23,r6,r2
    bb90:	3d4e983a 	sll	r7,r7,r21
    bb94:	80acd83a 	srl	r22,r16,r2
    bb98:	9884d83a 	srl	r2,r19,r2
    bb9c:	3deeb03a 	or	r23,r7,r23
    bba0:	b824d43a 	srli	r18,r23,16
    bba4:	8560983a 	sll	r16,r16,r21
    bba8:	b009883a 	mov	r4,r22
    bbac:	900b883a 	mov	r5,r18
    bbb0:	3568983a 	sll	r20,r6,r21
    bbb4:	1420b03a 	or	r16,r2,r16
    bbb8:	00021b40 	call	21b4 <__umodsi3>
    bbbc:	b009883a 	mov	r4,r22
    bbc0:	900b883a 	mov	r5,r18
    bbc4:	1023883a 	mov	r17,r2
    bbc8:	00021500 	call	2150 <__udivsi3>
    bbcc:	8808943a 	slli	r4,r17,16
    bbd0:	bf3fffcc 	andi	fp,r23,65535
    bbd4:	8006d43a 	srli	r3,r16,16
    bbd8:	e0a3383a 	mul	r17,fp,r2
    bbdc:	100d883a 	mov	r6,r2
    bbe0:	1906b03a 	or	r3,r3,r4
    bbe4:	1c40042e 	bgeu	r3,r17,bbf8 <__udivdi3+0x370>
    bbe8:	1dc7883a 	add	r3,r3,r23
    bbec:	10bfffc4 	addi	r2,r2,-1
    bbf0:	1dc0752e 	bgeu	r3,r23,bdc8 <__udivdi3+0x540>
    bbf4:	100d883a 	mov	r6,r2
    bbf8:	1c63c83a 	sub	r17,r3,r17
    bbfc:	900b883a 	mov	r5,r18
    bc00:	8809883a 	mov	r4,r17
    bc04:	d9800015 	stw	r6,0(sp)
    bc08:	00021b40 	call	21b4 <__umodsi3>
    bc0c:	102d883a 	mov	r22,r2
    bc10:	8809883a 	mov	r4,r17
    bc14:	900b883a 	mov	r5,r18
    bc18:	00021500 	call	2150 <__udivsi3>
    bc1c:	b02c943a 	slli	r22,r22,16
    bc20:	e089383a 	mul	r4,fp,r2
    bc24:	843fffcc 	andi	r16,r16,65535
    bc28:	85a0b03a 	or	r16,r16,r22
    bc2c:	d9800017 	ldw	r6,0(sp)
    bc30:	8100042e 	bgeu	r16,r4,bc44 <__udivdi3+0x3bc>
    bc34:	85e1883a 	add	r16,r16,r23
    bc38:	10ffffc4 	addi	r3,r2,-1
    bc3c:	85c05e2e 	bgeu	r16,r23,bdb8 <__udivdi3+0x530>
    bc40:	1805883a 	mov	r2,r3
    bc44:	300c943a 	slli	r6,r6,16
    bc48:	a17fffcc 	andi	r5,r20,65535
    bc4c:	a028d43a 	srli	r20,r20,16
    bc50:	3084b03a 	or	r2,r6,r2
    bc54:	10ffffcc 	andi	r3,r2,65535
    bc58:	100cd43a 	srli	r6,r2,16
    bc5c:	194f383a 	mul	r7,r3,r5
    bc60:	1d07383a 	mul	r3,r3,r20
    bc64:	314b383a 	mul	r5,r6,r5
    bc68:	3810d43a 	srli	r8,r7,16
    bc6c:	8121c83a 	sub	r16,r16,r4
    bc70:	1947883a 	add	r3,r3,r5
    bc74:	40c7883a 	add	r3,r8,r3
    bc78:	350d383a 	mul	r6,r6,r20
    bc7c:	1940022e 	bgeu	r3,r5,bc88 <__udivdi3+0x400>
    bc80:	01000074 	movhi	r4,1
    bc84:	310d883a 	add	r6,r6,r4
    bc88:	1828d43a 	srli	r20,r3,16
    bc8c:	a18d883a 	add	r6,r20,r6
    bc90:	81803e36 	bltu	r16,r6,bd8c <__udivdi3+0x504>
    bc94:	81803826 	beq	r16,r6,bd78 <__udivdi3+0x4f0>
    bc98:	0007883a 	mov	r3,zero
    bc9c:	003fa206 	br	bb28 <__udivdi3+0x2a0>
    bca0:	88e2983a 	sll	r17,r17,r3
    bca4:	80a8d83a 	srl	r20,r16,r2
    bca8:	80e0983a 	sll	r16,r16,r3
    bcac:	882ad43a 	srli	r21,r17,16
    bcb0:	9884d83a 	srl	r2,r19,r2
    bcb4:	a009883a 	mov	r4,r20
    bcb8:	a80b883a 	mov	r5,r21
    bcbc:	142eb03a 	or	r23,r2,r16
    bcc0:	98e4983a 	sll	r18,r19,r3
    bcc4:	00021b40 	call	21b4 <__umodsi3>
    bcc8:	a009883a 	mov	r4,r20
    bccc:	a80b883a 	mov	r5,r21
    bcd0:	1021883a 	mov	r16,r2
    bcd4:	00021500 	call	2150 <__udivsi3>
    bcd8:	1039883a 	mov	fp,r2
    bcdc:	8d3fffcc 	andi	r20,r17,65535
    bce0:	8020943a 	slli	r16,r16,16
    bce4:	b804d43a 	srli	r2,r23,16
    bce8:	a72d383a 	mul	r22,r20,fp
    bcec:	1404b03a 	or	r2,r2,r16
    bcf0:	1580062e 	bgeu	r2,r22,bd0c <__udivdi3+0x484>
    bcf4:	1445883a 	add	r2,r2,r17
    bcf8:	e0ffffc4 	addi	r3,fp,-1
    bcfc:	14403836 	bltu	r2,r17,bde0 <__udivdi3+0x558>
    bd00:	1580372e 	bgeu	r2,r22,bde0 <__udivdi3+0x558>
    bd04:	e73fff84 	addi	fp,fp,-2
    bd08:	1445883a 	add	r2,r2,r17
    bd0c:	15adc83a 	sub	r22,r2,r22
    bd10:	a80b883a 	mov	r5,r21
    bd14:	b009883a 	mov	r4,r22
    bd18:	00021b40 	call	21b4 <__umodsi3>
    bd1c:	1027883a 	mov	r19,r2
    bd20:	b009883a 	mov	r4,r22
    bd24:	a80b883a 	mov	r5,r21
    bd28:	00021500 	call	2150 <__udivsi3>
    bd2c:	9826943a 	slli	r19,r19,16
    bd30:	a0a1383a 	mul	r16,r20,r2
    bd34:	b93fffcc 	andi	r4,r23,65535
    bd38:	24c8b03a 	or	r4,r4,r19
    bd3c:	2400062e 	bgeu	r4,r16,bd58 <__udivdi3+0x4d0>
    bd40:	2449883a 	add	r4,r4,r17
    bd44:	10ffffc4 	addi	r3,r2,-1
    bd48:	24402336 	bltu	r4,r17,bdd8 <__udivdi3+0x550>
    bd4c:	2400222e 	bgeu	r4,r16,bdd8 <__udivdi3+0x550>
    bd50:	10bfff84 	addi	r2,r2,-2
    bd54:	2449883a 	add	r4,r4,r17
    bd58:	e038943a 	slli	fp,fp,16
    bd5c:	2421c83a 	sub	r16,r4,r16
    bd60:	e086b03a 	or	r3,fp,r2
    bd64:	003f4306 	br	ba74 <__udivdi3+0x1ec>
    bd68:	2005883a 	mov	r2,r4
    bd6c:	003f6906 	br	bb14 <__udivdi3+0x28c>
    bd70:	1805883a 	mov	r2,r3
    bd74:	003f0f06 	br	b9b4 <__udivdi3+0x12c>
    bd78:	1806943a 	slli	r3,r3,16
    bd7c:	9d66983a 	sll	r19,r19,r21
    bd80:	39ffffcc 	andi	r7,r7,65535
    bd84:	19c7883a 	add	r3,r3,r7
    bd88:	98ffc32e 	bgeu	r19,r3,bc98 <__udivdi3+0x410>
    bd8c:	10bfffc4 	addi	r2,r2,-1
    bd90:	003fc106 	br	bc98 <__udivdi3+0x410>
    bd94:	00800604 	movi	r2,24
    bd98:	003f1106 	br	b9e0 <__udivdi3+0x158>
    bd9c:	00800604 	movi	r2,24
    bda0:	003f2706 	br	ba40 <__udivdi3+0x1b8>
    bda4:	00800604 	movi	r2,24
    bda8:	003ece06 	br	b8e4 <__udivdi3+0x5c>
    bdac:	0007883a 	mov	r3,zero
    bdb0:	00800044 	movi	r2,1
    bdb4:	003f5c06 	br	bb28 <__udivdi3+0x2a0>
    bdb8:	813fa12e 	bgeu	r16,r4,bc40 <__udivdi3+0x3b8>
    bdbc:	10bfff84 	addi	r2,r2,-2
    bdc0:	85e1883a 	add	r16,r16,r23
    bdc4:	003f9f06 	br	bc44 <__udivdi3+0x3bc>
    bdc8:	1c7f8a2e 	bgeu	r3,r17,bbf4 <__udivdi3+0x36c>
    bdcc:	31bfff84 	addi	r6,r6,-2
    bdd0:	1dc7883a 	add	r3,r3,r23
    bdd4:	003f8806 	br	bbf8 <__udivdi3+0x370>
    bdd8:	1805883a 	mov	r2,r3
    bddc:	003fde06 	br	bd58 <__udivdi3+0x4d0>
    bde0:	1839883a 	mov	fp,r3
    bde4:	003fc906 	br	bd0c <__udivdi3+0x484>
    bde8:	b5bfff84 	addi	r22,r22,-2
    bdec:	2449883a 	add	r4,r4,r17
    bdf0:	003f3406 	br	bac4 <__udivdi3+0x23c>
    bdf4:	b5bfff84 	addi	r22,r22,-2
    bdf8:	1445883a 	add	r2,r2,r17
    bdfc:	003edb06 	br	b96c <__udivdi3+0xe4>

0000be00 <__umoddi3>:
    be00:	defff404 	addi	sp,sp,-48
    be04:	df000a15 	stw	fp,40(sp)
    be08:	dc400315 	stw	r17,12(sp)
    be0c:	dc000215 	stw	r16,8(sp)
    be10:	dfc00b15 	stw	ra,44(sp)
    be14:	ddc00915 	stw	r23,36(sp)
    be18:	dd800815 	stw	r22,32(sp)
    be1c:	dd400715 	stw	r21,28(sp)
    be20:	dd000615 	stw	r20,24(sp)
    be24:	dcc00515 	stw	r19,20(sp)
    be28:	dc800415 	stw	r18,16(sp)
    be2c:	2021883a 	mov	r16,r4
    be30:	2823883a 	mov	r17,r5
    be34:	2839883a 	mov	fp,r5
    be38:	38003c1e 	bne	r7,zero,bf2c <__umoddi3+0x12c>
    be3c:	3027883a 	mov	r19,r6
    be40:	2029883a 	mov	r20,r4
    be44:	2980512e 	bgeu	r5,r6,bf8c <__umoddi3+0x18c>
    be48:	00bfffd4 	movui	r2,65535
    be4c:	11809a36 	bltu	r2,r6,c0b8 <__umoddi3+0x2b8>
    be50:	01003fc4 	movi	r4,255
    be54:	2189803a 	cmpltu	r4,r4,r6
    be58:	200890fa 	slli	r4,r4,3
    be5c:	3104d83a 	srl	r2,r6,r4
    be60:	00c00074 	movhi	r3,1
    be64:	18c68a04 	addi	r3,r3,6696
    be68:	1885883a 	add	r2,r3,r2
    be6c:	10c00003 	ldbu	r3,0(r2)
    be70:	00800804 	movi	r2,32
    be74:	1909883a 	add	r4,r3,r4
    be78:	1125c83a 	sub	r18,r2,r4
    be7c:	90000526 	beq	r18,zero,be94 <__umoddi3+0x94>
    be80:	8ca2983a 	sll	r17,r17,r18
    be84:	8108d83a 	srl	r4,r16,r4
    be88:	34a6983a 	sll	r19,r6,r18
    be8c:	84a8983a 	sll	r20,r16,r18
    be90:	2478b03a 	or	fp,r4,r17
    be94:	982ed43a 	srli	r23,r19,16
    be98:	e009883a 	mov	r4,fp
    be9c:	9dbfffcc 	andi	r22,r19,65535
    bea0:	b80b883a 	mov	r5,r23
    bea4:	00021b40 	call	21b4 <__umodsi3>
    bea8:	e009883a 	mov	r4,fp
    beac:	b80b883a 	mov	r5,r23
    beb0:	102b883a 	mov	r21,r2
    beb4:	00021500 	call	2150 <__udivsi3>
    beb8:	a806943a 	slli	r3,r21,16
    bebc:	a008d43a 	srli	r4,r20,16
    bec0:	b085383a 	mul	r2,r22,r2
    bec4:	20c8b03a 	or	r4,r4,r3
    bec8:	2080032e 	bgeu	r4,r2,bed8 <__umoddi3+0xd8>
    becc:	24c9883a 	add	r4,r4,r19
    bed0:	24c00136 	bltu	r4,r19,bed8 <__umoddi3+0xd8>
    bed4:	20811036 	bltu	r4,r2,c318 <__umoddi3+0x518>
    bed8:	20abc83a 	sub	r21,r4,r2
    bedc:	b80b883a 	mov	r5,r23
    bee0:	a809883a 	mov	r4,r21
    bee4:	00021b40 	call	21b4 <__umodsi3>
    bee8:	1023883a 	mov	r17,r2
    beec:	b80b883a 	mov	r5,r23
    bef0:	a809883a 	mov	r4,r21
    bef4:	00021500 	call	2150 <__udivsi3>
    bef8:	8822943a 	slli	r17,r17,16
    befc:	b085383a 	mul	r2,r22,r2
    bf00:	a0ffffcc 	andi	r3,r20,65535
    bf04:	1c46b03a 	or	r3,r3,r17
    bf08:	1880042e 	bgeu	r3,r2,bf1c <__umoddi3+0x11c>
    bf0c:	1cc7883a 	add	r3,r3,r19
    bf10:	1cc00236 	bltu	r3,r19,bf1c <__umoddi3+0x11c>
    bf14:	1880012e 	bgeu	r3,r2,bf1c <__umoddi3+0x11c>
    bf18:	1cc7883a 	add	r3,r3,r19
    bf1c:	1885c83a 	sub	r2,r3,r2
    bf20:	1484d83a 	srl	r2,r2,r18
    bf24:	0007883a 	mov	r3,zero
    bf28:	00004f06 	br	c068 <__umoddi3+0x268>
    bf2c:	29c04c36 	bltu	r5,r7,c060 <__umoddi3+0x260>
    bf30:	00bfffd4 	movui	r2,65535
    bf34:	11c0582e 	bgeu	r2,r7,c098 <__umoddi3+0x298>
    bf38:	00804034 	movhi	r2,256
    bf3c:	10bfffc4 	addi	r2,r2,-1
    bf40:	11c0e736 	bltu	r2,r7,c2e0 <__umoddi3+0x4e0>
    bf44:	01000404 	movi	r4,16
    bf48:	3904d83a 	srl	r2,r7,r4
    bf4c:	00c00074 	movhi	r3,1
    bf50:	18c68a04 	addi	r3,r3,6696
    bf54:	1885883a 	add	r2,r3,r2
    bf58:	14c00003 	ldbu	r19,0(r2)
    bf5c:	00c00804 	movi	r3,32
    bf60:	9927883a 	add	r19,r19,r4
    bf64:	1ce9c83a 	sub	r20,r3,r19
    bf68:	a000581e 	bne	r20,zero,c0cc <__umoddi3+0x2cc>
    bf6c:	3c400136 	bltu	r7,r17,bf74 <__umoddi3+0x174>
    bf70:	8180eb36 	bltu	r16,r6,c320 <__umoddi3+0x520>
    bf74:	8185c83a 	sub	r2,r16,r6
    bf78:	89e3c83a 	sub	r17,r17,r7
    bf7c:	8089803a 	cmpltu	r4,r16,r2
    bf80:	8939c83a 	sub	fp,r17,r4
    bf84:	e007883a 	mov	r3,fp
    bf88:	00003706 	br	c068 <__umoddi3+0x268>
    bf8c:	3000041e 	bne	r6,zero,bfa0 <__umoddi3+0x1a0>
    bf90:	000b883a 	mov	r5,zero
    bf94:	01000044 	movi	r4,1
    bf98:	00021500 	call	2150 <__udivsi3>
    bf9c:	1027883a 	mov	r19,r2
    bfa0:	00bfffd4 	movui	r2,65535
    bfa4:	14c0402e 	bgeu	r2,r19,c0a8 <__umoddi3+0x2a8>
    bfa8:	00804034 	movhi	r2,256
    bfac:	10bfffc4 	addi	r2,r2,-1
    bfb0:	14c0cd36 	bltu	r2,r19,c2e8 <__umoddi3+0x4e8>
    bfb4:	00800404 	movi	r2,16
    bfb8:	9886d83a 	srl	r3,r19,r2
    bfbc:	01000074 	movhi	r4,1
    bfc0:	21068a04 	addi	r4,r4,6696
    bfc4:	20c7883a 	add	r3,r4,r3
    bfc8:	18c00003 	ldbu	r3,0(r3)
    bfcc:	1887883a 	add	r3,r3,r2
    bfd0:	00800804 	movi	r2,32
    bfd4:	10e5c83a 	sub	r18,r2,r3
    bfd8:	9000901e 	bne	r18,zero,c21c <__umoddi3+0x41c>
    bfdc:	982cd43a 	srli	r22,r19,16
    bfe0:	8ce3c83a 	sub	r17,r17,r19
    bfe4:	9d7fffcc 	andi	r21,r19,65535
    bfe8:	b00b883a 	mov	r5,r22
    bfec:	8809883a 	mov	r4,r17
    bff0:	00021b40 	call	21b4 <__umodsi3>
    bff4:	8809883a 	mov	r4,r17
    bff8:	b00b883a 	mov	r5,r22
    bffc:	1021883a 	mov	r16,r2
    c000:	00021500 	call	2150 <__udivsi3>
    c004:	8006943a 	slli	r3,r16,16
    c008:	a008d43a 	srli	r4,r20,16
    c00c:	1545383a 	mul	r2,r2,r21
    c010:	20c8b03a 	or	r4,r4,r3
    c014:	2080042e 	bgeu	r4,r2,c028 <__umoddi3+0x228>
    c018:	24c9883a 	add	r4,r4,r19
    c01c:	24c00236 	bltu	r4,r19,c028 <__umoddi3+0x228>
    c020:	2080012e 	bgeu	r4,r2,c028 <__umoddi3+0x228>
    c024:	24c9883a 	add	r4,r4,r19
    c028:	20a1c83a 	sub	r16,r4,r2
    c02c:	b00b883a 	mov	r5,r22
    c030:	8009883a 	mov	r4,r16
    c034:	00021b40 	call	21b4 <__umodsi3>
    c038:	1023883a 	mov	r17,r2
    c03c:	b00b883a 	mov	r5,r22
    c040:	8009883a 	mov	r4,r16
    c044:	00021500 	call	2150 <__udivsi3>
    c048:	8822943a 	slli	r17,r17,16
    c04c:	1545383a 	mul	r2,r2,r21
    c050:	a53fffcc 	andi	r20,r20,65535
    c054:	a446b03a 	or	r3,r20,r17
    c058:	18bfb02e 	bgeu	r3,r2,bf1c <__umoddi3+0x11c>
    c05c:	003fab06 	br	bf0c <__umoddi3+0x10c>
    c060:	2005883a 	mov	r2,r4
    c064:	2807883a 	mov	r3,r5
    c068:	dfc00b17 	ldw	ra,44(sp)
    c06c:	df000a17 	ldw	fp,40(sp)
    c070:	ddc00917 	ldw	r23,36(sp)
    c074:	dd800817 	ldw	r22,32(sp)
    c078:	dd400717 	ldw	r21,28(sp)
    c07c:	dd000617 	ldw	r20,24(sp)
    c080:	dcc00517 	ldw	r19,20(sp)
    c084:	dc800417 	ldw	r18,16(sp)
    c088:	dc400317 	ldw	r17,12(sp)
    c08c:	dc000217 	ldw	r16,8(sp)
    c090:	dec00c04 	addi	sp,sp,48
    c094:	f800283a 	ret
    c098:	04c03fc4 	movi	r19,255
    c09c:	99c9803a 	cmpltu	r4,r19,r7
    c0a0:	200890fa 	slli	r4,r4,3
    c0a4:	003fa806 	br	bf48 <__umoddi3+0x148>
    c0a8:	00803fc4 	movi	r2,255
    c0ac:	14c5803a 	cmpltu	r2,r2,r19
    c0b0:	100490fa 	slli	r2,r2,3
    c0b4:	003fc006 	br	bfb8 <__umoddi3+0x1b8>
    c0b8:	00804034 	movhi	r2,256
    c0bc:	10bfffc4 	addi	r2,r2,-1
    c0c0:	11808b36 	bltu	r2,r6,c2f0 <__umoddi3+0x4f0>
    c0c4:	01000404 	movi	r4,16
    c0c8:	003f6406 	br	be5c <__umoddi3+0x5c>
    c0cc:	34c4d83a 	srl	r2,r6,r19
    c0d0:	3d0e983a 	sll	r7,r7,r20
    c0d4:	8cf8d83a 	srl	fp,r17,r19
    c0d8:	8d10983a 	sll	r8,r17,r20
    c0dc:	38aab03a 	or	r21,r7,r2
    c0e0:	a82cd43a 	srli	r22,r21,16
    c0e4:	84e2d83a 	srl	r17,r16,r19
    c0e8:	e009883a 	mov	r4,fp
    c0ec:	b00b883a 	mov	r5,r22
    c0f0:	8a22b03a 	or	r17,r17,r8
    c0f4:	3524983a 	sll	r18,r6,r20
    c0f8:	00021b40 	call	21b4 <__umodsi3>
    c0fc:	e009883a 	mov	r4,fp
    c100:	b00b883a 	mov	r5,r22
    c104:	102f883a 	mov	r23,r2
    c108:	00021500 	call	2150 <__udivsi3>
    c10c:	100d883a 	mov	r6,r2
    c110:	b808943a 	slli	r4,r23,16
    c114:	aa3fffcc 	andi	r8,r21,65535
    c118:	8804d43a 	srli	r2,r17,16
    c11c:	41af383a 	mul	r23,r8,r6
    c120:	8520983a 	sll	r16,r16,r20
    c124:	1104b03a 	or	r2,r2,r4
    c128:	15c0042e 	bgeu	r2,r23,c13c <__umoddi3+0x33c>
    c12c:	1545883a 	add	r2,r2,r21
    c130:	30ffffc4 	addi	r3,r6,-1
    c134:	1540742e 	bgeu	r2,r21,c308 <__umoddi3+0x508>
    c138:	180d883a 	mov	r6,r3
    c13c:	15efc83a 	sub	r23,r2,r23
    c140:	b00b883a 	mov	r5,r22
    c144:	b809883a 	mov	r4,r23
    c148:	d9800115 	stw	r6,4(sp)
    c14c:	da000015 	stw	r8,0(sp)
    c150:	00021b40 	call	21b4 <__umodsi3>
    c154:	b00b883a 	mov	r5,r22
    c158:	b809883a 	mov	r4,r23
    c15c:	1039883a 	mov	fp,r2
    c160:	00021500 	call	2150 <__udivsi3>
    c164:	da000017 	ldw	r8,0(sp)
    c168:	e038943a 	slli	fp,fp,16
    c16c:	100b883a 	mov	r5,r2
    c170:	4089383a 	mul	r4,r8,r2
    c174:	8a3fffcc 	andi	r8,r17,65535
    c178:	4710b03a 	or	r8,r8,fp
    c17c:	d9800117 	ldw	r6,4(sp)
    c180:	4100042e 	bgeu	r8,r4,c194 <__umoddi3+0x394>
    c184:	4551883a 	add	r8,r8,r21
    c188:	10bfffc4 	addi	r2,r2,-1
    c18c:	45405a2e 	bgeu	r8,r21,c2f8 <__umoddi3+0x4f8>
    c190:	100b883a 	mov	r5,r2
    c194:	300c943a 	slli	r6,r6,16
    c198:	91ffffcc 	andi	r7,r18,65535
    c19c:	9004d43a 	srli	r2,r18,16
    c1a0:	314cb03a 	or	r6,r6,r5
    c1a4:	317fffcc 	andi	r5,r6,65535
    c1a8:	300cd43a 	srli	r6,r6,16
    c1ac:	29d3383a 	mul	r9,r5,r7
    c1b0:	288b383a 	mul	r5,r5,r2
    c1b4:	31cf383a 	mul	r7,r6,r7
    c1b8:	4806d43a 	srli	r3,r9,16
    c1bc:	4111c83a 	sub	r8,r8,r4
    c1c0:	29cb883a 	add	r5,r5,r7
    c1c4:	194b883a 	add	r5,r3,r5
    c1c8:	3085383a 	mul	r2,r6,r2
    c1cc:	29c0022e 	bgeu	r5,r7,c1d8 <__umoddi3+0x3d8>
    c1d0:	00c00074 	movhi	r3,1
    c1d4:	10c5883a 	add	r2,r2,r3
    c1d8:	2808d43a 	srli	r4,r5,16
    c1dc:	280a943a 	slli	r5,r5,16
    c1e0:	4a7fffcc 	andi	r9,r9,65535
    c1e4:	2085883a 	add	r2,r4,r2
    c1e8:	2a4b883a 	add	r5,r5,r9
    c1ec:	40803636 	bltu	r8,r2,c2c8 <__umoddi3+0x4c8>
    c1f0:	40804d26 	beq	r8,r2,c328 <__umoddi3+0x528>
    c1f4:	4089c83a 	sub	r4,r8,r2
    c1f8:	280f883a 	mov	r7,r5
    c1fc:	81cfc83a 	sub	r7,r16,r7
    c200:	81c7803a 	cmpltu	r3,r16,r7
    c204:	20c7c83a 	sub	r3,r4,r3
    c208:	1cc4983a 	sll	r2,r3,r19
    c20c:	3d0ed83a 	srl	r7,r7,r20
    c210:	1d06d83a 	srl	r3,r3,r20
    c214:	11c4b03a 	or	r2,r2,r7
    c218:	003f9306 	br	c068 <__umoddi3+0x268>
    c21c:	9ca6983a 	sll	r19,r19,r18
    c220:	88e8d83a 	srl	r20,r17,r3
    c224:	80c4d83a 	srl	r2,r16,r3
    c228:	982cd43a 	srli	r22,r19,16
    c22c:	8ca2983a 	sll	r17,r17,r18
    c230:	a009883a 	mov	r4,r20
    c234:	b00b883a 	mov	r5,r22
    c238:	1478b03a 	or	fp,r2,r17
    c23c:	00021b40 	call	21b4 <__umodsi3>
    c240:	a009883a 	mov	r4,r20
    c244:	b00b883a 	mov	r5,r22
    c248:	1023883a 	mov	r17,r2
    c24c:	00021500 	call	2150 <__udivsi3>
    c250:	9d7fffcc 	andi	r21,r19,65535
    c254:	880a943a 	slli	r5,r17,16
    c258:	e008d43a 	srli	r4,fp,16
    c25c:	a885383a 	mul	r2,r21,r2
    c260:	84a8983a 	sll	r20,r16,r18
    c264:	2148b03a 	or	r4,r4,r5
    c268:	2080042e 	bgeu	r4,r2,c27c <__umoddi3+0x47c>
    c26c:	24c9883a 	add	r4,r4,r19
    c270:	24c00236 	bltu	r4,r19,c27c <__umoddi3+0x47c>
    c274:	2080012e 	bgeu	r4,r2,c27c <__umoddi3+0x47c>
    c278:	24c9883a 	add	r4,r4,r19
    c27c:	20a3c83a 	sub	r17,r4,r2
    c280:	b00b883a 	mov	r5,r22
    c284:	8809883a 	mov	r4,r17
    c288:	00021b40 	call	21b4 <__umodsi3>
    c28c:	102f883a 	mov	r23,r2
    c290:	8809883a 	mov	r4,r17
    c294:	b00b883a 	mov	r5,r22
    c298:	00021500 	call	2150 <__udivsi3>
    c29c:	b82e943a 	slli	r23,r23,16
    c2a0:	a885383a 	mul	r2,r21,r2
    c2a4:	e13fffcc 	andi	r4,fp,65535
    c2a8:	25c8b03a 	or	r4,r4,r23
    c2ac:	2080042e 	bgeu	r4,r2,c2c0 <__umoddi3+0x4c0>
    c2b0:	24c9883a 	add	r4,r4,r19
    c2b4:	24c00236 	bltu	r4,r19,c2c0 <__umoddi3+0x4c0>
    c2b8:	2080012e 	bgeu	r4,r2,c2c0 <__umoddi3+0x4c0>
    c2bc:	24c9883a 	add	r4,r4,r19
    c2c0:	20a3c83a 	sub	r17,r4,r2
    c2c4:	003f4806 	br	bfe8 <__umoddi3+0x1e8>
    c2c8:	2c8fc83a 	sub	r7,r5,r18
    c2cc:	1545c83a 	sub	r2,r2,r21
    c2d0:	29cb803a 	cmpltu	r5,r5,r7
    c2d4:	1145c83a 	sub	r2,r2,r5
    c2d8:	4089c83a 	sub	r4,r8,r2
    c2dc:	003fc706 	br	c1fc <__umoddi3+0x3fc>
    c2e0:	01000604 	movi	r4,24
    c2e4:	003f1806 	br	bf48 <__umoddi3+0x148>
    c2e8:	00800604 	movi	r2,24
    c2ec:	003f3206 	br	bfb8 <__umoddi3+0x1b8>
    c2f0:	01000604 	movi	r4,24
    c2f4:	003ed906 	br	be5c <__umoddi3+0x5c>
    c2f8:	413fa52e 	bgeu	r8,r4,c190 <__umoddi3+0x390>
    c2fc:	297fff84 	addi	r5,r5,-2
    c300:	4551883a 	add	r8,r8,r21
    c304:	003fa306 	br	c194 <__umoddi3+0x394>
    c308:	15ff8b2e 	bgeu	r2,r23,c138 <__umoddi3+0x338>
    c30c:	31bfff84 	addi	r6,r6,-2
    c310:	1545883a 	add	r2,r2,r21
    c314:	003f8906 	br	c13c <__umoddi3+0x33c>
    c318:	24c9883a 	add	r4,r4,r19
    c31c:	003eee06 	br	bed8 <__umoddi3+0xd8>
    c320:	8005883a 	mov	r2,r16
    c324:	003f1706 	br	bf84 <__umoddi3+0x184>
    c328:	817fe736 	bltu	r16,r5,c2c8 <__umoddi3+0x4c8>
    c32c:	280f883a 	mov	r7,r5
    c330:	0009883a 	mov	r4,zero
    c334:	003fb106 	br	c1fc <__umoddi3+0x3fc>

0000c338 <__adddf3>:
    c338:	02c00434 	movhi	r11,16
    c33c:	5affffc4 	addi	r11,r11,-1
    c340:	2806d7fa 	srli	r3,r5,31
    c344:	2ad4703a 	and	r10,r5,r11
    c348:	3ad2703a 	and	r9,r7,r11
    c34c:	3804d53a 	srli	r2,r7,20
    c350:	3018d77a 	srli	r12,r6,29
    c354:	280ad53a 	srli	r5,r5,20
    c358:	501490fa 	slli	r10,r10,3
    c35c:	2010d77a 	srli	r8,r4,29
    c360:	481290fa 	slli	r9,r9,3
    c364:	380ed7fa 	srli	r7,r7,31
    c368:	defffb04 	addi	sp,sp,-20
    c36c:	dc800215 	stw	r18,8(sp)
    c370:	dc400115 	stw	r17,4(sp)
    c374:	dc000015 	stw	r16,0(sp)
    c378:	dfc00415 	stw	ra,16(sp)
    c37c:	dcc00315 	stw	r19,12(sp)
    c380:	1c803fcc 	andi	r18,r3,255
    c384:	2c01ffcc 	andi	r16,r5,2047
    c388:	5210b03a 	or	r8,r10,r8
    c38c:	202290fa 	slli	r17,r4,3
    c390:	1081ffcc 	andi	r2,r2,2047
    c394:	4b12b03a 	or	r9,r9,r12
    c398:	300c90fa 	slli	r6,r6,3
    c39c:	91c07526 	beq	r18,r7,c574 <__adddf3+0x23c>
    c3a0:	8087c83a 	sub	r3,r16,r2
    c3a4:	00c0ab0e 	bge	zero,r3,c654 <__adddf3+0x31c>
    c3a8:	10002a1e 	bne	r2,zero,c454 <__adddf3+0x11c>
    c3ac:	4984b03a 	or	r2,r9,r6
    c3b0:	1000961e 	bne	r2,zero,c60c <__adddf3+0x2d4>
    c3b4:	888001cc 	andi	r2,r17,7
    c3b8:	10000726 	beq	r2,zero,c3d8 <__adddf3+0xa0>
    c3bc:	888003cc 	andi	r2,r17,15
    c3c0:	00c00104 	movi	r3,4
    c3c4:	10c00426 	beq	r2,r3,c3d8 <__adddf3+0xa0>
    c3c8:	88c7883a 	add	r3,r17,r3
    c3cc:	1c63803a 	cmpltu	r17,r3,r17
    c3d0:	4451883a 	add	r8,r8,r17
    c3d4:	1823883a 	mov	r17,r3
    c3d8:	4080202c 	andhi	r2,r8,128
    c3dc:	10005926 	beq	r2,zero,c544 <__adddf3+0x20c>
    c3e0:	84000044 	addi	r16,r16,1
    c3e4:	0081ffc4 	movi	r2,2047
    c3e8:	8080ba26 	beq	r16,r2,c6d4 <__adddf3+0x39c>
    c3ec:	00bfe034 	movhi	r2,65408
    c3f0:	10bfffc4 	addi	r2,r2,-1
    c3f4:	4090703a 	and	r8,r8,r2
    c3f8:	4004977a 	slli	r2,r8,29
    c3fc:	4010927a 	slli	r8,r8,9
    c400:	8822d0fa 	srli	r17,r17,3
    c404:	8401ffcc 	andi	r16,r16,2047
    c408:	4010d33a 	srli	r8,r8,12
    c40c:	9007883a 	mov	r3,r18
    c410:	1444b03a 	or	r2,r2,r17
    c414:	8401ffcc 	andi	r16,r16,2047
    c418:	8020953a 	slli	r16,r16,20
    c41c:	18c03fcc 	andi	r3,r3,255
    c420:	01000434 	movhi	r4,16
    c424:	213fffc4 	addi	r4,r4,-1
    c428:	180697fa 	slli	r3,r3,31
    c42c:	4110703a 	and	r8,r8,r4
    c430:	4410b03a 	or	r8,r8,r16
    c434:	40c6b03a 	or	r3,r8,r3
    c438:	dfc00417 	ldw	ra,16(sp)
    c43c:	dcc00317 	ldw	r19,12(sp)
    c440:	dc800217 	ldw	r18,8(sp)
    c444:	dc400117 	ldw	r17,4(sp)
    c448:	dc000017 	ldw	r16,0(sp)
    c44c:	dec00504 	addi	sp,sp,20
    c450:	f800283a 	ret
    c454:	0081ffc4 	movi	r2,2047
    c458:	80bfd626 	beq	r16,r2,c3b4 <__adddf3+0x7c>
    c45c:	4a402034 	orhi	r9,r9,128
    c460:	00800e04 	movi	r2,56
    c464:	10c09f16 	blt	r2,r3,c6e4 <__adddf3+0x3ac>
    c468:	008007c4 	movi	r2,31
    c46c:	10c0c216 	blt	r2,r3,c778 <__adddf3+0x440>
    c470:	00800804 	movi	r2,32
    c474:	10c5c83a 	sub	r2,r2,r3
    c478:	488a983a 	sll	r5,r9,r2
    c47c:	30c8d83a 	srl	r4,r6,r3
    c480:	3084983a 	sll	r2,r6,r2
    c484:	48c6d83a 	srl	r3,r9,r3
    c488:	290cb03a 	or	r6,r5,r4
    c48c:	1004c03a 	cmpne	r2,r2,zero
    c490:	308cb03a 	or	r6,r6,r2
    c494:	898dc83a 	sub	r6,r17,r6
    c498:	89a3803a 	cmpltu	r17,r17,r6
    c49c:	40d1c83a 	sub	r8,r8,r3
    c4a0:	4451c83a 	sub	r8,r8,r17
    c4a4:	3023883a 	mov	r17,r6
    c4a8:	4080202c 	andhi	r2,r8,128
    c4ac:	10002326 	beq	r2,zero,c53c <__adddf3+0x204>
    c4b0:	04c02034 	movhi	r19,128
    c4b4:	9cffffc4 	addi	r19,r19,-1
    c4b8:	44e6703a 	and	r19,r8,r19
    c4bc:	98007626 	beq	r19,zero,c698 <__adddf3+0x360>
    c4c0:	9809883a 	mov	r4,r19
    c4c4:	000e93c0 	call	e93c <__clzsi2>
    c4c8:	10fffe04 	addi	r3,r2,-8
    c4cc:	010007c4 	movi	r4,31
    c4d0:	20c07716 	blt	r4,r3,c6b0 <__adddf3+0x378>
    c4d4:	00800804 	movi	r2,32
    c4d8:	10c5c83a 	sub	r2,r2,r3
    c4dc:	8884d83a 	srl	r2,r17,r2
    c4e0:	98d0983a 	sll	r8,r19,r3
    c4e4:	88e2983a 	sll	r17,r17,r3
    c4e8:	1204b03a 	or	r2,r2,r8
    c4ec:	1c007416 	blt	r3,r16,c6c0 <__adddf3+0x388>
    c4f0:	1c21c83a 	sub	r16,r3,r16
    c4f4:	82000044 	addi	r8,r16,1
    c4f8:	00c007c4 	movi	r3,31
    c4fc:	1a009116 	blt	r3,r8,c744 <__adddf3+0x40c>
    c500:	00c00804 	movi	r3,32
    c504:	1a07c83a 	sub	r3,r3,r8
    c508:	8a08d83a 	srl	r4,r17,r8
    c50c:	88e2983a 	sll	r17,r17,r3
    c510:	10c6983a 	sll	r3,r2,r3
    c514:	1210d83a 	srl	r8,r2,r8
    c518:	8804c03a 	cmpne	r2,r17,zero
    c51c:	1906b03a 	or	r3,r3,r4
    c520:	18a2b03a 	or	r17,r3,r2
    c524:	0021883a 	mov	r16,zero
    c528:	003fa206 	br	c3b4 <__adddf3+0x7c>
    c52c:	1890b03a 	or	r8,r3,r2
    c530:	40017d26 	beq	r8,zero,cb28 <__adddf3+0x7f0>
    c534:	1011883a 	mov	r8,r2
    c538:	1823883a 	mov	r17,r3
    c53c:	888001cc 	andi	r2,r17,7
    c540:	103f9e1e 	bne	r2,zero,c3bc <__adddf3+0x84>
    c544:	4004977a 	slli	r2,r8,29
    c548:	8822d0fa 	srli	r17,r17,3
    c54c:	4010d0fa 	srli	r8,r8,3
    c550:	9007883a 	mov	r3,r18
    c554:	1444b03a 	or	r2,r2,r17
    c558:	0101ffc4 	movi	r4,2047
    c55c:	81002426 	beq	r16,r4,c5f0 <__adddf3+0x2b8>
    c560:	8120703a 	and	r16,r16,r4
    c564:	01000434 	movhi	r4,16
    c568:	213fffc4 	addi	r4,r4,-1
    c56c:	4110703a 	and	r8,r8,r4
    c570:	003fa806 	br	c414 <__adddf3+0xdc>
    c574:	8089c83a 	sub	r4,r16,r2
    c578:	01005e0e 	bge	zero,r4,c6f4 <__adddf3+0x3bc>
    c57c:	10002b26 	beq	r2,zero,c62c <__adddf3+0x2f4>
    c580:	0081ffc4 	movi	r2,2047
    c584:	80bf8b26 	beq	r16,r2,c3b4 <__adddf3+0x7c>
    c588:	4a402034 	orhi	r9,r9,128
    c58c:	00800e04 	movi	r2,56
    c590:	1100a40e 	bge	r2,r4,c824 <__adddf3+0x4ec>
    c594:	498cb03a 	or	r6,r9,r6
    c598:	300ac03a 	cmpne	r5,r6,zero
    c59c:	0013883a 	mov	r9,zero
    c5a0:	2c4b883a 	add	r5,r5,r17
    c5a4:	2c63803a 	cmpltu	r17,r5,r17
    c5a8:	4a11883a 	add	r8,r9,r8
    c5ac:	8a11883a 	add	r8,r17,r8
    c5b0:	2823883a 	mov	r17,r5
    c5b4:	4080202c 	andhi	r2,r8,128
    c5b8:	103fe026 	beq	r2,zero,c53c <__adddf3+0x204>
    c5bc:	84000044 	addi	r16,r16,1
    c5c0:	0081ffc4 	movi	r2,2047
    c5c4:	8080d226 	beq	r16,r2,c910 <__adddf3+0x5d8>
    c5c8:	00bfe034 	movhi	r2,65408
    c5cc:	10bfffc4 	addi	r2,r2,-1
    c5d0:	4090703a 	and	r8,r8,r2
    c5d4:	880ad07a 	srli	r5,r17,1
    c5d8:	400897fa 	slli	r4,r8,31
    c5dc:	88c0004c 	andi	r3,r17,1
    c5e0:	28e2b03a 	or	r17,r5,r3
    c5e4:	4010d07a 	srli	r8,r8,1
    c5e8:	2462b03a 	or	r17,r4,r17
    c5ec:	003f7106 	br	c3b4 <__adddf3+0x7c>
    c5f0:	4088b03a 	or	r4,r8,r2
    c5f4:	20014526 	beq	r4,zero,cb0c <__adddf3+0x7d4>
    c5f8:	01000434 	movhi	r4,16
    c5fc:	42000234 	orhi	r8,r8,8
    c600:	213fffc4 	addi	r4,r4,-1
    c604:	4110703a 	and	r8,r8,r4
    c608:	003f8206 	br	c414 <__adddf3+0xdc>
    c60c:	18ffffc4 	addi	r3,r3,-1
    c610:	1800491e 	bne	r3,zero,c738 <__adddf3+0x400>
    c614:	898bc83a 	sub	r5,r17,r6
    c618:	8963803a 	cmpltu	r17,r17,r5
    c61c:	4251c83a 	sub	r8,r8,r9
    c620:	4451c83a 	sub	r8,r8,r17
    c624:	2823883a 	mov	r17,r5
    c628:	003f9f06 	br	c4a8 <__adddf3+0x170>
    c62c:	4984b03a 	or	r2,r9,r6
    c630:	103f6026 	beq	r2,zero,c3b4 <__adddf3+0x7c>
    c634:	213fffc4 	addi	r4,r4,-1
    c638:	2000931e 	bne	r4,zero,c888 <__adddf3+0x550>
    c63c:	898d883a 	add	r6,r17,r6
    c640:	3463803a 	cmpltu	r17,r6,r17
    c644:	4251883a 	add	r8,r8,r9
    c648:	8a11883a 	add	r8,r17,r8
    c64c:	3023883a 	mov	r17,r6
    c650:	003fd806 	br	c5b4 <__adddf3+0x27c>
    c654:	1800541e 	bne	r3,zero,c7a8 <__adddf3+0x470>
    c658:	80800044 	addi	r2,r16,1
    c65c:	1081ffcc 	andi	r2,r2,2047
    c660:	00c00044 	movi	r3,1
    c664:	1880a00e 	bge	r3,r2,c8e8 <__adddf3+0x5b0>
    c668:	8989c83a 	sub	r4,r17,r6
    c66c:	8905803a 	cmpltu	r2,r17,r4
    c670:	4267c83a 	sub	r19,r8,r9
    c674:	98a7c83a 	sub	r19,r19,r2
    c678:	9880202c 	andhi	r2,r19,128
    c67c:	10006326 	beq	r2,zero,c80c <__adddf3+0x4d4>
    c680:	3463c83a 	sub	r17,r6,r17
    c684:	4a07c83a 	sub	r3,r9,r8
    c688:	344d803a 	cmpltu	r6,r6,r17
    c68c:	19a7c83a 	sub	r19,r3,r6
    c690:	3825883a 	mov	r18,r7
    c694:	983f8a1e 	bne	r19,zero,c4c0 <__adddf3+0x188>
    c698:	8809883a 	mov	r4,r17
    c69c:	000e93c0 	call	e93c <__clzsi2>
    c6a0:	10800804 	addi	r2,r2,32
    c6a4:	10fffe04 	addi	r3,r2,-8
    c6a8:	010007c4 	movi	r4,31
    c6ac:	20ff890e 	bge	r4,r3,c4d4 <__adddf3+0x19c>
    c6b0:	10bff604 	addi	r2,r2,-40
    c6b4:	8884983a 	sll	r2,r17,r2
    c6b8:	0023883a 	mov	r17,zero
    c6bc:	1c3f8c0e 	bge	r3,r16,c4f0 <__adddf3+0x1b8>
    c6c0:	023fe034 	movhi	r8,65408
    c6c4:	423fffc4 	addi	r8,r8,-1
    c6c8:	80e1c83a 	sub	r16,r16,r3
    c6cc:	1210703a 	and	r8,r2,r8
    c6d0:	003f3806 	br	c3b4 <__adddf3+0x7c>
    c6d4:	9007883a 	mov	r3,r18
    c6d8:	0011883a 	mov	r8,zero
    c6dc:	0005883a 	mov	r2,zero
    c6e0:	003f4c06 	br	c414 <__adddf3+0xdc>
    c6e4:	498cb03a 	or	r6,r9,r6
    c6e8:	300cc03a 	cmpne	r6,r6,zero
    c6ec:	0007883a 	mov	r3,zero
    c6f0:	003f6806 	br	c494 <__adddf3+0x15c>
    c6f4:	20009c1e 	bne	r4,zero,c968 <__adddf3+0x630>
    c6f8:	80800044 	addi	r2,r16,1
    c6fc:	1141ffcc 	andi	r5,r2,2047
    c700:	01000044 	movi	r4,1
    c704:	2140670e 	bge	r4,r5,c8a4 <__adddf3+0x56c>
    c708:	0101ffc4 	movi	r4,2047
    c70c:	11007f26 	beq	r2,r4,c90c <__adddf3+0x5d4>
    c710:	898d883a 	add	r6,r17,r6
    c714:	4247883a 	add	r3,r8,r9
    c718:	3451803a 	cmpltu	r8,r6,r17
    c71c:	40d1883a 	add	r8,r8,r3
    c720:	402297fa 	slli	r17,r8,31
    c724:	300cd07a 	srli	r6,r6,1
    c728:	4010d07a 	srli	r8,r8,1
    c72c:	1021883a 	mov	r16,r2
    c730:	89a2b03a 	or	r17,r17,r6
    c734:	003f1f06 	br	c3b4 <__adddf3+0x7c>
    c738:	0081ffc4 	movi	r2,2047
    c73c:	80bf481e 	bne	r16,r2,c460 <__adddf3+0x128>
    c740:	003f1c06 	br	c3b4 <__adddf3+0x7c>
    c744:	843ff844 	addi	r16,r16,-31
    c748:	01000804 	movi	r4,32
    c74c:	1406d83a 	srl	r3,r2,r16
    c750:	41005026 	beq	r8,r4,c894 <__adddf3+0x55c>
    c754:	01001004 	movi	r4,64
    c758:	2211c83a 	sub	r8,r4,r8
    c75c:	1204983a 	sll	r2,r2,r8
    c760:	88a2b03a 	or	r17,r17,r2
    c764:	8822c03a 	cmpne	r17,r17,zero
    c768:	1c62b03a 	or	r17,r3,r17
    c76c:	0011883a 	mov	r8,zero
    c770:	0021883a 	mov	r16,zero
    c774:	003f7106 	br	c53c <__adddf3+0x204>
    c778:	193ff804 	addi	r4,r3,-32
    c77c:	00800804 	movi	r2,32
    c780:	4908d83a 	srl	r4,r9,r4
    c784:	18804526 	beq	r3,r2,c89c <__adddf3+0x564>
    c788:	00801004 	movi	r2,64
    c78c:	10c5c83a 	sub	r2,r2,r3
    c790:	4886983a 	sll	r3,r9,r2
    c794:	198cb03a 	or	r6,r3,r6
    c798:	300cc03a 	cmpne	r6,r6,zero
    c79c:	218cb03a 	or	r6,r4,r6
    c7a0:	0007883a 	mov	r3,zero
    c7a4:	003f3b06 	br	c494 <__adddf3+0x15c>
    c7a8:	80002a26 	beq	r16,zero,c854 <__adddf3+0x51c>
    c7ac:	0101ffc4 	movi	r4,2047
    c7b0:	11006826 	beq	r2,r4,c954 <__adddf3+0x61c>
    c7b4:	00c7c83a 	sub	r3,zero,r3
    c7b8:	42002034 	orhi	r8,r8,128
    c7bc:	01000e04 	movi	r4,56
    c7c0:	20c07c16 	blt	r4,r3,c9b4 <__adddf3+0x67c>
    c7c4:	010007c4 	movi	r4,31
    c7c8:	20c0da16 	blt	r4,r3,cb34 <__adddf3+0x7fc>
    c7cc:	01000804 	movi	r4,32
    c7d0:	20c9c83a 	sub	r4,r4,r3
    c7d4:	4114983a 	sll	r10,r8,r4
    c7d8:	88cad83a 	srl	r5,r17,r3
    c7dc:	8908983a 	sll	r4,r17,r4
    c7e0:	40c6d83a 	srl	r3,r8,r3
    c7e4:	5162b03a 	or	r17,r10,r5
    c7e8:	2008c03a 	cmpne	r4,r4,zero
    c7ec:	8922b03a 	or	r17,r17,r4
    c7f0:	3463c83a 	sub	r17,r6,r17
    c7f4:	48c7c83a 	sub	r3,r9,r3
    c7f8:	344d803a 	cmpltu	r6,r6,r17
    c7fc:	1991c83a 	sub	r8,r3,r6
    c800:	1021883a 	mov	r16,r2
    c804:	3825883a 	mov	r18,r7
    c808:	003f2706 	br	c4a8 <__adddf3+0x170>
    c80c:	24d0b03a 	or	r8,r4,r19
    c810:	40001b1e 	bne	r8,zero,c880 <__adddf3+0x548>
    c814:	0005883a 	mov	r2,zero
    c818:	0007883a 	mov	r3,zero
    c81c:	0021883a 	mov	r16,zero
    c820:	003f4d06 	br	c558 <__adddf3+0x220>
    c824:	008007c4 	movi	r2,31
    c828:	11003c16 	blt	r2,r4,c91c <__adddf3+0x5e4>
    c82c:	00800804 	movi	r2,32
    c830:	1105c83a 	sub	r2,r2,r4
    c834:	488e983a 	sll	r7,r9,r2
    c838:	310ad83a 	srl	r5,r6,r4
    c83c:	3084983a 	sll	r2,r6,r2
    c840:	4912d83a 	srl	r9,r9,r4
    c844:	394ab03a 	or	r5,r7,r5
    c848:	1004c03a 	cmpne	r2,r2,zero
    c84c:	288ab03a 	or	r5,r5,r2
    c850:	003f5306 	br	c5a0 <__adddf3+0x268>
    c854:	4448b03a 	or	r4,r8,r17
    c858:	20003e26 	beq	r4,zero,c954 <__adddf3+0x61c>
    c85c:	00c6303a 	nor	r3,zero,r3
    c860:	18003a1e 	bne	r3,zero,c94c <__adddf3+0x614>
    c864:	3463c83a 	sub	r17,r6,r17
    c868:	4a07c83a 	sub	r3,r9,r8
    c86c:	344d803a 	cmpltu	r6,r6,r17
    c870:	1991c83a 	sub	r8,r3,r6
    c874:	1021883a 	mov	r16,r2
    c878:	3825883a 	mov	r18,r7
    c87c:	003f0a06 	br	c4a8 <__adddf3+0x170>
    c880:	2023883a 	mov	r17,r4
    c884:	003f0d06 	br	c4bc <__adddf3+0x184>
    c888:	0081ffc4 	movi	r2,2047
    c88c:	80bf3f1e 	bne	r16,r2,c58c <__adddf3+0x254>
    c890:	003ec806 	br	c3b4 <__adddf3+0x7c>
    c894:	0005883a 	mov	r2,zero
    c898:	003fb106 	br	c760 <__adddf3+0x428>
    c89c:	0007883a 	mov	r3,zero
    c8a0:	003fbc06 	br	c794 <__adddf3+0x45c>
    c8a4:	4444b03a 	or	r2,r8,r17
    c8a8:	8000871e 	bne	r16,zero,cac8 <__adddf3+0x790>
    c8ac:	1000ba26 	beq	r2,zero,cb98 <__adddf3+0x860>
    c8b0:	4984b03a 	or	r2,r9,r6
    c8b4:	103ebf26 	beq	r2,zero,c3b4 <__adddf3+0x7c>
    c8b8:	8985883a 	add	r2,r17,r6
    c8bc:	4247883a 	add	r3,r8,r9
    c8c0:	1451803a 	cmpltu	r8,r2,r17
    c8c4:	40d1883a 	add	r8,r8,r3
    c8c8:	40c0202c 	andhi	r3,r8,128
    c8cc:	1023883a 	mov	r17,r2
    c8d0:	183f1a26 	beq	r3,zero,c53c <__adddf3+0x204>
    c8d4:	00bfe034 	movhi	r2,65408
    c8d8:	10bfffc4 	addi	r2,r2,-1
    c8dc:	2021883a 	mov	r16,r4
    c8e0:	4090703a 	and	r8,r8,r2
    c8e4:	003eb306 	br	c3b4 <__adddf3+0x7c>
    c8e8:	4444b03a 	or	r2,r8,r17
    c8ec:	8000291e 	bne	r16,zero,c994 <__adddf3+0x65c>
    c8f0:	10004b1e 	bne	r2,zero,ca20 <__adddf3+0x6e8>
    c8f4:	4990b03a 	or	r8,r9,r6
    c8f8:	40008b26 	beq	r8,zero,cb28 <__adddf3+0x7f0>
    c8fc:	4811883a 	mov	r8,r9
    c900:	3023883a 	mov	r17,r6
    c904:	3825883a 	mov	r18,r7
    c908:	003eaa06 	br	c3b4 <__adddf3+0x7c>
    c90c:	1021883a 	mov	r16,r2
    c910:	0011883a 	mov	r8,zero
    c914:	0005883a 	mov	r2,zero
    c918:	003f0f06 	br	c558 <__adddf3+0x220>
    c91c:	217ff804 	addi	r5,r4,-32
    c920:	00800804 	movi	r2,32
    c924:	494ad83a 	srl	r5,r9,r5
    c928:	20807d26 	beq	r4,r2,cb20 <__adddf3+0x7e8>
    c92c:	00801004 	movi	r2,64
    c930:	1109c83a 	sub	r4,r2,r4
    c934:	4912983a 	sll	r9,r9,r4
    c938:	498cb03a 	or	r6,r9,r6
    c93c:	300cc03a 	cmpne	r6,r6,zero
    c940:	298ab03a 	or	r5,r5,r6
    c944:	0013883a 	mov	r9,zero
    c948:	003f1506 	br	c5a0 <__adddf3+0x268>
    c94c:	0101ffc4 	movi	r4,2047
    c950:	113f9a1e 	bne	r2,r4,c7bc <__adddf3+0x484>
    c954:	4811883a 	mov	r8,r9
    c958:	3023883a 	mov	r17,r6
    c95c:	1021883a 	mov	r16,r2
    c960:	3825883a 	mov	r18,r7
    c964:	003e9306 	br	c3b4 <__adddf3+0x7c>
    c968:	8000161e 	bne	r16,zero,c9c4 <__adddf3+0x68c>
    c96c:	444ab03a 	or	r5,r8,r17
    c970:	28005126 	beq	r5,zero,cab8 <__adddf3+0x780>
    c974:	0108303a 	nor	r4,zero,r4
    c978:	20004d1e 	bne	r4,zero,cab0 <__adddf3+0x778>
    c97c:	89a3883a 	add	r17,r17,r6
    c980:	4253883a 	add	r9,r8,r9
    c984:	898d803a 	cmpltu	r6,r17,r6
    c988:	3251883a 	add	r8,r6,r9
    c98c:	1021883a 	mov	r16,r2
    c990:	003f0806 	br	c5b4 <__adddf3+0x27c>
    c994:	1000301e 	bne	r2,zero,ca58 <__adddf3+0x720>
    c998:	4984b03a 	or	r2,r9,r6
    c99c:	10007126 	beq	r2,zero,cb64 <__adddf3+0x82c>
    c9a0:	4811883a 	mov	r8,r9
    c9a4:	3023883a 	mov	r17,r6
    c9a8:	3825883a 	mov	r18,r7
    c9ac:	0401ffc4 	movi	r16,2047
    c9b0:	003e8006 	br	c3b4 <__adddf3+0x7c>
    c9b4:	4462b03a 	or	r17,r8,r17
    c9b8:	8822c03a 	cmpne	r17,r17,zero
    c9bc:	0007883a 	mov	r3,zero
    c9c0:	003f8b06 	br	c7f0 <__adddf3+0x4b8>
    c9c4:	0141ffc4 	movi	r5,2047
    c9c8:	11403b26 	beq	r2,r5,cab8 <__adddf3+0x780>
    c9cc:	0109c83a 	sub	r4,zero,r4
    c9d0:	42002034 	orhi	r8,r8,128
    c9d4:	01400e04 	movi	r5,56
    c9d8:	29006716 	blt	r5,r4,cb78 <__adddf3+0x840>
    c9dc:	014007c4 	movi	r5,31
    c9e0:	29007016 	blt	r5,r4,cba4 <__adddf3+0x86c>
    c9e4:	01400804 	movi	r5,32
    c9e8:	290bc83a 	sub	r5,r5,r4
    c9ec:	4154983a 	sll	r10,r8,r5
    c9f0:	890ed83a 	srl	r7,r17,r4
    c9f4:	894a983a 	sll	r5,r17,r5
    c9f8:	4108d83a 	srl	r4,r8,r4
    c9fc:	51e2b03a 	or	r17,r10,r7
    ca00:	280ac03a 	cmpne	r5,r5,zero
    ca04:	8962b03a 	or	r17,r17,r5
    ca08:	89a3883a 	add	r17,r17,r6
    ca0c:	2253883a 	add	r9,r4,r9
    ca10:	898d803a 	cmpltu	r6,r17,r6
    ca14:	3251883a 	add	r8,r6,r9
    ca18:	1021883a 	mov	r16,r2
    ca1c:	003ee506 	br	c5b4 <__adddf3+0x27c>
    ca20:	4984b03a 	or	r2,r9,r6
    ca24:	103e6326 	beq	r2,zero,c3b4 <__adddf3+0x7c>
    ca28:	8987c83a 	sub	r3,r17,r6
    ca2c:	88c9803a 	cmpltu	r4,r17,r3
    ca30:	4245c83a 	sub	r2,r8,r9
    ca34:	1105c83a 	sub	r2,r2,r4
    ca38:	1100202c 	andhi	r4,r2,128
    ca3c:	203ebb26 	beq	r4,zero,c52c <__adddf3+0x1f4>
    ca40:	3463c83a 	sub	r17,r6,r17
    ca44:	4a07c83a 	sub	r3,r9,r8
    ca48:	344d803a 	cmpltu	r6,r6,r17
    ca4c:	1991c83a 	sub	r8,r3,r6
    ca50:	3825883a 	mov	r18,r7
    ca54:	003e5706 	br	c3b4 <__adddf3+0x7c>
    ca58:	4984b03a 	or	r2,r9,r6
    ca5c:	10002e26 	beq	r2,zero,cb18 <__adddf3+0x7e0>
    ca60:	4004d0fa 	srli	r2,r8,3
    ca64:	8822d0fa 	srli	r17,r17,3
    ca68:	4010977a 	slli	r8,r8,29
    ca6c:	10c0022c 	andhi	r3,r2,8
    ca70:	4462b03a 	or	r17,r8,r17
    ca74:	18000826 	beq	r3,zero,ca98 <__adddf3+0x760>
    ca78:	4808d0fa 	srli	r4,r9,3
    ca7c:	20c0022c 	andhi	r3,r4,8
    ca80:	1800051e 	bne	r3,zero,ca98 <__adddf3+0x760>
    ca84:	300cd0fa 	srli	r6,r6,3
    ca88:	4806977a 	slli	r3,r9,29
    ca8c:	2005883a 	mov	r2,r4
    ca90:	3825883a 	mov	r18,r7
    ca94:	19a2b03a 	or	r17,r3,r6
    ca98:	8810d77a 	srli	r8,r17,29
    ca9c:	100490fa 	slli	r2,r2,3
    caa0:	882290fa 	slli	r17,r17,3
    caa4:	0401ffc4 	movi	r16,2047
    caa8:	4090b03a 	or	r8,r8,r2
    caac:	003e4106 	br	c3b4 <__adddf3+0x7c>
    cab0:	0141ffc4 	movi	r5,2047
    cab4:	117fc71e 	bne	r2,r5,c9d4 <__adddf3+0x69c>
    cab8:	4811883a 	mov	r8,r9
    cabc:	3023883a 	mov	r17,r6
    cac0:	1021883a 	mov	r16,r2
    cac4:	003e3b06 	br	c3b4 <__adddf3+0x7c>
    cac8:	10002f26 	beq	r2,zero,cb88 <__adddf3+0x850>
    cacc:	4984b03a 	or	r2,r9,r6
    cad0:	10001126 	beq	r2,zero,cb18 <__adddf3+0x7e0>
    cad4:	4004d0fa 	srli	r2,r8,3
    cad8:	8822d0fa 	srli	r17,r17,3
    cadc:	4010977a 	slli	r8,r8,29
    cae0:	10c0022c 	andhi	r3,r2,8
    cae4:	4462b03a 	or	r17,r8,r17
    cae8:	183feb26 	beq	r3,zero,ca98 <__adddf3+0x760>
    caec:	4808d0fa 	srli	r4,r9,3
    caf0:	20c0022c 	andhi	r3,r4,8
    caf4:	183fe81e 	bne	r3,zero,ca98 <__adddf3+0x760>
    caf8:	300cd0fa 	srli	r6,r6,3
    cafc:	4806977a 	slli	r3,r9,29
    cb00:	2005883a 	mov	r2,r4
    cb04:	19a2b03a 	or	r17,r3,r6
    cb08:	003fe306 	br	ca98 <__adddf3+0x760>
    cb0c:	0011883a 	mov	r8,zero
    cb10:	0005883a 	mov	r2,zero
    cb14:	003e3f06 	br	c414 <__adddf3+0xdc>
    cb18:	0401ffc4 	movi	r16,2047
    cb1c:	003e2506 	br	c3b4 <__adddf3+0x7c>
    cb20:	0013883a 	mov	r9,zero
    cb24:	003f8406 	br	c938 <__adddf3+0x600>
    cb28:	0005883a 	mov	r2,zero
    cb2c:	0007883a 	mov	r3,zero
    cb30:	003e8906 	br	c558 <__adddf3+0x220>
    cb34:	197ff804 	addi	r5,r3,-32
    cb38:	01000804 	movi	r4,32
    cb3c:	414ad83a 	srl	r5,r8,r5
    cb40:	19002426 	beq	r3,r4,cbd4 <__adddf3+0x89c>
    cb44:	01001004 	movi	r4,64
    cb48:	20c7c83a 	sub	r3,r4,r3
    cb4c:	40c6983a 	sll	r3,r8,r3
    cb50:	1c46b03a 	or	r3,r3,r17
    cb54:	1806c03a 	cmpne	r3,r3,zero
    cb58:	28e2b03a 	or	r17,r5,r3
    cb5c:	0007883a 	mov	r3,zero
    cb60:	003f2306 	br	c7f0 <__adddf3+0x4b8>
    cb64:	0007883a 	mov	r3,zero
    cb68:	5811883a 	mov	r8,r11
    cb6c:	00bfffc4 	movi	r2,-1
    cb70:	0401ffc4 	movi	r16,2047
    cb74:	003e7806 	br	c558 <__adddf3+0x220>
    cb78:	4462b03a 	or	r17,r8,r17
    cb7c:	8822c03a 	cmpne	r17,r17,zero
    cb80:	0009883a 	mov	r4,zero
    cb84:	003fa006 	br	ca08 <__adddf3+0x6d0>
    cb88:	4811883a 	mov	r8,r9
    cb8c:	3023883a 	mov	r17,r6
    cb90:	0401ffc4 	movi	r16,2047
    cb94:	003e0706 	br	c3b4 <__adddf3+0x7c>
    cb98:	4811883a 	mov	r8,r9
    cb9c:	3023883a 	mov	r17,r6
    cba0:	003e0406 	br	c3b4 <__adddf3+0x7c>
    cba4:	21fff804 	addi	r7,r4,-32
    cba8:	01400804 	movi	r5,32
    cbac:	41ced83a 	srl	r7,r8,r7
    cbb0:	21400a26 	beq	r4,r5,cbdc <__adddf3+0x8a4>
    cbb4:	01401004 	movi	r5,64
    cbb8:	2909c83a 	sub	r4,r5,r4
    cbbc:	4108983a 	sll	r4,r8,r4
    cbc0:	2448b03a 	or	r4,r4,r17
    cbc4:	2008c03a 	cmpne	r4,r4,zero
    cbc8:	3922b03a 	or	r17,r7,r4
    cbcc:	0009883a 	mov	r4,zero
    cbd0:	003f8d06 	br	ca08 <__adddf3+0x6d0>
    cbd4:	0007883a 	mov	r3,zero
    cbd8:	003fdd06 	br	cb50 <__adddf3+0x818>
    cbdc:	0009883a 	mov	r4,zero
    cbe0:	003ff706 	br	cbc0 <__adddf3+0x888>

0000cbe4 <__divdf3>:
    cbe4:	defff204 	addi	sp,sp,-56
    cbe8:	dd400915 	stw	r21,36(sp)
    cbec:	282ad53a 	srli	r21,r5,20
    cbf0:	dd000815 	stw	r20,32(sp)
    cbf4:	2828d7fa 	srli	r20,r5,31
    cbf8:	dc000415 	stw	r16,16(sp)
    cbfc:	04000434 	movhi	r16,16
    cc00:	df000c15 	stw	fp,48(sp)
    cc04:	843fffc4 	addi	r16,r16,-1
    cc08:	dfc00d15 	stw	ra,52(sp)
    cc0c:	ddc00b15 	stw	r23,44(sp)
    cc10:	dd800a15 	stw	r22,40(sp)
    cc14:	dcc00715 	stw	r19,28(sp)
    cc18:	dc800615 	stw	r18,24(sp)
    cc1c:	dc400515 	stw	r17,20(sp)
    cc20:	ad41ffcc 	andi	r21,r21,2047
    cc24:	2c20703a 	and	r16,r5,r16
    cc28:	a7003fcc 	andi	fp,r20,255
    cc2c:	a8006126 	beq	r21,zero,cdb4 <__divdf3+0x1d0>
    cc30:	0081ffc4 	movi	r2,2047
    cc34:	2025883a 	mov	r18,r4
    cc38:	a8803726 	beq	r21,r2,cd18 <__divdf3+0x134>
    cc3c:	80800434 	orhi	r2,r16,16
    cc40:	100490fa 	slli	r2,r2,3
    cc44:	2020d77a 	srli	r16,r4,29
    cc48:	202490fa 	slli	r18,r4,3
    cc4c:	ad7f0044 	addi	r21,r21,-1023
    cc50:	80a0b03a 	or	r16,r16,r2
    cc54:	0027883a 	mov	r19,zero
    cc58:	0013883a 	mov	r9,zero
    cc5c:	3804d53a 	srli	r2,r7,20
    cc60:	382cd7fa 	srli	r22,r7,31
    cc64:	04400434 	movhi	r17,16
    cc68:	8c7fffc4 	addi	r17,r17,-1
    cc6c:	1081ffcc 	andi	r2,r2,2047
    cc70:	3011883a 	mov	r8,r6
    cc74:	3c62703a 	and	r17,r7,r17
    cc78:	b5c03fcc 	andi	r23,r22,255
    cc7c:	10006c26 	beq	r2,zero,ce30 <__divdf3+0x24c>
    cc80:	00c1ffc4 	movi	r3,2047
    cc84:	10c06426 	beq	r2,r3,ce18 <__divdf3+0x234>
    cc88:	88c00434 	orhi	r3,r17,16
    cc8c:	180690fa 	slli	r3,r3,3
    cc90:	3022d77a 	srli	r17,r6,29
    cc94:	301090fa 	slli	r8,r6,3
    cc98:	10bf0044 	addi	r2,r2,-1023
    cc9c:	88e2b03a 	or	r17,r17,r3
    cca0:	000f883a 	mov	r7,zero
    cca4:	a58cf03a 	xor	r6,r20,r22
    cca8:	3cc8b03a 	or	r4,r7,r19
    ccac:	a8abc83a 	sub	r21,r21,r2
    ccb0:	008003c4 	movi	r2,15
    ccb4:	3007883a 	mov	r3,r6
    ccb8:	34c03fcc 	andi	r19,r6,255
    ccbc:	11009036 	bltu	r2,r4,cf00 <__divdf3+0x31c>
    ccc0:	200890ba 	slli	r4,r4,2
    ccc4:	00800074 	movhi	r2,1
    ccc8:	10b33604 	addi	r2,r2,-13096
    cccc:	2089883a 	add	r4,r4,r2
    ccd0:	20800017 	ldw	r2,0(r4)
    ccd4:	1000683a 	jmp	r2
    ccd8:	0000cf00 	call	cf0 <i2c_auto_detect+0x24>
    ccdc:	0000cd50 	cmplti	zero,zero,821
    cce0:	0000cef0 	cmpltui	zero,zero,827
    cce4:	0000cd44 	movi	zero,821
    cce8:	0000cef0 	cmpltui	zero,zero,827
    ccec:	0000cec4 	movi	zero,827
    ccf0:	0000cef0 	cmpltui	zero,zero,827
    ccf4:	0000cd44 	movi	zero,821
    ccf8:	0000cd50 	cmplti	zero,zero,821
    ccfc:	0000cd50 	cmplti	zero,zero,821
    cd00:	0000cec4 	movi	zero,827
    cd04:	0000cd44 	movi	zero,821
    cd08:	0000cd34 	movhi	zero,820
    cd0c:	0000cd34 	movhi	zero,820
    cd10:	0000cd34 	movhi	zero,820
    cd14:	0000d1e4 	muli	zero,zero,839
    cd18:	2404b03a 	or	r2,r4,r16
    cd1c:	1000661e 	bne	r2,zero,ceb8 <__divdf3+0x2d4>
    cd20:	04c00204 	movi	r19,8
    cd24:	0021883a 	mov	r16,zero
    cd28:	0025883a 	mov	r18,zero
    cd2c:	02400084 	movi	r9,2
    cd30:	003fca06 	br	cc5c <__divdf3+0x78>
    cd34:	8023883a 	mov	r17,r16
    cd38:	9011883a 	mov	r8,r18
    cd3c:	e02f883a 	mov	r23,fp
    cd40:	480f883a 	mov	r7,r9
    cd44:	00800084 	movi	r2,2
    cd48:	3881311e 	bne	r7,r2,d210 <__divdf3+0x62c>
    cd4c:	b827883a 	mov	r19,r23
    cd50:	98c0004c 	andi	r3,r19,1
    cd54:	0081ffc4 	movi	r2,2047
    cd58:	000b883a 	mov	r5,zero
    cd5c:	0025883a 	mov	r18,zero
    cd60:	1004953a 	slli	r2,r2,20
    cd64:	18c03fcc 	andi	r3,r3,255
    cd68:	04400434 	movhi	r17,16
    cd6c:	8c7fffc4 	addi	r17,r17,-1
    cd70:	180697fa 	slli	r3,r3,31
    cd74:	2c4a703a 	and	r5,r5,r17
    cd78:	288ab03a 	or	r5,r5,r2
    cd7c:	28c6b03a 	or	r3,r5,r3
    cd80:	9005883a 	mov	r2,r18
    cd84:	dfc00d17 	ldw	ra,52(sp)
    cd88:	df000c17 	ldw	fp,48(sp)
    cd8c:	ddc00b17 	ldw	r23,44(sp)
    cd90:	dd800a17 	ldw	r22,40(sp)
    cd94:	dd400917 	ldw	r21,36(sp)
    cd98:	dd000817 	ldw	r20,32(sp)
    cd9c:	dcc00717 	ldw	r19,28(sp)
    cda0:	dc800617 	ldw	r18,24(sp)
    cda4:	dc400517 	ldw	r17,20(sp)
    cda8:	dc000417 	ldw	r16,16(sp)
    cdac:	dec00e04 	addi	sp,sp,56
    cdb0:	f800283a 	ret
    cdb4:	2404b03a 	or	r2,r4,r16
    cdb8:	2027883a 	mov	r19,r4
    cdbc:	10003926 	beq	r2,zero,cea4 <__divdf3+0x2c0>
    cdc0:	80012e26 	beq	r16,zero,d27c <__divdf3+0x698>
    cdc4:	8009883a 	mov	r4,r16
    cdc8:	d9800315 	stw	r6,12(sp)
    cdcc:	d9c00215 	stw	r7,8(sp)
    cdd0:	000e93c0 	call	e93c <__clzsi2>
    cdd4:	d9800317 	ldw	r6,12(sp)
    cdd8:	d9c00217 	ldw	r7,8(sp)
    cddc:	113ffd44 	addi	r4,r2,-11
    cde0:	00c00704 	movi	r3,28
    cde4:	19012116 	blt	r3,r4,d26c <__divdf3+0x688>
    cde8:	00c00744 	movi	r3,29
    cdec:	147ffe04 	addi	r17,r2,-8
    cdf0:	1907c83a 	sub	r3,r3,r4
    cdf4:	8460983a 	sll	r16,r16,r17
    cdf8:	98c6d83a 	srl	r3,r19,r3
    cdfc:	9c64983a 	sll	r18,r19,r17
    ce00:	1c20b03a 	or	r16,r3,r16
    ce04:	1080fcc4 	addi	r2,r2,1011
    ce08:	00abc83a 	sub	r21,zero,r2
    ce0c:	0027883a 	mov	r19,zero
    ce10:	0013883a 	mov	r9,zero
    ce14:	003f9106 	br	cc5c <__divdf3+0x78>
    ce18:	3446b03a 	or	r3,r6,r17
    ce1c:	18001f1e 	bne	r3,zero,ce9c <__divdf3+0x2b8>
    ce20:	0023883a 	mov	r17,zero
    ce24:	0011883a 	mov	r8,zero
    ce28:	01c00084 	movi	r7,2
    ce2c:	003f9d06 	br	cca4 <__divdf3+0xc0>
    ce30:	3446b03a 	or	r3,r6,r17
    ce34:	18001526 	beq	r3,zero,ce8c <__divdf3+0x2a8>
    ce38:	88011b26 	beq	r17,zero,d2a8 <__divdf3+0x6c4>
    ce3c:	8809883a 	mov	r4,r17
    ce40:	d9800315 	stw	r6,12(sp)
    ce44:	da400115 	stw	r9,4(sp)
    ce48:	000e93c0 	call	e93c <__clzsi2>
    ce4c:	d9800317 	ldw	r6,12(sp)
    ce50:	da400117 	ldw	r9,4(sp)
    ce54:	113ffd44 	addi	r4,r2,-11
    ce58:	00c00704 	movi	r3,28
    ce5c:	19010e16 	blt	r3,r4,d298 <__divdf3+0x6b4>
    ce60:	00c00744 	movi	r3,29
    ce64:	123ffe04 	addi	r8,r2,-8
    ce68:	1907c83a 	sub	r3,r3,r4
    ce6c:	8a22983a 	sll	r17,r17,r8
    ce70:	30c6d83a 	srl	r3,r6,r3
    ce74:	3210983a 	sll	r8,r6,r8
    ce78:	1c62b03a 	or	r17,r3,r17
    ce7c:	1080fcc4 	addi	r2,r2,1011
    ce80:	0085c83a 	sub	r2,zero,r2
    ce84:	000f883a 	mov	r7,zero
    ce88:	003f8606 	br	cca4 <__divdf3+0xc0>
    ce8c:	0023883a 	mov	r17,zero
    ce90:	0011883a 	mov	r8,zero
    ce94:	01c00044 	movi	r7,1
    ce98:	003f8206 	br	cca4 <__divdf3+0xc0>
    ce9c:	01c000c4 	movi	r7,3
    cea0:	003f8006 	br	cca4 <__divdf3+0xc0>
    cea4:	04c00104 	movi	r19,4
    cea8:	0021883a 	mov	r16,zero
    ceac:	0025883a 	mov	r18,zero
    ceb0:	02400044 	movi	r9,1
    ceb4:	003f6906 	br	cc5c <__divdf3+0x78>
    ceb8:	04c00304 	movi	r19,12
    cebc:	024000c4 	movi	r9,3
    cec0:	003f6606 	br	cc5c <__divdf3+0x78>
    cec4:	01400434 	movhi	r5,16
    cec8:	0007883a 	mov	r3,zero
    cecc:	297fffc4 	addi	r5,r5,-1
    ced0:	04bfffc4 	movi	r18,-1
    ced4:	0081ffc4 	movi	r2,2047
    ced8:	003fa106 	br	cd60 <__divdf3+0x17c>
    cedc:	00c00044 	movi	r3,1
    cee0:	1887c83a 	sub	r3,r3,r2
    cee4:	01000e04 	movi	r4,56
    cee8:	20c1210e 	bge	r4,r3,d370 <__divdf3+0x78c>
    ceec:	98c0004c 	andi	r3,r19,1
    cef0:	0005883a 	mov	r2,zero
    cef4:	000b883a 	mov	r5,zero
    cef8:	0025883a 	mov	r18,zero
    cefc:	003f9806 	br	cd60 <__divdf3+0x17c>
    cf00:	8c00fd36 	bltu	r17,r16,d2f8 <__divdf3+0x714>
    cf04:	8440fb26 	beq	r16,r17,d2f4 <__divdf3+0x710>
    cf08:	8007883a 	mov	r3,r16
    cf0c:	ad7fffc4 	addi	r21,r21,-1
    cf10:	0021883a 	mov	r16,zero
    cf14:	4004d63a 	srli	r2,r8,24
    cf18:	8822923a 	slli	r17,r17,8
    cf1c:	1809883a 	mov	r4,r3
    cf20:	402c923a 	slli	r22,r8,8
    cf24:	88b8b03a 	or	fp,r17,r2
    cf28:	e028d43a 	srli	r20,fp,16
    cf2c:	d8c00015 	stw	r3,0(sp)
    cf30:	e5ffffcc 	andi	r23,fp,65535
    cf34:	a00b883a 	mov	r5,r20
    cf38:	00021500 	call	2150 <__udivsi3>
    cf3c:	d8c00017 	ldw	r3,0(sp)
    cf40:	a00b883a 	mov	r5,r20
    cf44:	d8800315 	stw	r2,12(sp)
    cf48:	1809883a 	mov	r4,r3
    cf4c:	00021b40 	call	21b4 <__umodsi3>
    cf50:	d9800317 	ldw	r6,12(sp)
    cf54:	1006943a 	slli	r3,r2,16
    cf58:	9004d43a 	srli	r2,r18,16
    cf5c:	b9a3383a 	mul	r17,r23,r6
    cf60:	10c4b03a 	or	r2,r2,r3
    cf64:	1440062e 	bgeu	r2,r17,cf80 <__divdf3+0x39c>
    cf68:	1705883a 	add	r2,r2,fp
    cf6c:	30ffffc4 	addi	r3,r6,-1
    cf70:	1700ee36 	bltu	r2,fp,d32c <__divdf3+0x748>
    cf74:	1440ed2e 	bgeu	r2,r17,d32c <__divdf3+0x748>
    cf78:	31bfff84 	addi	r6,r6,-2
    cf7c:	1705883a 	add	r2,r2,fp
    cf80:	1463c83a 	sub	r17,r2,r17
    cf84:	a00b883a 	mov	r5,r20
    cf88:	8809883a 	mov	r4,r17
    cf8c:	d9800315 	stw	r6,12(sp)
    cf90:	00021500 	call	2150 <__udivsi3>
    cf94:	a00b883a 	mov	r5,r20
    cf98:	8809883a 	mov	r4,r17
    cf9c:	d8800215 	stw	r2,8(sp)
    cfa0:	00021b40 	call	21b4 <__umodsi3>
    cfa4:	d9c00217 	ldw	r7,8(sp)
    cfa8:	1004943a 	slli	r2,r2,16
    cfac:	94bfffcc 	andi	r18,r18,65535
    cfb0:	b9d1383a 	mul	r8,r23,r7
    cfb4:	90a4b03a 	or	r18,r18,r2
    cfb8:	d9800317 	ldw	r6,12(sp)
    cfbc:	9200062e 	bgeu	r18,r8,cfd8 <__divdf3+0x3f4>
    cfc0:	9725883a 	add	r18,r18,fp
    cfc4:	38bfffc4 	addi	r2,r7,-1
    cfc8:	9700d636 	bltu	r18,fp,d324 <__divdf3+0x740>
    cfcc:	9200d52e 	bgeu	r18,r8,d324 <__divdf3+0x740>
    cfd0:	39ffff84 	addi	r7,r7,-2
    cfd4:	9725883a 	add	r18,r18,fp
    cfd8:	3004943a 	slli	r2,r6,16
    cfdc:	b012d43a 	srli	r9,r22,16
    cfe0:	b1bfffcc 	andi	r6,r22,65535
    cfe4:	11e2b03a 	or	r17,r2,r7
    cfe8:	8806d43a 	srli	r3,r17,16
    cfec:	893fffcc 	andi	r4,r17,65535
    cff0:	218b383a 	mul	r5,r4,r6
    cff4:	30c5383a 	mul	r2,r6,r3
    cff8:	2249383a 	mul	r4,r4,r9
    cffc:	280ed43a 	srli	r7,r5,16
    d000:	9225c83a 	sub	r18,r18,r8
    d004:	2089883a 	add	r4,r4,r2
    d008:	3909883a 	add	r4,r7,r4
    d00c:	1a47383a 	mul	r3,r3,r9
    d010:	2080022e 	bgeu	r4,r2,d01c <__divdf3+0x438>
    d014:	00800074 	movhi	r2,1
    d018:	1887883a 	add	r3,r3,r2
    d01c:	2004d43a 	srli	r2,r4,16
    d020:	2008943a 	slli	r4,r4,16
    d024:	297fffcc 	andi	r5,r5,65535
    d028:	10c7883a 	add	r3,r2,r3
    d02c:	2149883a 	add	r4,r4,r5
    d030:	90c0a536 	bltu	r18,r3,d2c8 <__divdf3+0x6e4>
    d034:	90c0bf26 	beq	r18,r3,d334 <__divdf3+0x750>
    d038:	90c7c83a 	sub	r3,r18,r3
    d03c:	810fc83a 	sub	r7,r16,r4
    d040:	81e5803a 	cmpltu	r18,r16,r7
    d044:	1ca5c83a 	sub	r18,r3,r18
    d048:	e480c126 	beq	fp,r18,d350 <__divdf3+0x76c>
    d04c:	a00b883a 	mov	r5,r20
    d050:	9009883a 	mov	r4,r18
    d054:	d9800315 	stw	r6,12(sp)
    d058:	d9c00215 	stw	r7,8(sp)
    d05c:	da400115 	stw	r9,4(sp)
    d060:	00021500 	call	2150 <__udivsi3>
    d064:	a00b883a 	mov	r5,r20
    d068:	9009883a 	mov	r4,r18
    d06c:	d8800015 	stw	r2,0(sp)
    d070:	00021b40 	call	21b4 <__umodsi3>
    d074:	d9c00217 	ldw	r7,8(sp)
    d078:	da000017 	ldw	r8,0(sp)
    d07c:	1006943a 	slli	r3,r2,16
    d080:	3804d43a 	srli	r2,r7,16
    d084:	ba21383a 	mul	r16,r23,r8
    d088:	d9800317 	ldw	r6,12(sp)
    d08c:	10c4b03a 	or	r2,r2,r3
    d090:	da400117 	ldw	r9,4(sp)
    d094:	1400062e 	bgeu	r2,r16,d0b0 <__divdf3+0x4cc>
    d098:	1705883a 	add	r2,r2,fp
    d09c:	40ffffc4 	addi	r3,r8,-1
    d0a0:	1700ad36 	bltu	r2,fp,d358 <__divdf3+0x774>
    d0a4:	1400ac2e 	bgeu	r2,r16,d358 <__divdf3+0x774>
    d0a8:	423fff84 	addi	r8,r8,-2
    d0ac:	1705883a 	add	r2,r2,fp
    d0b0:	1421c83a 	sub	r16,r2,r16
    d0b4:	a00b883a 	mov	r5,r20
    d0b8:	8009883a 	mov	r4,r16
    d0bc:	d9800315 	stw	r6,12(sp)
    d0c0:	d9c00215 	stw	r7,8(sp)
    d0c4:	da000015 	stw	r8,0(sp)
    d0c8:	da400115 	stw	r9,4(sp)
    d0cc:	00021500 	call	2150 <__udivsi3>
    d0d0:	8009883a 	mov	r4,r16
    d0d4:	a00b883a 	mov	r5,r20
    d0d8:	1025883a 	mov	r18,r2
    d0dc:	00021b40 	call	21b4 <__umodsi3>
    d0e0:	d9c00217 	ldw	r7,8(sp)
    d0e4:	1004943a 	slli	r2,r2,16
    d0e8:	bcaf383a 	mul	r23,r23,r18
    d0ec:	393fffcc 	andi	r4,r7,65535
    d0f0:	2088b03a 	or	r4,r4,r2
    d0f4:	d9800317 	ldw	r6,12(sp)
    d0f8:	da000017 	ldw	r8,0(sp)
    d0fc:	da400117 	ldw	r9,4(sp)
    d100:	25c0062e 	bgeu	r4,r23,d11c <__divdf3+0x538>
    d104:	2709883a 	add	r4,r4,fp
    d108:	90bfffc4 	addi	r2,r18,-1
    d10c:	27009436 	bltu	r4,fp,d360 <__divdf3+0x77c>
    d110:	25c0932e 	bgeu	r4,r23,d360 <__divdf3+0x77c>
    d114:	94bfff84 	addi	r18,r18,-2
    d118:	2709883a 	add	r4,r4,fp
    d11c:	4004943a 	slli	r2,r8,16
    d120:	25efc83a 	sub	r23,r4,r23
    d124:	1490b03a 	or	r8,r2,r18
    d128:	4008d43a 	srli	r4,r8,16
    d12c:	40ffffcc 	andi	r3,r8,65535
    d130:	30c5383a 	mul	r2,r6,r3
    d134:	1a47383a 	mul	r3,r3,r9
    d138:	310d383a 	mul	r6,r6,r4
    d13c:	100ad43a 	srli	r5,r2,16
    d140:	4913383a 	mul	r9,r9,r4
    d144:	1987883a 	add	r3,r3,r6
    d148:	28c7883a 	add	r3,r5,r3
    d14c:	1980022e 	bgeu	r3,r6,d158 <__divdf3+0x574>
    d150:	01000074 	movhi	r4,1
    d154:	4913883a 	add	r9,r9,r4
    d158:	1808d43a 	srli	r4,r3,16
    d15c:	1806943a 	slli	r3,r3,16
    d160:	10bfffcc 	andi	r2,r2,65535
    d164:	2253883a 	add	r9,r4,r9
    d168:	1887883a 	add	r3,r3,r2
    d16c:	ba403836 	bltu	r23,r9,d250 <__divdf3+0x66c>
    d170:	ba403626 	beq	r23,r9,d24c <__divdf3+0x668>
    d174:	42000054 	ori	r8,r8,1
    d178:	a880ffc4 	addi	r2,r21,1023
    d17c:	00bf570e 	bge	zero,r2,cedc <__divdf3+0x2f8>
    d180:	40c001cc 	andi	r3,r8,7
    d184:	18000726 	beq	r3,zero,d1a4 <__divdf3+0x5c0>
    d188:	40c003cc 	andi	r3,r8,15
    d18c:	01000104 	movi	r4,4
    d190:	19000426 	beq	r3,r4,d1a4 <__divdf3+0x5c0>
    d194:	4107883a 	add	r3,r8,r4
    d198:	1a11803a 	cmpltu	r8,r3,r8
    d19c:	8a23883a 	add	r17,r17,r8
    d1a0:	1811883a 	mov	r8,r3
    d1a4:	88c0402c 	andhi	r3,r17,256
    d1a8:	18000426 	beq	r3,zero,d1bc <__divdf3+0x5d8>
    d1ac:	00ffc034 	movhi	r3,65280
    d1b0:	18ffffc4 	addi	r3,r3,-1
    d1b4:	a8810004 	addi	r2,r21,1024
    d1b8:	88e2703a 	and	r17,r17,r3
    d1bc:	00c1ff84 	movi	r3,2046
    d1c0:	18bee316 	blt	r3,r2,cd50 <__divdf3+0x16c>
    d1c4:	8824977a 	slli	r18,r17,29
    d1c8:	4010d0fa 	srli	r8,r8,3
    d1cc:	8822927a 	slli	r17,r17,9
    d1d0:	1081ffcc 	andi	r2,r2,2047
    d1d4:	9224b03a 	or	r18,r18,r8
    d1d8:	880ad33a 	srli	r5,r17,12
    d1dc:	98c0004c 	andi	r3,r19,1
    d1e0:	003edf06 	br	cd60 <__divdf3+0x17c>
    d1e4:	8080022c 	andhi	r2,r16,8
    d1e8:	10001226 	beq	r2,zero,d234 <__divdf3+0x650>
    d1ec:	8880022c 	andhi	r2,r17,8
    d1f0:	1000101e 	bne	r2,zero,d234 <__divdf3+0x650>
    d1f4:	00800434 	movhi	r2,16
    d1f8:	89400234 	orhi	r5,r17,8
    d1fc:	10bfffc4 	addi	r2,r2,-1
    d200:	b007883a 	mov	r3,r22
    d204:	288a703a 	and	r5,r5,r2
    d208:	4025883a 	mov	r18,r8
    d20c:	003f3106 	br	ced4 <__divdf3+0x2f0>
    d210:	008000c4 	movi	r2,3
    d214:	3880a626 	beq	r7,r2,d4b0 <__divdf3+0x8cc>
    d218:	00800044 	movi	r2,1
    d21c:	3880521e 	bne	r7,r2,d368 <__divdf3+0x784>
    d220:	b807883a 	mov	r3,r23
    d224:	0005883a 	mov	r2,zero
    d228:	000b883a 	mov	r5,zero
    d22c:	0025883a 	mov	r18,zero
    d230:	003ecb06 	br	cd60 <__divdf3+0x17c>
    d234:	00800434 	movhi	r2,16
    d238:	81400234 	orhi	r5,r16,8
    d23c:	10bfffc4 	addi	r2,r2,-1
    d240:	a007883a 	mov	r3,r20
    d244:	288a703a 	and	r5,r5,r2
    d248:	003f2206 	br	ced4 <__divdf3+0x2f0>
    d24c:	183fca26 	beq	r3,zero,d178 <__divdf3+0x594>
    d250:	e5ef883a 	add	r23,fp,r23
    d254:	40bfffc4 	addi	r2,r8,-1
    d258:	bf00392e 	bgeu	r23,fp,d340 <__divdf3+0x75c>
    d25c:	1011883a 	mov	r8,r2
    d260:	ba7fc41e 	bne	r23,r9,d174 <__divdf3+0x590>
    d264:	b0ffc31e 	bne	r22,r3,d174 <__divdf3+0x590>
    d268:	003fc306 	br	d178 <__divdf3+0x594>
    d26c:	143ff604 	addi	r16,r2,-40
    d270:	9c20983a 	sll	r16,r19,r16
    d274:	0025883a 	mov	r18,zero
    d278:	003ee206 	br	ce04 <__divdf3+0x220>
    d27c:	d9800315 	stw	r6,12(sp)
    d280:	d9c00215 	stw	r7,8(sp)
    d284:	000e93c0 	call	e93c <__clzsi2>
    d288:	10800804 	addi	r2,r2,32
    d28c:	d9c00217 	ldw	r7,8(sp)
    d290:	d9800317 	ldw	r6,12(sp)
    d294:	003ed106 	br	cddc <__divdf3+0x1f8>
    d298:	147ff604 	addi	r17,r2,-40
    d29c:	3462983a 	sll	r17,r6,r17
    d2a0:	0011883a 	mov	r8,zero
    d2a4:	003ef506 	br	ce7c <__divdf3+0x298>
    d2a8:	3009883a 	mov	r4,r6
    d2ac:	d9800315 	stw	r6,12(sp)
    d2b0:	da400115 	stw	r9,4(sp)
    d2b4:	000e93c0 	call	e93c <__clzsi2>
    d2b8:	10800804 	addi	r2,r2,32
    d2bc:	da400117 	ldw	r9,4(sp)
    d2c0:	d9800317 	ldw	r6,12(sp)
    d2c4:	003ee306 	br	ce54 <__divdf3+0x270>
    d2c8:	85a1883a 	add	r16,r16,r22
    d2cc:	8585803a 	cmpltu	r2,r16,r22
    d2d0:	1705883a 	add	r2,r2,fp
    d2d4:	14a5883a 	add	r18,r2,r18
    d2d8:	88bfffc4 	addi	r2,r17,-1
    d2dc:	e4800c2e 	bgeu	fp,r18,d310 <__divdf3+0x72c>
    d2e0:	90c03e36 	bltu	r18,r3,d3dc <__divdf3+0x7f8>
    d2e4:	1c806926 	beq	r3,r18,d48c <__divdf3+0x8a8>
    d2e8:	90c7c83a 	sub	r3,r18,r3
    d2ec:	1023883a 	mov	r17,r2
    d2f0:	003f5206 	br	d03c <__divdf3+0x458>
    d2f4:	923f0436 	bltu	r18,r8,cf08 <__divdf3+0x324>
    d2f8:	800897fa 	slli	r4,r16,31
    d2fc:	9004d07a 	srli	r2,r18,1
    d300:	8006d07a 	srli	r3,r16,1
    d304:	902097fa 	slli	r16,r18,31
    d308:	20a4b03a 	or	r18,r4,r2
    d30c:	003f0106 	br	cf14 <__divdf3+0x330>
    d310:	e4bff51e 	bne	fp,r18,d2e8 <__divdf3+0x704>
    d314:	85bff22e 	bgeu	r16,r22,d2e0 <__divdf3+0x6fc>
    d318:	e0c7c83a 	sub	r3,fp,r3
    d31c:	1023883a 	mov	r17,r2
    d320:	003f4606 	br	d03c <__divdf3+0x458>
    d324:	100f883a 	mov	r7,r2
    d328:	003f2b06 	br	cfd8 <__divdf3+0x3f4>
    d32c:	180d883a 	mov	r6,r3
    d330:	003f1306 	br	cf80 <__divdf3+0x39c>
    d334:	813fe436 	bltu	r16,r4,d2c8 <__divdf3+0x6e4>
    d338:	0007883a 	mov	r3,zero
    d33c:	003f3f06 	br	d03c <__divdf3+0x458>
    d340:	ba402c36 	bltu	r23,r9,d3f4 <__divdf3+0x810>
    d344:	4dc05426 	beq	r9,r23,d498 <__divdf3+0x8b4>
    d348:	1011883a 	mov	r8,r2
    d34c:	003f8906 	br	d174 <__divdf3+0x590>
    d350:	023fffc4 	movi	r8,-1
    d354:	003f8806 	br	d178 <__divdf3+0x594>
    d358:	1811883a 	mov	r8,r3
    d35c:	003f5406 	br	d0b0 <__divdf3+0x4cc>
    d360:	1025883a 	mov	r18,r2
    d364:	003f6d06 	br	d11c <__divdf3+0x538>
    d368:	b827883a 	mov	r19,r23
    d36c:	003f8206 	br	d178 <__divdf3+0x594>
    d370:	010007c4 	movi	r4,31
    d374:	20c02616 	blt	r4,r3,d410 <__divdf3+0x82c>
    d378:	00800804 	movi	r2,32
    d37c:	10c5c83a 	sub	r2,r2,r3
    d380:	888a983a 	sll	r5,r17,r2
    d384:	40c8d83a 	srl	r4,r8,r3
    d388:	4084983a 	sll	r2,r8,r2
    d38c:	88e2d83a 	srl	r17,r17,r3
    d390:	2906b03a 	or	r3,r5,r4
    d394:	1004c03a 	cmpne	r2,r2,zero
    d398:	1886b03a 	or	r3,r3,r2
    d39c:	188001cc 	andi	r2,r3,7
    d3a0:	10000726 	beq	r2,zero,d3c0 <__divdf3+0x7dc>
    d3a4:	188003cc 	andi	r2,r3,15
    d3a8:	01000104 	movi	r4,4
    d3ac:	11000426 	beq	r2,r4,d3c0 <__divdf3+0x7dc>
    d3b0:	1805883a 	mov	r2,r3
    d3b4:	10c00104 	addi	r3,r2,4
    d3b8:	1885803a 	cmpltu	r2,r3,r2
    d3bc:	88a3883a 	add	r17,r17,r2
    d3c0:	8880202c 	andhi	r2,r17,128
    d3c4:	10002726 	beq	r2,zero,d464 <__divdf3+0x880>
    d3c8:	98c0004c 	andi	r3,r19,1
    d3cc:	00800044 	movi	r2,1
    d3d0:	000b883a 	mov	r5,zero
    d3d4:	0025883a 	mov	r18,zero
    d3d8:	003e6106 	br	cd60 <__divdf3+0x17c>
    d3dc:	85a1883a 	add	r16,r16,r22
    d3e0:	8585803a 	cmpltu	r2,r16,r22
    d3e4:	1705883a 	add	r2,r2,fp
    d3e8:	14a5883a 	add	r18,r2,r18
    d3ec:	8c7fff84 	addi	r17,r17,-2
    d3f0:	003f1106 	br	d038 <__divdf3+0x454>
    d3f4:	b589883a 	add	r4,r22,r22
    d3f8:	25ad803a 	cmpltu	r22,r4,r22
    d3fc:	b739883a 	add	fp,r22,fp
    d400:	40bfff84 	addi	r2,r8,-2
    d404:	bf2f883a 	add	r23,r23,fp
    d408:	202d883a 	mov	r22,r4
    d40c:	003f9306 	br	d25c <__divdf3+0x678>
    d410:	013ff844 	movi	r4,-31
    d414:	2085c83a 	sub	r2,r4,r2
    d418:	8888d83a 	srl	r4,r17,r2
    d41c:	00800804 	movi	r2,32
    d420:	18802126 	beq	r3,r2,d4a8 <__divdf3+0x8c4>
    d424:	00801004 	movi	r2,64
    d428:	10c5c83a 	sub	r2,r2,r3
    d42c:	8884983a 	sll	r2,r17,r2
    d430:	1204b03a 	or	r2,r2,r8
    d434:	1004c03a 	cmpne	r2,r2,zero
    d438:	2084b03a 	or	r2,r4,r2
    d43c:	144001cc 	andi	r17,r2,7
    d440:	88000d1e 	bne	r17,zero,d478 <__divdf3+0x894>
    d444:	000b883a 	mov	r5,zero
    d448:	1024d0fa 	srli	r18,r2,3
    d44c:	98c0004c 	andi	r3,r19,1
    d450:	0005883a 	mov	r2,zero
    d454:	9464b03a 	or	r18,r18,r17
    d458:	003e4106 	br	cd60 <__divdf3+0x17c>
    d45c:	1007883a 	mov	r3,r2
    d460:	0023883a 	mov	r17,zero
    d464:	880a927a 	slli	r5,r17,9
    d468:	1805883a 	mov	r2,r3
    d46c:	8822977a 	slli	r17,r17,29
    d470:	280ad33a 	srli	r5,r5,12
    d474:	003ff406 	br	d448 <__divdf3+0x864>
    d478:	10c003cc 	andi	r3,r2,15
    d47c:	01000104 	movi	r4,4
    d480:	193ff626 	beq	r3,r4,d45c <__divdf3+0x878>
    d484:	0023883a 	mov	r17,zero
    d488:	003fca06 	br	d3b4 <__divdf3+0x7d0>
    d48c:	813fd336 	bltu	r16,r4,d3dc <__divdf3+0x7f8>
    d490:	1023883a 	mov	r17,r2
    d494:	003fa806 	br	d338 <__divdf3+0x754>
    d498:	b0ffd636 	bltu	r22,r3,d3f4 <__divdf3+0x810>
    d49c:	1011883a 	mov	r8,r2
    d4a0:	b0ff341e 	bne	r22,r3,d174 <__divdf3+0x590>
    d4a4:	003f3406 	br	d178 <__divdf3+0x594>
    d4a8:	0005883a 	mov	r2,zero
    d4ac:	003fe006 	br	d430 <__divdf3+0x84c>
    d4b0:	00800434 	movhi	r2,16
    d4b4:	89400234 	orhi	r5,r17,8
    d4b8:	10bfffc4 	addi	r2,r2,-1
    d4bc:	b807883a 	mov	r3,r23
    d4c0:	288a703a 	and	r5,r5,r2
    d4c4:	4025883a 	mov	r18,r8
    d4c8:	003e8206 	br	ced4 <__divdf3+0x2f0>

0000d4cc <__eqdf2>:
    d4cc:	2804d53a 	srli	r2,r5,20
    d4d0:	3806d53a 	srli	r3,r7,20
    d4d4:	02000434 	movhi	r8,16
    d4d8:	423fffc4 	addi	r8,r8,-1
    d4dc:	1081ffcc 	andi	r2,r2,2047
    d4e0:	0281ffc4 	movi	r10,2047
    d4e4:	2a12703a 	and	r9,r5,r8
    d4e8:	18c1ffcc 	andi	r3,r3,2047
    d4ec:	3a10703a 	and	r8,r7,r8
    d4f0:	280ad7fa 	srli	r5,r5,31
    d4f4:	380ed7fa 	srli	r7,r7,31
    d4f8:	12801026 	beq	r2,r10,d53c <__eqdf2+0x70>
    d4fc:	0281ffc4 	movi	r10,2047
    d500:	1a800a26 	beq	r3,r10,d52c <__eqdf2+0x60>
    d504:	10c00226 	beq	r2,r3,d510 <__eqdf2+0x44>
    d508:	00800044 	movi	r2,1
    d50c:	f800283a 	ret
    d510:	4a3ffd1e 	bne	r9,r8,d508 <__eqdf2+0x3c>
    d514:	21bffc1e 	bne	r4,r6,d508 <__eqdf2+0x3c>
    d518:	29c00c26 	beq	r5,r7,d54c <__eqdf2+0x80>
    d51c:	103ffa1e 	bne	r2,zero,d508 <__eqdf2+0x3c>
    d520:	2244b03a 	or	r2,r4,r9
    d524:	1004c03a 	cmpne	r2,r2,zero
    d528:	f800283a 	ret
    d52c:	3214b03a 	or	r10,r6,r8
    d530:	503ff426 	beq	r10,zero,d504 <__eqdf2+0x38>
    d534:	00800044 	movi	r2,1
    d538:	f800283a 	ret
    d53c:	2254b03a 	or	r10,r4,r9
    d540:	503fee26 	beq	r10,zero,d4fc <__eqdf2+0x30>
    d544:	00800044 	movi	r2,1
    d548:	f800283a 	ret
    d54c:	0005883a 	mov	r2,zero
    d550:	f800283a 	ret

0000d554 <__gedf2>:
    d554:	2804d53a 	srli	r2,r5,20
    d558:	3806d53a 	srli	r3,r7,20
    d55c:	02000434 	movhi	r8,16
    d560:	423fffc4 	addi	r8,r8,-1
    d564:	1081ffcc 	andi	r2,r2,2047
    d568:	0241ffc4 	movi	r9,2047
    d56c:	2a14703a 	and	r10,r5,r8
    d570:	18c1ffcc 	andi	r3,r3,2047
    d574:	3a10703a 	and	r8,r7,r8
    d578:	280ad7fa 	srli	r5,r5,31
    d57c:	380ed7fa 	srli	r7,r7,31
    d580:	12401d26 	beq	r2,r9,d5f8 <__gedf2+0xa4>
    d584:	0241ffc4 	movi	r9,2047
    d588:	1a401226 	beq	r3,r9,d5d4 <__gedf2+0x80>
    d58c:	1000081e 	bne	r2,zero,d5b0 <__gedf2+0x5c>
    d590:	2296b03a 	or	r11,r4,r10
    d594:	5813003a 	cmpeq	r9,r11,zero
    d598:	1800091e 	bne	r3,zero,d5c0 <__gedf2+0x6c>
    d59c:	3218b03a 	or	r12,r6,r8
    d5a0:	6000071e 	bne	r12,zero,d5c0 <__gedf2+0x6c>
    d5a4:	0005883a 	mov	r2,zero
    d5a8:	5800101e 	bne	r11,zero,d5ec <__gedf2+0x98>
    d5ac:	f800283a 	ret
    d5b0:	18000c1e 	bne	r3,zero,d5e4 <__gedf2+0x90>
    d5b4:	3212b03a 	or	r9,r6,r8
    d5b8:	48000c26 	beq	r9,zero,d5ec <__gedf2+0x98>
    d5bc:	0013883a 	mov	r9,zero
    d5c0:	39c03fcc 	andi	r7,r7,255
    d5c4:	48000826 	beq	r9,zero,d5e8 <__gedf2+0x94>
    d5c8:	38000926 	beq	r7,zero,d5f0 <__gedf2+0x9c>
    d5cc:	00800044 	movi	r2,1
    d5d0:	f800283a 	ret
    d5d4:	3212b03a 	or	r9,r6,r8
    d5d8:	483fec26 	beq	r9,zero,d58c <__gedf2+0x38>
    d5dc:	00bfff84 	movi	r2,-2
    d5e0:	f800283a 	ret
    d5e4:	39c03fcc 	andi	r7,r7,255
    d5e8:	29c00626 	beq	r5,r7,d604 <__gedf2+0xb0>
    d5ec:	283ff726 	beq	r5,zero,d5cc <__gedf2+0x78>
    d5f0:	00bfffc4 	movi	r2,-1
    d5f4:	f800283a 	ret
    d5f8:	2292b03a 	or	r9,r4,r10
    d5fc:	483fe126 	beq	r9,zero,d584 <__gedf2+0x30>
    d600:	003ff606 	br	d5dc <__gedf2+0x88>
    d604:	18bff916 	blt	r3,r2,d5ec <__gedf2+0x98>
    d608:	10c00316 	blt	r2,r3,d618 <__gedf2+0xc4>
    d60c:	42bff736 	bltu	r8,r10,d5ec <__gedf2+0x98>
    d610:	52000326 	beq	r10,r8,d620 <__gedf2+0xcc>
    d614:	5200042e 	bgeu	r10,r8,d628 <__gedf2+0xd4>
    d618:	283fec1e 	bne	r5,zero,d5cc <__gedf2+0x78>
    d61c:	003ff406 	br	d5f0 <__gedf2+0x9c>
    d620:	313ff236 	bltu	r6,r4,d5ec <__gedf2+0x98>
    d624:	21bffc36 	bltu	r4,r6,d618 <__gedf2+0xc4>
    d628:	0005883a 	mov	r2,zero
    d62c:	f800283a 	ret

0000d630 <__ledf2>:
    d630:	2804d53a 	srli	r2,r5,20
    d634:	3810d53a 	srli	r8,r7,20
    d638:	00c00434 	movhi	r3,16
    d63c:	18ffffc4 	addi	r3,r3,-1
    d640:	1081ffcc 	andi	r2,r2,2047
    d644:	0241ffc4 	movi	r9,2047
    d648:	28d4703a 	and	r10,r5,r3
    d64c:	4201ffcc 	andi	r8,r8,2047
    d650:	38c6703a 	and	r3,r7,r3
    d654:	280ad7fa 	srli	r5,r5,31
    d658:	380ed7fa 	srli	r7,r7,31
    d65c:	12401f26 	beq	r2,r9,d6dc <__ledf2+0xac>
    d660:	0241ffc4 	movi	r9,2047
    d664:	42401426 	beq	r8,r9,d6b8 <__ledf2+0x88>
    d668:	1000091e 	bne	r2,zero,d690 <__ledf2+0x60>
    d66c:	2296b03a 	or	r11,r4,r10
    d670:	5813003a 	cmpeq	r9,r11,zero
    d674:	29403fcc 	andi	r5,r5,255
    d678:	40000a1e 	bne	r8,zero,d6a4 <__ledf2+0x74>
    d67c:	30d8b03a 	or	r12,r6,r3
    d680:	6000081e 	bne	r12,zero,d6a4 <__ledf2+0x74>
    d684:	0005883a 	mov	r2,zero
    d688:	5800111e 	bne	r11,zero,d6d0 <__ledf2+0xa0>
    d68c:	f800283a 	ret
    d690:	29403fcc 	andi	r5,r5,255
    d694:	40000c1e 	bne	r8,zero,d6c8 <__ledf2+0x98>
    d698:	30d2b03a 	or	r9,r6,r3
    d69c:	48000c26 	beq	r9,zero,d6d0 <__ledf2+0xa0>
    d6a0:	0013883a 	mov	r9,zero
    d6a4:	39c03fcc 	andi	r7,r7,255
    d6a8:	48000826 	beq	r9,zero,d6cc <__ledf2+0x9c>
    d6ac:	38001126 	beq	r7,zero,d6f4 <__ledf2+0xc4>
    d6b0:	00800044 	movi	r2,1
    d6b4:	f800283a 	ret
    d6b8:	30d2b03a 	or	r9,r6,r3
    d6bc:	483fea26 	beq	r9,zero,d668 <__ledf2+0x38>
    d6c0:	00800084 	movi	r2,2
    d6c4:	f800283a 	ret
    d6c8:	39c03fcc 	andi	r7,r7,255
    d6cc:	39400726 	beq	r7,r5,d6ec <__ledf2+0xbc>
    d6d0:	2800081e 	bne	r5,zero,d6f4 <__ledf2+0xc4>
    d6d4:	00800044 	movi	r2,1
    d6d8:	f800283a 	ret
    d6dc:	2292b03a 	or	r9,r4,r10
    d6e0:	483fdf26 	beq	r9,zero,d660 <__ledf2+0x30>
    d6e4:	00800084 	movi	r2,2
    d6e8:	f800283a 	ret
    d6ec:	4080030e 	bge	r8,r2,d6fc <__ledf2+0xcc>
    d6f0:	383fef26 	beq	r7,zero,d6b0 <__ledf2+0x80>
    d6f4:	00bfffc4 	movi	r2,-1
    d6f8:	f800283a 	ret
    d6fc:	123feb16 	blt	r2,r8,d6ac <__ledf2+0x7c>
    d700:	1abff336 	bltu	r3,r10,d6d0 <__ledf2+0xa0>
    d704:	50c00326 	beq	r10,r3,d714 <__ledf2+0xe4>
    d708:	50c0042e 	bgeu	r10,r3,d71c <__ledf2+0xec>
    d70c:	283fe81e 	bne	r5,zero,d6b0 <__ledf2+0x80>
    d710:	003ff806 	br	d6f4 <__ledf2+0xc4>
    d714:	313fee36 	bltu	r6,r4,d6d0 <__ledf2+0xa0>
    d718:	21bffc36 	bltu	r4,r6,d70c <__ledf2+0xdc>
    d71c:	0005883a 	mov	r2,zero
    d720:	f800283a 	ret

0000d724 <__muldf3>:
    d724:	defff304 	addi	sp,sp,-52
    d728:	2804d53a 	srli	r2,r5,20
    d72c:	dd800915 	stw	r22,36(sp)
    d730:	282cd7fa 	srli	r22,r5,31
    d734:	dc000315 	stw	r16,12(sp)
    d738:	04000434 	movhi	r16,16
    d73c:	dd400815 	stw	r21,32(sp)
    d740:	dc800515 	stw	r18,20(sp)
    d744:	843fffc4 	addi	r16,r16,-1
    d748:	dfc00c15 	stw	ra,48(sp)
    d74c:	df000b15 	stw	fp,44(sp)
    d750:	ddc00a15 	stw	r23,40(sp)
    d754:	dd000715 	stw	r20,28(sp)
    d758:	dcc00615 	stw	r19,24(sp)
    d75c:	dc400415 	stw	r17,16(sp)
    d760:	1481ffcc 	andi	r18,r2,2047
    d764:	2c20703a 	and	r16,r5,r16
    d768:	b02b883a 	mov	r21,r22
    d76c:	b2403fcc 	andi	r9,r22,255
    d770:	90006026 	beq	r18,zero,d8f4 <__muldf3+0x1d0>
    d774:	0081ffc4 	movi	r2,2047
    d778:	2029883a 	mov	r20,r4
    d77c:	90803626 	beq	r18,r2,d858 <__muldf3+0x134>
    d780:	80800434 	orhi	r2,r16,16
    d784:	100490fa 	slli	r2,r2,3
    d788:	2020d77a 	srli	r16,r4,29
    d78c:	202890fa 	slli	r20,r4,3
    d790:	94bf0044 	addi	r18,r18,-1023
    d794:	80a0b03a 	or	r16,r16,r2
    d798:	0027883a 	mov	r19,zero
    d79c:	0039883a 	mov	fp,zero
    d7a0:	3804d53a 	srli	r2,r7,20
    d7a4:	382ed7fa 	srli	r23,r7,31
    d7a8:	04400434 	movhi	r17,16
    d7ac:	8c7fffc4 	addi	r17,r17,-1
    d7b0:	1081ffcc 	andi	r2,r2,2047
    d7b4:	3011883a 	mov	r8,r6
    d7b8:	3c62703a 	and	r17,r7,r17
    d7bc:	ba803fcc 	andi	r10,r23,255
    d7c0:	10006d26 	beq	r2,zero,d978 <__muldf3+0x254>
    d7c4:	00c1ffc4 	movi	r3,2047
    d7c8:	10c06526 	beq	r2,r3,d960 <__muldf3+0x23c>
    d7cc:	88c00434 	orhi	r3,r17,16
    d7d0:	180690fa 	slli	r3,r3,3
    d7d4:	3022d77a 	srli	r17,r6,29
    d7d8:	301090fa 	slli	r8,r6,3
    d7dc:	10bf0044 	addi	r2,r2,-1023
    d7e0:	88e2b03a 	or	r17,r17,r3
    d7e4:	000b883a 	mov	r5,zero
    d7e8:	9085883a 	add	r2,r18,r2
    d7ec:	2cc8b03a 	or	r4,r5,r19
    d7f0:	00c003c4 	movi	r3,15
    d7f4:	bdacf03a 	xor	r22,r23,r22
    d7f8:	12c00044 	addi	r11,r2,1
    d7fc:	19009936 	bltu	r3,r4,da64 <__muldf3+0x340>
    d800:	200890ba 	slli	r4,r4,2
    d804:	00c00074 	movhi	r3,1
    d808:	18f60604 	addi	r3,r3,-10216
    d80c:	20c9883a 	add	r4,r4,r3
    d810:	20c00017 	ldw	r3,0(r4)
    d814:	1800683a 	jmp	r3
    d818:	0000da64 	muli	zero,zero,873
    d81c:	0000d878 	rdprs	zero,zero,865
    d820:	0000d878 	rdprs	zero,zero,865
    d824:	0000d874 	movhi	zero,865
    d828:	0000da40 	call	da4 <i2c_short_read+0x24>
    d82c:	0000da40 	call	da4 <i2c_short_read+0x24>
    d830:	0000da28 	cmpgeui	zero,zero,872
    d834:	0000d874 	movhi	zero,865
    d838:	0000da40 	call	da4 <i2c_short_read+0x24>
    d83c:	0000da28 	cmpgeui	zero,zero,872
    d840:	0000da40 	call	da4 <i2c_short_read+0x24>
    d844:	0000d874 	movhi	zero,865
    d848:	0000da50 	cmplti	zero,zero,873
    d84c:	0000da50 	cmplti	zero,zero,873
    d850:	0000da50 	cmplti	zero,zero,873
    d854:	0000dc6c 	andhi	zero,zero,881
    d858:	2404b03a 	or	r2,r4,r16
    d85c:	10006f1e 	bne	r2,zero,da1c <__muldf3+0x2f8>
    d860:	04c00204 	movi	r19,8
    d864:	0021883a 	mov	r16,zero
    d868:	0029883a 	mov	r20,zero
    d86c:	07000084 	movi	fp,2
    d870:	003fcb06 	br	d7a0 <__muldf3+0x7c>
    d874:	502d883a 	mov	r22,r10
    d878:	00800084 	movi	r2,2
    d87c:	28805726 	beq	r5,r2,d9dc <__muldf3+0x2b8>
    d880:	008000c4 	movi	r2,3
    d884:	28816626 	beq	r5,r2,de20 <__muldf3+0x6fc>
    d888:	00800044 	movi	r2,1
    d88c:	2881411e 	bne	r5,r2,dd94 <__muldf3+0x670>
    d890:	b02b883a 	mov	r21,r22
    d894:	0005883a 	mov	r2,zero
    d898:	000b883a 	mov	r5,zero
    d89c:	0029883a 	mov	r20,zero
    d8a0:	1004953a 	slli	r2,r2,20
    d8a4:	a8c03fcc 	andi	r3,r21,255
    d8a8:	04400434 	movhi	r17,16
    d8ac:	8c7fffc4 	addi	r17,r17,-1
    d8b0:	180697fa 	slli	r3,r3,31
    d8b4:	2c4a703a 	and	r5,r5,r17
    d8b8:	288ab03a 	or	r5,r5,r2
    d8bc:	28c6b03a 	or	r3,r5,r3
    d8c0:	a005883a 	mov	r2,r20
    d8c4:	dfc00c17 	ldw	ra,48(sp)
    d8c8:	df000b17 	ldw	fp,44(sp)
    d8cc:	ddc00a17 	ldw	r23,40(sp)
    d8d0:	dd800917 	ldw	r22,36(sp)
    d8d4:	dd400817 	ldw	r21,32(sp)
    d8d8:	dd000717 	ldw	r20,28(sp)
    d8dc:	dcc00617 	ldw	r19,24(sp)
    d8e0:	dc800517 	ldw	r18,20(sp)
    d8e4:	dc400417 	ldw	r17,16(sp)
    d8e8:	dc000317 	ldw	r16,12(sp)
    d8ec:	dec00d04 	addi	sp,sp,52
    d8f0:	f800283a 	ret
    d8f4:	2404b03a 	or	r2,r4,r16
    d8f8:	2027883a 	mov	r19,r4
    d8fc:	10004226 	beq	r2,zero,da08 <__muldf3+0x2e4>
    d900:	8000fc26 	beq	r16,zero,dcf4 <__muldf3+0x5d0>
    d904:	8009883a 	mov	r4,r16
    d908:	d9800215 	stw	r6,8(sp)
    d90c:	d9c00015 	stw	r7,0(sp)
    d910:	da400115 	stw	r9,4(sp)
    d914:	000e93c0 	call	e93c <__clzsi2>
    d918:	d9800217 	ldw	r6,8(sp)
    d91c:	d9c00017 	ldw	r7,0(sp)
    d920:	da400117 	ldw	r9,4(sp)
    d924:	113ffd44 	addi	r4,r2,-11
    d928:	00c00704 	movi	r3,28
    d92c:	1900ed16 	blt	r3,r4,dce4 <__muldf3+0x5c0>
    d930:	00c00744 	movi	r3,29
    d934:	147ffe04 	addi	r17,r2,-8
    d938:	1907c83a 	sub	r3,r3,r4
    d93c:	8460983a 	sll	r16,r16,r17
    d940:	98c6d83a 	srl	r3,r19,r3
    d944:	9c68983a 	sll	r20,r19,r17
    d948:	1c20b03a 	or	r16,r3,r16
    d94c:	1080fcc4 	addi	r2,r2,1011
    d950:	00a5c83a 	sub	r18,zero,r2
    d954:	0027883a 	mov	r19,zero
    d958:	0039883a 	mov	fp,zero
    d95c:	003f9006 	br	d7a0 <__muldf3+0x7c>
    d960:	3446b03a 	or	r3,r6,r17
    d964:	1800261e 	bne	r3,zero,da00 <__muldf3+0x2dc>
    d968:	0023883a 	mov	r17,zero
    d96c:	0011883a 	mov	r8,zero
    d970:	01400084 	movi	r5,2
    d974:	003f9c06 	br	d7e8 <__muldf3+0xc4>
    d978:	3446b03a 	or	r3,r6,r17
    d97c:	18001c26 	beq	r3,zero,d9f0 <__muldf3+0x2cc>
    d980:	8800ce26 	beq	r17,zero,dcbc <__muldf3+0x598>
    d984:	8809883a 	mov	r4,r17
    d988:	d9800215 	stw	r6,8(sp)
    d98c:	da400115 	stw	r9,4(sp)
    d990:	da800015 	stw	r10,0(sp)
    d994:	000e93c0 	call	e93c <__clzsi2>
    d998:	d9800217 	ldw	r6,8(sp)
    d99c:	da400117 	ldw	r9,4(sp)
    d9a0:	da800017 	ldw	r10,0(sp)
    d9a4:	113ffd44 	addi	r4,r2,-11
    d9a8:	00c00704 	movi	r3,28
    d9ac:	1900bf16 	blt	r3,r4,dcac <__muldf3+0x588>
    d9b0:	00c00744 	movi	r3,29
    d9b4:	123ffe04 	addi	r8,r2,-8
    d9b8:	1907c83a 	sub	r3,r3,r4
    d9bc:	8a22983a 	sll	r17,r17,r8
    d9c0:	30c6d83a 	srl	r3,r6,r3
    d9c4:	3210983a 	sll	r8,r6,r8
    d9c8:	1c62b03a 	or	r17,r3,r17
    d9cc:	1080fcc4 	addi	r2,r2,1011
    d9d0:	0085c83a 	sub	r2,zero,r2
    d9d4:	000b883a 	mov	r5,zero
    d9d8:	003f8306 	br	d7e8 <__muldf3+0xc4>
    d9dc:	b02b883a 	mov	r21,r22
    d9e0:	0081ffc4 	movi	r2,2047
    d9e4:	000b883a 	mov	r5,zero
    d9e8:	0029883a 	mov	r20,zero
    d9ec:	003fac06 	br	d8a0 <__muldf3+0x17c>
    d9f0:	0023883a 	mov	r17,zero
    d9f4:	0011883a 	mov	r8,zero
    d9f8:	01400044 	movi	r5,1
    d9fc:	003f7a06 	br	d7e8 <__muldf3+0xc4>
    da00:	014000c4 	movi	r5,3
    da04:	003f7806 	br	d7e8 <__muldf3+0xc4>
    da08:	04c00104 	movi	r19,4
    da0c:	0021883a 	mov	r16,zero
    da10:	0029883a 	mov	r20,zero
    da14:	07000044 	movi	fp,1
    da18:	003f6106 	br	d7a0 <__muldf3+0x7c>
    da1c:	04c00304 	movi	r19,12
    da20:	070000c4 	movi	fp,3
    da24:	003f5e06 	br	d7a0 <__muldf3+0x7c>
    da28:	01400434 	movhi	r5,16
    da2c:	002b883a 	mov	r21,zero
    da30:	297fffc4 	addi	r5,r5,-1
    da34:	053fffc4 	movi	r20,-1
    da38:	0081ffc4 	movi	r2,2047
    da3c:	003f9806 	br	d8a0 <__muldf3+0x17c>
    da40:	8023883a 	mov	r17,r16
    da44:	a011883a 	mov	r8,r20
    da48:	e00b883a 	mov	r5,fp
    da4c:	003f8a06 	br	d878 <__muldf3+0x154>
    da50:	8023883a 	mov	r17,r16
    da54:	a011883a 	mov	r8,r20
    da58:	482d883a 	mov	r22,r9
    da5c:	e00b883a 	mov	r5,fp
    da60:	003f8506 	br	d878 <__muldf3+0x154>
    da64:	a00ad43a 	srli	r5,r20,16
    da68:	401ad43a 	srli	r13,r8,16
    da6c:	a53fffcc 	andi	r20,r20,65535
    da70:	423fffcc 	andi	r8,r8,65535
    da74:	4519383a 	mul	r12,r8,r20
    da78:	4147383a 	mul	r3,r8,r5
    da7c:	6d09383a 	mul	r4,r13,r20
    da80:	600cd43a 	srli	r6,r12,16
    da84:	2b5d383a 	mul	r14,r5,r13
    da88:	20c9883a 	add	r4,r4,r3
    da8c:	310d883a 	add	r6,r6,r4
    da90:	30c0022e 	bgeu	r6,r3,da9c <__muldf3+0x378>
    da94:	00c00074 	movhi	r3,1
    da98:	70dd883a 	add	r14,r14,r3
    da9c:	8826d43a 	srli	r19,r17,16
    daa0:	8bffffcc 	andi	r15,r17,65535
    daa4:	7d23383a 	mul	r17,r15,r20
    daa8:	7949383a 	mul	r4,r15,r5
    daac:	9d29383a 	mul	r20,r19,r20
    dab0:	8814d43a 	srli	r10,r17,16
    dab4:	3012943a 	slli	r9,r6,16
    dab8:	a129883a 	add	r20,r20,r4
    dabc:	633fffcc 	andi	r12,r12,65535
    dac0:	5515883a 	add	r10,r10,r20
    dac4:	3006d43a 	srli	r3,r6,16
    dac8:	4b13883a 	add	r9,r9,r12
    dacc:	2ccb383a 	mul	r5,r5,r19
    dad0:	5100022e 	bgeu	r10,r4,dadc <__muldf3+0x3b8>
    dad4:	01000074 	movhi	r4,1
    dad8:	290b883a 	add	r5,r5,r4
    dadc:	802ad43a 	srli	r21,r16,16
    dae0:	843fffcc 	andi	r16,r16,65535
    dae4:	440d383a 	mul	r6,r8,r16
    dae8:	4565383a 	mul	r18,r8,r21
    daec:	8349383a 	mul	r4,r16,r13
    daf0:	500e943a 	slli	r7,r10,16
    daf4:	3010d43a 	srli	r8,r6,16
    daf8:	5028d43a 	srli	r20,r10,16
    dafc:	2489883a 	add	r4,r4,r18
    db00:	8abfffcc 	andi	r10,r17,65535
    db04:	3a95883a 	add	r10,r7,r10
    db08:	4119883a 	add	r12,r8,r4
    db0c:	a169883a 	add	r20,r20,r5
    db10:	1a87883a 	add	r3,r3,r10
    db14:	6d5b383a 	mul	r13,r13,r21
    db18:	6480022e 	bgeu	r12,r18,db24 <__muldf3+0x400>
    db1c:	01000074 	movhi	r4,1
    db20:	691b883a 	add	r13,r13,r4
    db24:	7c25383a 	mul	r18,r15,r16
    db28:	7d4b383a 	mul	r5,r15,r21
    db2c:	84cf383a 	mul	r7,r16,r19
    db30:	901ed43a 	srli	r15,r18,16
    db34:	6008d43a 	srli	r4,r12,16
    db38:	6010943a 	slli	r8,r12,16
    db3c:	394f883a 	add	r7,r7,r5
    db40:	333fffcc 	andi	r12,r6,65535
    db44:	79df883a 	add	r15,r15,r7
    db48:	235b883a 	add	r13,r4,r13
    db4c:	9d63383a 	mul	r17,r19,r21
    db50:	4309883a 	add	r4,r8,r12
    db54:	7940022e 	bgeu	r15,r5,db60 <__muldf3+0x43c>
    db58:	01400074 	movhi	r5,1
    db5c:	8963883a 	add	r17,r17,r5
    db60:	780a943a 	slli	r5,r15,16
    db64:	91bfffcc 	andi	r6,r18,65535
    db68:	70c7883a 	add	r3,r14,r3
    db6c:	298d883a 	add	r6,r5,r6
    db70:	1a8f803a 	cmpltu	r7,r3,r10
    db74:	350b883a 	add	r5,r6,r20
    db78:	20c7883a 	add	r3,r4,r3
    db7c:	3955883a 	add	r10,r7,r5
    db80:	1909803a 	cmpltu	r4,r3,r4
    db84:	6a91883a 	add	r8,r13,r10
    db88:	780cd43a 	srli	r6,r15,16
    db8c:	2219883a 	add	r12,r4,r8
    db90:	2d0b803a 	cmpltu	r5,r5,r20
    db94:	51cf803a 	cmpltu	r7,r10,r7
    db98:	29ceb03a 	or	r7,r5,r7
    db9c:	4351803a 	cmpltu	r8,r8,r13
    dba0:	610b803a 	cmpltu	r5,r12,r4
    dba4:	4148b03a 	or	r4,r8,r5
    dba8:	398f883a 	add	r7,r7,r6
    dbac:	3909883a 	add	r4,r7,r4
    dbb0:	1810927a 	slli	r8,r3,9
    dbb4:	2449883a 	add	r4,r4,r17
    dbb8:	2008927a 	slli	r4,r4,9
    dbbc:	6022d5fa 	srli	r17,r12,23
    dbc0:	1806d5fa 	srli	r3,r3,23
    dbc4:	4252b03a 	or	r9,r8,r9
    dbc8:	600a927a 	slli	r5,r12,9
    dbcc:	4810c03a 	cmpne	r8,r9,zero
    dbd0:	2462b03a 	or	r17,r4,r17
    dbd4:	40c6b03a 	or	r3,r8,r3
    dbd8:	8900402c 	andhi	r4,r17,256
    dbdc:	1950b03a 	or	r8,r3,r5
    dbe0:	20000726 	beq	r4,zero,dc00 <__muldf3+0x4dc>
    dbe4:	4006d07a 	srli	r3,r8,1
    dbe8:	880497fa 	slli	r2,r17,31
    dbec:	4200004c 	andi	r8,r8,1
    dbf0:	8822d07a 	srli	r17,r17,1
    dbf4:	1a10b03a 	or	r8,r3,r8
    dbf8:	1210b03a 	or	r8,r2,r8
    dbfc:	5805883a 	mov	r2,r11
    dc00:	1140ffc4 	addi	r5,r2,1023
    dc04:	0140440e 	bge	zero,r5,dd18 <__muldf3+0x5f4>
    dc08:	40c001cc 	andi	r3,r8,7
    dc0c:	18000726 	beq	r3,zero,dc2c <__muldf3+0x508>
    dc10:	40c003cc 	andi	r3,r8,15
    dc14:	01000104 	movi	r4,4
    dc18:	19000426 	beq	r3,r4,dc2c <__muldf3+0x508>
    dc1c:	4107883a 	add	r3,r8,r4
    dc20:	1a11803a 	cmpltu	r8,r3,r8
    dc24:	8a23883a 	add	r17,r17,r8
    dc28:	1811883a 	mov	r8,r3
    dc2c:	88c0402c 	andhi	r3,r17,256
    dc30:	18000426 	beq	r3,zero,dc44 <__muldf3+0x520>
    dc34:	11410004 	addi	r5,r2,1024
    dc38:	00bfc034 	movhi	r2,65280
    dc3c:	10bfffc4 	addi	r2,r2,-1
    dc40:	88a2703a 	and	r17,r17,r2
    dc44:	0081ff84 	movi	r2,2046
    dc48:	117f6416 	blt	r2,r5,d9dc <__muldf3+0x2b8>
    dc4c:	8828977a 	slli	r20,r17,29
    dc50:	4010d0fa 	srli	r8,r8,3
    dc54:	8822927a 	slli	r17,r17,9
    dc58:	2881ffcc 	andi	r2,r5,2047
    dc5c:	a228b03a 	or	r20,r20,r8
    dc60:	880ad33a 	srli	r5,r17,12
    dc64:	b02b883a 	mov	r21,r22
    dc68:	003f0d06 	br	d8a0 <__muldf3+0x17c>
    dc6c:	8080022c 	andhi	r2,r16,8
    dc70:	10000926 	beq	r2,zero,dc98 <__muldf3+0x574>
    dc74:	8880022c 	andhi	r2,r17,8
    dc78:	1000071e 	bne	r2,zero,dc98 <__muldf3+0x574>
    dc7c:	00800434 	movhi	r2,16
    dc80:	89400234 	orhi	r5,r17,8
    dc84:	10bfffc4 	addi	r2,r2,-1
    dc88:	b82b883a 	mov	r21,r23
    dc8c:	288a703a 	and	r5,r5,r2
    dc90:	4029883a 	mov	r20,r8
    dc94:	003f6806 	br	da38 <__muldf3+0x314>
    dc98:	00800434 	movhi	r2,16
    dc9c:	81400234 	orhi	r5,r16,8
    dca0:	10bfffc4 	addi	r2,r2,-1
    dca4:	288a703a 	and	r5,r5,r2
    dca8:	003f6306 	br	da38 <__muldf3+0x314>
    dcac:	147ff604 	addi	r17,r2,-40
    dcb0:	3462983a 	sll	r17,r6,r17
    dcb4:	0011883a 	mov	r8,zero
    dcb8:	003f4406 	br	d9cc <__muldf3+0x2a8>
    dcbc:	3009883a 	mov	r4,r6
    dcc0:	d9800215 	stw	r6,8(sp)
    dcc4:	da400115 	stw	r9,4(sp)
    dcc8:	da800015 	stw	r10,0(sp)
    dccc:	000e93c0 	call	e93c <__clzsi2>
    dcd0:	10800804 	addi	r2,r2,32
    dcd4:	da800017 	ldw	r10,0(sp)
    dcd8:	da400117 	ldw	r9,4(sp)
    dcdc:	d9800217 	ldw	r6,8(sp)
    dce0:	003f3006 	br	d9a4 <__muldf3+0x280>
    dce4:	143ff604 	addi	r16,r2,-40
    dce8:	9c20983a 	sll	r16,r19,r16
    dcec:	0029883a 	mov	r20,zero
    dcf0:	003f1606 	br	d94c <__muldf3+0x228>
    dcf4:	d9800215 	stw	r6,8(sp)
    dcf8:	d9c00015 	stw	r7,0(sp)
    dcfc:	da400115 	stw	r9,4(sp)
    dd00:	000e93c0 	call	e93c <__clzsi2>
    dd04:	10800804 	addi	r2,r2,32
    dd08:	da400117 	ldw	r9,4(sp)
    dd0c:	d9c00017 	ldw	r7,0(sp)
    dd10:	d9800217 	ldw	r6,8(sp)
    dd14:	003f0306 	br	d924 <__muldf3+0x200>
    dd18:	00c00044 	movi	r3,1
    dd1c:	1947c83a 	sub	r3,r3,r5
    dd20:	00800e04 	movi	r2,56
    dd24:	10feda16 	blt	r2,r3,d890 <__muldf3+0x16c>
    dd28:	008007c4 	movi	r2,31
    dd2c:	10c01b16 	blt	r2,r3,dd9c <__muldf3+0x678>
    dd30:	00800804 	movi	r2,32
    dd34:	10c5c83a 	sub	r2,r2,r3
    dd38:	888a983a 	sll	r5,r17,r2
    dd3c:	40c8d83a 	srl	r4,r8,r3
    dd40:	4084983a 	sll	r2,r8,r2
    dd44:	88e2d83a 	srl	r17,r17,r3
    dd48:	2906b03a 	or	r3,r5,r4
    dd4c:	1004c03a 	cmpne	r2,r2,zero
    dd50:	1886b03a 	or	r3,r3,r2
    dd54:	188001cc 	andi	r2,r3,7
    dd58:	10000726 	beq	r2,zero,dd78 <__muldf3+0x654>
    dd5c:	188003cc 	andi	r2,r3,15
    dd60:	01000104 	movi	r4,4
    dd64:	11000426 	beq	r2,r4,dd78 <__muldf3+0x654>
    dd68:	1805883a 	mov	r2,r3
    dd6c:	10c00104 	addi	r3,r2,4
    dd70:	1885803a 	cmpltu	r2,r3,r2
    dd74:	88a3883a 	add	r17,r17,r2
    dd78:	8880202c 	andhi	r2,r17,128
    dd7c:	10001c26 	beq	r2,zero,ddf0 <__muldf3+0x6cc>
    dd80:	b02b883a 	mov	r21,r22
    dd84:	00800044 	movi	r2,1
    dd88:	000b883a 	mov	r5,zero
    dd8c:	0029883a 	mov	r20,zero
    dd90:	003ec306 	br	d8a0 <__muldf3+0x17c>
    dd94:	5805883a 	mov	r2,r11
    dd98:	003f9906 	br	dc00 <__muldf3+0x4dc>
    dd9c:	00bff844 	movi	r2,-31
    dda0:	1145c83a 	sub	r2,r2,r5
    dda4:	8888d83a 	srl	r4,r17,r2
    dda8:	00800804 	movi	r2,32
    ddac:	18801a26 	beq	r3,r2,de18 <__muldf3+0x6f4>
    ddb0:	00801004 	movi	r2,64
    ddb4:	10c5c83a 	sub	r2,r2,r3
    ddb8:	8884983a 	sll	r2,r17,r2
    ddbc:	1204b03a 	or	r2,r2,r8
    ddc0:	1004c03a 	cmpne	r2,r2,zero
    ddc4:	2084b03a 	or	r2,r4,r2
    ddc8:	144001cc 	andi	r17,r2,7
    ddcc:	88000d1e 	bne	r17,zero,de04 <__muldf3+0x6e0>
    ddd0:	000b883a 	mov	r5,zero
    ddd4:	1028d0fa 	srli	r20,r2,3
    ddd8:	b02b883a 	mov	r21,r22
    dddc:	0005883a 	mov	r2,zero
    dde0:	a468b03a 	or	r20,r20,r17
    dde4:	003eae06 	br	d8a0 <__muldf3+0x17c>
    dde8:	1007883a 	mov	r3,r2
    ddec:	0023883a 	mov	r17,zero
    ddf0:	880a927a 	slli	r5,r17,9
    ddf4:	1805883a 	mov	r2,r3
    ddf8:	8822977a 	slli	r17,r17,29
    ddfc:	280ad33a 	srli	r5,r5,12
    de00:	003ff406 	br	ddd4 <__muldf3+0x6b0>
    de04:	10c003cc 	andi	r3,r2,15
    de08:	01000104 	movi	r4,4
    de0c:	193ff626 	beq	r3,r4,dde8 <__muldf3+0x6c4>
    de10:	0023883a 	mov	r17,zero
    de14:	003fd506 	br	dd6c <__muldf3+0x648>
    de18:	0005883a 	mov	r2,zero
    de1c:	003fe706 	br	ddbc <__muldf3+0x698>
    de20:	00800434 	movhi	r2,16
    de24:	89400234 	orhi	r5,r17,8
    de28:	10bfffc4 	addi	r2,r2,-1
    de2c:	b02b883a 	mov	r21,r22
    de30:	288a703a 	and	r5,r5,r2
    de34:	4029883a 	mov	r20,r8
    de38:	003eff06 	br	da38 <__muldf3+0x314>

0000de3c <__subdf3>:
    de3c:	02000434 	movhi	r8,16
    de40:	423fffc4 	addi	r8,r8,-1
    de44:	defffb04 	addi	sp,sp,-20
    de48:	2a14703a 	and	r10,r5,r8
    de4c:	3812d53a 	srli	r9,r7,20
    de50:	3a10703a 	and	r8,r7,r8
    de54:	2006d77a 	srli	r3,r4,29
    de58:	3004d77a 	srli	r2,r6,29
    de5c:	dc000015 	stw	r16,0(sp)
    de60:	501490fa 	slli	r10,r10,3
    de64:	2820d53a 	srli	r16,r5,20
    de68:	401090fa 	slli	r8,r8,3
    de6c:	dc800215 	stw	r18,8(sp)
    de70:	dc400115 	stw	r17,4(sp)
    de74:	dfc00415 	stw	ra,16(sp)
    de78:	202290fa 	slli	r17,r4,3
    de7c:	dcc00315 	stw	r19,12(sp)
    de80:	4a41ffcc 	andi	r9,r9,2047
    de84:	0101ffc4 	movi	r4,2047
    de88:	2824d7fa 	srli	r18,r5,31
    de8c:	8401ffcc 	andi	r16,r16,2047
    de90:	50c6b03a 	or	r3,r10,r3
    de94:	380ed7fa 	srli	r7,r7,31
    de98:	408ab03a 	or	r5,r8,r2
    de9c:	300c90fa 	slli	r6,r6,3
    dea0:	49009626 	beq	r9,r4,e0fc <__subdf3+0x2c0>
    dea4:	39c0005c 	xori	r7,r7,1
    dea8:	8245c83a 	sub	r2,r16,r9
    deac:	3c807426 	beq	r7,r18,e080 <__subdf3+0x244>
    deb0:	0080af0e 	bge	zero,r2,e170 <__subdf3+0x334>
    deb4:	48002a1e 	bne	r9,zero,df60 <__subdf3+0x124>
    deb8:	2988b03a 	or	r4,r5,r6
    debc:	20009a1e 	bne	r4,zero,e128 <__subdf3+0x2ec>
    dec0:	888001cc 	andi	r2,r17,7
    dec4:	10000726 	beq	r2,zero,dee4 <__subdf3+0xa8>
    dec8:	888003cc 	andi	r2,r17,15
    decc:	01000104 	movi	r4,4
    ded0:	11000426 	beq	r2,r4,dee4 <__subdf3+0xa8>
    ded4:	890b883a 	add	r5,r17,r4
    ded8:	2c63803a 	cmpltu	r17,r5,r17
    dedc:	1c47883a 	add	r3,r3,r17
    dee0:	2823883a 	mov	r17,r5
    dee4:	1880202c 	andhi	r2,r3,128
    dee8:	10005926 	beq	r2,zero,e050 <__subdf3+0x214>
    deec:	84000044 	addi	r16,r16,1
    def0:	0081ffc4 	movi	r2,2047
    def4:	8080be26 	beq	r16,r2,e1f0 <__subdf3+0x3b4>
    def8:	017fe034 	movhi	r5,65408
    defc:	297fffc4 	addi	r5,r5,-1
    df00:	1946703a 	and	r3,r3,r5
    df04:	1804977a 	slli	r2,r3,29
    df08:	1806927a 	slli	r3,r3,9
    df0c:	8822d0fa 	srli	r17,r17,3
    df10:	8401ffcc 	andi	r16,r16,2047
    df14:	180ad33a 	srli	r5,r3,12
    df18:	9100004c 	andi	r4,r18,1
    df1c:	1444b03a 	or	r2,r2,r17
    df20:	80c1ffcc 	andi	r3,r16,2047
    df24:	1820953a 	slli	r16,r3,20
    df28:	20c03fcc 	andi	r3,r4,255
    df2c:	180897fa 	slli	r4,r3,31
    df30:	00c00434 	movhi	r3,16
    df34:	18ffffc4 	addi	r3,r3,-1
    df38:	28c6703a 	and	r3,r5,r3
    df3c:	1c06b03a 	or	r3,r3,r16
    df40:	1906b03a 	or	r3,r3,r4
    df44:	dfc00417 	ldw	ra,16(sp)
    df48:	dcc00317 	ldw	r19,12(sp)
    df4c:	dc800217 	ldw	r18,8(sp)
    df50:	dc400117 	ldw	r17,4(sp)
    df54:	dc000017 	ldw	r16,0(sp)
    df58:	dec00504 	addi	sp,sp,20
    df5c:	f800283a 	ret
    df60:	0101ffc4 	movi	r4,2047
    df64:	813fd626 	beq	r16,r4,dec0 <__subdf3+0x84>
    df68:	29402034 	orhi	r5,r5,128
    df6c:	01000e04 	movi	r4,56
    df70:	2080a316 	blt	r4,r2,e200 <__subdf3+0x3c4>
    df74:	010007c4 	movi	r4,31
    df78:	2080c616 	blt	r4,r2,e294 <__subdf3+0x458>
    df7c:	01000804 	movi	r4,32
    df80:	2089c83a 	sub	r4,r4,r2
    df84:	2910983a 	sll	r8,r5,r4
    df88:	308ed83a 	srl	r7,r6,r2
    df8c:	3108983a 	sll	r4,r6,r4
    df90:	2884d83a 	srl	r2,r5,r2
    df94:	41ccb03a 	or	r6,r8,r7
    df98:	2008c03a 	cmpne	r4,r4,zero
    df9c:	310cb03a 	or	r6,r6,r4
    dfa0:	898dc83a 	sub	r6,r17,r6
    dfa4:	89a3803a 	cmpltu	r17,r17,r6
    dfa8:	1887c83a 	sub	r3,r3,r2
    dfac:	1c47c83a 	sub	r3,r3,r17
    dfb0:	3023883a 	mov	r17,r6
    dfb4:	1880202c 	andhi	r2,r3,128
    dfb8:	10002326 	beq	r2,zero,e048 <__subdf3+0x20c>
    dfbc:	04c02034 	movhi	r19,128
    dfc0:	9cffffc4 	addi	r19,r19,-1
    dfc4:	1ce6703a 	and	r19,r3,r19
    dfc8:	98007a26 	beq	r19,zero,e1b4 <__subdf3+0x378>
    dfcc:	9809883a 	mov	r4,r19
    dfd0:	000e93c0 	call	e93c <__clzsi2>
    dfd4:	113ffe04 	addi	r4,r2,-8
    dfd8:	00c007c4 	movi	r3,31
    dfdc:	19007b16 	blt	r3,r4,e1cc <__subdf3+0x390>
    dfe0:	00800804 	movi	r2,32
    dfe4:	1105c83a 	sub	r2,r2,r4
    dfe8:	8884d83a 	srl	r2,r17,r2
    dfec:	9906983a 	sll	r3,r19,r4
    dff0:	8922983a 	sll	r17,r17,r4
    dff4:	10c4b03a 	or	r2,r2,r3
    dff8:	24007816 	blt	r4,r16,e1dc <__subdf3+0x3a0>
    dffc:	2421c83a 	sub	r16,r4,r16
    e000:	80c00044 	addi	r3,r16,1
    e004:	010007c4 	movi	r4,31
    e008:	20c09516 	blt	r4,r3,e260 <__subdf3+0x424>
    e00c:	01400804 	movi	r5,32
    e010:	28cbc83a 	sub	r5,r5,r3
    e014:	88c8d83a 	srl	r4,r17,r3
    e018:	8962983a 	sll	r17,r17,r5
    e01c:	114a983a 	sll	r5,r2,r5
    e020:	10c6d83a 	srl	r3,r2,r3
    e024:	8804c03a 	cmpne	r2,r17,zero
    e028:	290ab03a 	or	r5,r5,r4
    e02c:	28a2b03a 	or	r17,r5,r2
    e030:	0021883a 	mov	r16,zero
    e034:	003fa206 	br	dec0 <__subdf3+0x84>
    e038:	2090b03a 	or	r8,r4,r2
    e03c:	40018e26 	beq	r8,zero,e678 <__subdf3+0x83c>
    e040:	1007883a 	mov	r3,r2
    e044:	2023883a 	mov	r17,r4
    e048:	888001cc 	andi	r2,r17,7
    e04c:	103f9e1e 	bne	r2,zero,dec8 <__subdf3+0x8c>
    e050:	1804977a 	slli	r2,r3,29
    e054:	8822d0fa 	srli	r17,r17,3
    e058:	1810d0fa 	srli	r8,r3,3
    e05c:	9100004c 	andi	r4,r18,1
    e060:	1444b03a 	or	r2,r2,r17
    e064:	00c1ffc4 	movi	r3,2047
    e068:	80c02826 	beq	r16,r3,e10c <__subdf3+0x2d0>
    e06c:	01400434 	movhi	r5,16
    e070:	297fffc4 	addi	r5,r5,-1
    e074:	80e0703a 	and	r16,r16,r3
    e078:	414a703a 	and	r5,r8,r5
    e07c:	003fa806 	br	df20 <__subdf3+0xe4>
    e080:	0080630e 	bge	zero,r2,e210 <__subdf3+0x3d4>
    e084:	48003026 	beq	r9,zero,e148 <__subdf3+0x30c>
    e088:	0101ffc4 	movi	r4,2047
    e08c:	813f8c26 	beq	r16,r4,dec0 <__subdf3+0x84>
    e090:	29402034 	orhi	r5,r5,128
    e094:	01000e04 	movi	r4,56
    e098:	2080a90e 	bge	r4,r2,e340 <__subdf3+0x504>
    e09c:	298cb03a 	or	r6,r5,r6
    e0a0:	3012c03a 	cmpne	r9,r6,zero
    e0a4:	0005883a 	mov	r2,zero
    e0a8:	4c53883a 	add	r9,r9,r17
    e0ac:	4c63803a 	cmpltu	r17,r9,r17
    e0b0:	10c7883a 	add	r3,r2,r3
    e0b4:	88c7883a 	add	r3,r17,r3
    e0b8:	4823883a 	mov	r17,r9
    e0bc:	1880202c 	andhi	r2,r3,128
    e0c0:	1000d026 	beq	r2,zero,e404 <__subdf3+0x5c8>
    e0c4:	84000044 	addi	r16,r16,1
    e0c8:	0081ffc4 	movi	r2,2047
    e0cc:	8080fe26 	beq	r16,r2,e4c8 <__subdf3+0x68c>
    e0d0:	00bfe034 	movhi	r2,65408
    e0d4:	10bfffc4 	addi	r2,r2,-1
    e0d8:	1886703a 	and	r3,r3,r2
    e0dc:	880ad07a 	srli	r5,r17,1
    e0e0:	180497fa 	slli	r2,r3,31
    e0e4:	8900004c 	andi	r4,r17,1
    e0e8:	2922b03a 	or	r17,r5,r4
    e0ec:	1806d07a 	srli	r3,r3,1
    e0f0:	1462b03a 	or	r17,r2,r17
    e0f4:	3825883a 	mov	r18,r7
    e0f8:	003f7106 	br	dec0 <__subdf3+0x84>
    e0fc:	2984b03a 	or	r2,r5,r6
    e100:	103f6826 	beq	r2,zero,dea4 <__subdf3+0x68>
    e104:	39c03fcc 	andi	r7,r7,255
    e108:	003f6706 	br	dea8 <__subdf3+0x6c>
    e10c:	4086b03a 	or	r3,r8,r2
    e110:	18015226 	beq	r3,zero,e65c <__subdf3+0x820>
    e114:	00c00434 	movhi	r3,16
    e118:	41400234 	orhi	r5,r8,8
    e11c:	18ffffc4 	addi	r3,r3,-1
    e120:	28ca703a 	and	r5,r5,r3
    e124:	003f7e06 	br	df20 <__subdf3+0xe4>
    e128:	10bfffc4 	addi	r2,r2,-1
    e12c:	1000491e 	bne	r2,zero,e254 <__subdf3+0x418>
    e130:	898fc83a 	sub	r7,r17,r6
    e134:	89e3803a 	cmpltu	r17,r17,r7
    e138:	1947c83a 	sub	r3,r3,r5
    e13c:	1c47c83a 	sub	r3,r3,r17
    e140:	3823883a 	mov	r17,r7
    e144:	003f9b06 	br	dfb4 <__subdf3+0x178>
    e148:	2988b03a 	or	r4,r5,r6
    e14c:	203f5c26 	beq	r4,zero,dec0 <__subdf3+0x84>
    e150:	10bfffc4 	addi	r2,r2,-1
    e154:	1000931e 	bne	r2,zero,e3a4 <__subdf3+0x568>
    e158:	898d883a 	add	r6,r17,r6
    e15c:	3463803a 	cmpltu	r17,r6,r17
    e160:	1947883a 	add	r3,r3,r5
    e164:	88c7883a 	add	r3,r17,r3
    e168:	3023883a 	mov	r17,r6
    e16c:	003fd306 	br	e0bc <__subdf3+0x280>
    e170:	1000541e 	bne	r2,zero,e2c4 <__subdf3+0x488>
    e174:	80800044 	addi	r2,r16,1
    e178:	1081ffcc 	andi	r2,r2,2047
    e17c:	01000044 	movi	r4,1
    e180:	2080a20e 	bge	r4,r2,e40c <__subdf3+0x5d0>
    e184:	8989c83a 	sub	r4,r17,r6
    e188:	8905803a 	cmpltu	r2,r17,r4
    e18c:	1967c83a 	sub	r19,r3,r5
    e190:	98a7c83a 	sub	r19,r19,r2
    e194:	9880202c 	andhi	r2,r19,128
    e198:	10006326 	beq	r2,zero,e328 <__subdf3+0x4ec>
    e19c:	3463c83a 	sub	r17,r6,r17
    e1a0:	28c7c83a 	sub	r3,r5,r3
    e1a4:	344d803a 	cmpltu	r6,r6,r17
    e1a8:	19a7c83a 	sub	r19,r3,r6
    e1ac:	3825883a 	mov	r18,r7
    e1b0:	983f861e 	bne	r19,zero,dfcc <__subdf3+0x190>
    e1b4:	8809883a 	mov	r4,r17
    e1b8:	000e93c0 	call	e93c <__clzsi2>
    e1bc:	10800804 	addi	r2,r2,32
    e1c0:	113ffe04 	addi	r4,r2,-8
    e1c4:	00c007c4 	movi	r3,31
    e1c8:	193f850e 	bge	r3,r4,dfe0 <__subdf3+0x1a4>
    e1cc:	10bff604 	addi	r2,r2,-40
    e1d0:	8884983a 	sll	r2,r17,r2
    e1d4:	0023883a 	mov	r17,zero
    e1d8:	243f880e 	bge	r4,r16,dffc <__subdf3+0x1c0>
    e1dc:	00ffe034 	movhi	r3,65408
    e1e0:	18ffffc4 	addi	r3,r3,-1
    e1e4:	8121c83a 	sub	r16,r16,r4
    e1e8:	10c6703a 	and	r3,r2,r3
    e1ec:	003f3406 	br	dec0 <__subdf3+0x84>
    e1f0:	9100004c 	andi	r4,r18,1
    e1f4:	000b883a 	mov	r5,zero
    e1f8:	0005883a 	mov	r2,zero
    e1fc:	003f4806 	br	df20 <__subdf3+0xe4>
    e200:	298cb03a 	or	r6,r5,r6
    e204:	300cc03a 	cmpne	r6,r6,zero
    e208:	0005883a 	mov	r2,zero
    e20c:	003f6406 	br	dfa0 <__subdf3+0x164>
    e210:	10009a1e 	bne	r2,zero,e47c <__subdf3+0x640>
    e214:	82400044 	addi	r9,r16,1
    e218:	4881ffcc 	andi	r2,r9,2047
    e21c:	02800044 	movi	r10,1
    e220:	5080670e 	bge	r10,r2,e3c0 <__subdf3+0x584>
    e224:	0081ffc4 	movi	r2,2047
    e228:	4880af26 	beq	r9,r2,e4e8 <__subdf3+0x6ac>
    e22c:	898d883a 	add	r6,r17,r6
    e230:	1945883a 	add	r2,r3,r5
    e234:	3447803a 	cmpltu	r3,r6,r17
    e238:	1887883a 	add	r3,r3,r2
    e23c:	182297fa 	slli	r17,r3,31
    e240:	300cd07a 	srli	r6,r6,1
    e244:	1806d07a 	srli	r3,r3,1
    e248:	4821883a 	mov	r16,r9
    e24c:	89a2b03a 	or	r17,r17,r6
    e250:	003f1b06 	br	dec0 <__subdf3+0x84>
    e254:	0101ffc4 	movi	r4,2047
    e258:	813f441e 	bne	r16,r4,df6c <__subdf3+0x130>
    e25c:	003f1806 	br	dec0 <__subdf3+0x84>
    e260:	843ff844 	addi	r16,r16,-31
    e264:	01400804 	movi	r5,32
    e268:	1408d83a 	srl	r4,r2,r16
    e26c:	19405026 	beq	r3,r5,e3b0 <__subdf3+0x574>
    e270:	01401004 	movi	r5,64
    e274:	28c7c83a 	sub	r3,r5,r3
    e278:	10c4983a 	sll	r2,r2,r3
    e27c:	88a2b03a 	or	r17,r17,r2
    e280:	8822c03a 	cmpne	r17,r17,zero
    e284:	2462b03a 	or	r17,r4,r17
    e288:	0007883a 	mov	r3,zero
    e28c:	0021883a 	mov	r16,zero
    e290:	003f6d06 	br	e048 <__subdf3+0x20c>
    e294:	11fff804 	addi	r7,r2,-32
    e298:	01000804 	movi	r4,32
    e29c:	29ced83a 	srl	r7,r5,r7
    e2a0:	11004526 	beq	r2,r4,e3b8 <__subdf3+0x57c>
    e2a4:	01001004 	movi	r4,64
    e2a8:	2089c83a 	sub	r4,r4,r2
    e2ac:	2904983a 	sll	r2,r5,r4
    e2b0:	118cb03a 	or	r6,r2,r6
    e2b4:	300cc03a 	cmpne	r6,r6,zero
    e2b8:	398cb03a 	or	r6,r7,r6
    e2bc:	0005883a 	mov	r2,zero
    e2c0:	003f3706 	br	dfa0 <__subdf3+0x164>
    e2c4:	80002a26 	beq	r16,zero,e370 <__subdf3+0x534>
    e2c8:	0101ffc4 	movi	r4,2047
    e2cc:	49006626 	beq	r9,r4,e468 <__subdf3+0x62c>
    e2d0:	0085c83a 	sub	r2,zero,r2
    e2d4:	18c02034 	orhi	r3,r3,128
    e2d8:	01000e04 	movi	r4,56
    e2dc:	20807e16 	blt	r4,r2,e4d8 <__subdf3+0x69c>
    e2e0:	010007c4 	movi	r4,31
    e2e4:	2080e716 	blt	r4,r2,e684 <__subdf3+0x848>
    e2e8:	01000804 	movi	r4,32
    e2ec:	2089c83a 	sub	r4,r4,r2
    e2f0:	1914983a 	sll	r10,r3,r4
    e2f4:	8890d83a 	srl	r8,r17,r2
    e2f8:	8908983a 	sll	r4,r17,r4
    e2fc:	1884d83a 	srl	r2,r3,r2
    e300:	5222b03a 	or	r17,r10,r8
    e304:	2006c03a 	cmpne	r3,r4,zero
    e308:	88e2b03a 	or	r17,r17,r3
    e30c:	3463c83a 	sub	r17,r6,r17
    e310:	2885c83a 	sub	r2,r5,r2
    e314:	344d803a 	cmpltu	r6,r6,r17
    e318:	1187c83a 	sub	r3,r2,r6
    e31c:	4821883a 	mov	r16,r9
    e320:	3825883a 	mov	r18,r7
    e324:	003f2306 	br	dfb4 <__subdf3+0x178>
    e328:	24d0b03a 	or	r8,r4,r19
    e32c:	40001b1e 	bne	r8,zero,e39c <__subdf3+0x560>
    e330:	0005883a 	mov	r2,zero
    e334:	0009883a 	mov	r4,zero
    e338:	0021883a 	mov	r16,zero
    e33c:	003f4906 	br	e064 <__subdf3+0x228>
    e340:	010007c4 	movi	r4,31
    e344:	20803a16 	blt	r4,r2,e430 <__subdf3+0x5f4>
    e348:	01000804 	movi	r4,32
    e34c:	2089c83a 	sub	r4,r4,r2
    e350:	2912983a 	sll	r9,r5,r4
    e354:	3090d83a 	srl	r8,r6,r2
    e358:	3108983a 	sll	r4,r6,r4
    e35c:	2884d83a 	srl	r2,r5,r2
    e360:	4a12b03a 	or	r9,r9,r8
    e364:	2008c03a 	cmpne	r4,r4,zero
    e368:	4912b03a 	or	r9,r9,r4
    e36c:	003f4e06 	br	e0a8 <__subdf3+0x26c>
    e370:	1c48b03a 	or	r4,r3,r17
    e374:	20003c26 	beq	r4,zero,e468 <__subdf3+0x62c>
    e378:	0084303a 	nor	r2,zero,r2
    e37c:	1000381e 	bne	r2,zero,e460 <__subdf3+0x624>
    e380:	3463c83a 	sub	r17,r6,r17
    e384:	28c5c83a 	sub	r2,r5,r3
    e388:	344d803a 	cmpltu	r6,r6,r17
    e38c:	1187c83a 	sub	r3,r2,r6
    e390:	4821883a 	mov	r16,r9
    e394:	3825883a 	mov	r18,r7
    e398:	003f0606 	br	dfb4 <__subdf3+0x178>
    e39c:	2023883a 	mov	r17,r4
    e3a0:	003f0906 	br	dfc8 <__subdf3+0x18c>
    e3a4:	0101ffc4 	movi	r4,2047
    e3a8:	813f3a1e 	bne	r16,r4,e094 <__subdf3+0x258>
    e3ac:	003ec406 	br	dec0 <__subdf3+0x84>
    e3b0:	0005883a 	mov	r2,zero
    e3b4:	003fb106 	br	e27c <__subdf3+0x440>
    e3b8:	0005883a 	mov	r2,zero
    e3bc:	003fbc06 	br	e2b0 <__subdf3+0x474>
    e3c0:	1c44b03a 	or	r2,r3,r17
    e3c4:	80008e1e 	bne	r16,zero,e600 <__subdf3+0x7c4>
    e3c8:	1000c826 	beq	r2,zero,e6ec <__subdf3+0x8b0>
    e3cc:	2984b03a 	or	r2,r5,r6
    e3d0:	103ebb26 	beq	r2,zero,dec0 <__subdf3+0x84>
    e3d4:	8989883a 	add	r4,r17,r6
    e3d8:	1945883a 	add	r2,r3,r5
    e3dc:	2447803a 	cmpltu	r3,r4,r17
    e3e0:	1887883a 	add	r3,r3,r2
    e3e4:	1880202c 	andhi	r2,r3,128
    e3e8:	2023883a 	mov	r17,r4
    e3ec:	103f1626 	beq	r2,zero,e048 <__subdf3+0x20c>
    e3f0:	00bfe034 	movhi	r2,65408
    e3f4:	10bfffc4 	addi	r2,r2,-1
    e3f8:	5021883a 	mov	r16,r10
    e3fc:	1886703a 	and	r3,r3,r2
    e400:	003eaf06 	br	dec0 <__subdf3+0x84>
    e404:	3825883a 	mov	r18,r7
    e408:	003f0f06 	br	e048 <__subdf3+0x20c>
    e40c:	1c44b03a 	or	r2,r3,r17
    e410:	8000251e 	bne	r16,zero,e4a8 <__subdf3+0x66c>
    e414:	1000661e 	bne	r2,zero,e5b0 <__subdf3+0x774>
    e418:	2990b03a 	or	r8,r5,r6
    e41c:	40009626 	beq	r8,zero,e678 <__subdf3+0x83c>
    e420:	2807883a 	mov	r3,r5
    e424:	3023883a 	mov	r17,r6
    e428:	3825883a 	mov	r18,r7
    e42c:	003ea406 	br	dec0 <__subdf3+0x84>
    e430:	127ff804 	addi	r9,r2,-32
    e434:	01000804 	movi	r4,32
    e438:	2a52d83a 	srl	r9,r5,r9
    e43c:	11008c26 	beq	r2,r4,e670 <__subdf3+0x834>
    e440:	01001004 	movi	r4,64
    e444:	2085c83a 	sub	r2,r4,r2
    e448:	2884983a 	sll	r2,r5,r2
    e44c:	118cb03a 	or	r6,r2,r6
    e450:	300cc03a 	cmpne	r6,r6,zero
    e454:	4992b03a 	or	r9,r9,r6
    e458:	0005883a 	mov	r2,zero
    e45c:	003f1206 	br	e0a8 <__subdf3+0x26c>
    e460:	0101ffc4 	movi	r4,2047
    e464:	493f9c1e 	bne	r9,r4,e2d8 <__subdf3+0x49c>
    e468:	2807883a 	mov	r3,r5
    e46c:	3023883a 	mov	r17,r6
    e470:	4821883a 	mov	r16,r9
    e474:	3825883a 	mov	r18,r7
    e478:	003e9106 	br	dec0 <__subdf3+0x84>
    e47c:	80001f1e 	bne	r16,zero,e4fc <__subdf3+0x6c0>
    e480:	1c48b03a 	or	r4,r3,r17
    e484:	20005a26 	beq	r4,zero,e5f0 <__subdf3+0x7b4>
    e488:	0084303a 	nor	r2,zero,r2
    e48c:	1000561e 	bne	r2,zero,e5e8 <__subdf3+0x7ac>
    e490:	89a3883a 	add	r17,r17,r6
    e494:	1945883a 	add	r2,r3,r5
    e498:	898d803a 	cmpltu	r6,r17,r6
    e49c:	3087883a 	add	r3,r6,r2
    e4a0:	4821883a 	mov	r16,r9
    e4a4:	003f0506 	br	e0bc <__subdf3+0x280>
    e4a8:	10002b1e 	bne	r2,zero,e558 <__subdf3+0x71c>
    e4ac:	2984b03a 	or	r2,r5,r6
    e4b0:	10008026 	beq	r2,zero,e6b4 <__subdf3+0x878>
    e4b4:	2807883a 	mov	r3,r5
    e4b8:	3023883a 	mov	r17,r6
    e4bc:	3825883a 	mov	r18,r7
    e4c0:	0401ffc4 	movi	r16,2047
    e4c4:	003e7e06 	br	dec0 <__subdf3+0x84>
    e4c8:	3809883a 	mov	r4,r7
    e4cc:	0011883a 	mov	r8,zero
    e4d0:	0005883a 	mov	r2,zero
    e4d4:	003ee306 	br	e064 <__subdf3+0x228>
    e4d8:	1c62b03a 	or	r17,r3,r17
    e4dc:	8822c03a 	cmpne	r17,r17,zero
    e4e0:	0005883a 	mov	r2,zero
    e4e4:	003f8906 	br	e30c <__subdf3+0x4d0>
    e4e8:	3809883a 	mov	r4,r7
    e4ec:	4821883a 	mov	r16,r9
    e4f0:	0011883a 	mov	r8,zero
    e4f4:	0005883a 	mov	r2,zero
    e4f8:	003eda06 	br	e064 <__subdf3+0x228>
    e4fc:	0101ffc4 	movi	r4,2047
    e500:	49003b26 	beq	r9,r4,e5f0 <__subdf3+0x7b4>
    e504:	0085c83a 	sub	r2,zero,r2
    e508:	18c02034 	orhi	r3,r3,128
    e50c:	01000e04 	movi	r4,56
    e510:	20806e16 	blt	r4,r2,e6cc <__subdf3+0x890>
    e514:	010007c4 	movi	r4,31
    e518:	20807716 	blt	r4,r2,e6f8 <__subdf3+0x8bc>
    e51c:	01000804 	movi	r4,32
    e520:	2089c83a 	sub	r4,r4,r2
    e524:	1914983a 	sll	r10,r3,r4
    e528:	8890d83a 	srl	r8,r17,r2
    e52c:	8908983a 	sll	r4,r17,r4
    e530:	1884d83a 	srl	r2,r3,r2
    e534:	5222b03a 	or	r17,r10,r8
    e538:	2006c03a 	cmpne	r3,r4,zero
    e53c:	88e2b03a 	or	r17,r17,r3
    e540:	89a3883a 	add	r17,r17,r6
    e544:	1145883a 	add	r2,r2,r5
    e548:	898d803a 	cmpltu	r6,r17,r6
    e54c:	3087883a 	add	r3,r6,r2
    e550:	4821883a 	mov	r16,r9
    e554:	003ed906 	br	e0bc <__subdf3+0x280>
    e558:	2984b03a 	or	r2,r5,r6
    e55c:	10004226 	beq	r2,zero,e668 <__subdf3+0x82c>
    e560:	1808d0fa 	srli	r4,r3,3
    e564:	8822d0fa 	srli	r17,r17,3
    e568:	1806977a 	slli	r3,r3,29
    e56c:	2080022c 	andhi	r2,r4,8
    e570:	1c62b03a 	or	r17,r3,r17
    e574:	10000826 	beq	r2,zero,e598 <__subdf3+0x75c>
    e578:	2812d0fa 	srli	r9,r5,3
    e57c:	4880022c 	andhi	r2,r9,8
    e580:	1000051e 	bne	r2,zero,e598 <__subdf3+0x75c>
    e584:	300cd0fa 	srli	r6,r6,3
    e588:	2804977a 	slli	r2,r5,29
    e58c:	4809883a 	mov	r4,r9
    e590:	3825883a 	mov	r18,r7
    e594:	11a2b03a 	or	r17,r2,r6
    e598:	8806d77a 	srli	r3,r17,29
    e59c:	200890fa 	slli	r4,r4,3
    e5a0:	882290fa 	slli	r17,r17,3
    e5a4:	0401ffc4 	movi	r16,2047
    e5a8:	1906b03a 	or	r3,r3,r4
    e5ac:	003e4406 	br	dec0 <__subdf3+0x84>
    e5b0:	2984b03a 	or	r2,r5,r6
    e5b4:	103e4226 	beq	r2,zero,dec0 <__subdf3+0x84>
    e5b8:	8989c83a 	sub	r4,r17,r6
    e5bc:	8911803a 	cmpltu	r8,r17,r4
    e5c0:	1945c83a 	sub	r2,r3,r5
    e5c4:	1205c83a 	sub	r2,r2,r8
    e5c8:	1200202c 	andhi	r8,r2,128
    e5cc:	403e9a26 	beq	r8,zero,e038 <__subdf3+0x1fc>
    e5d0:	3463c83a 	sub	r17,r6,r17
    e5d4:	28c5c83a 	sub	r2,r5,r3
    e5d8:	344d803a 	cmpltu	r6,r6,r17
    e5dc:	1187c83a 	sub	r3,r2,r6
    e5e0:	3825883a 	mov	r18,r7
    e5e4:	003e3606 	br	dec0 <__subdf3+0x84>
    e5e8:	0101ffc4 	movi	r4,2047
    e5ec:	493fc71e 	bne	r9,r4,e50c <__subdf3+0x6d0>
    e5f0:	2807883a 	mov	r3,r5
    e5f4:	3023883a 	mov	r17,r6
    e5f8:	4821883a 	mov	r16,r9
    e5fc:	003e3006 	br	dec0 <__subdf3+0x84>
    e600:	10003626 	beq	r2,zero,e6dc <__subdf3+0x8a0>
    e604:	2984b03a 	or	r2,r5,r6
    e608:	10001726 	beq	r2,zero,e668 <__subdf3+0x82c>
    e60c:	1808d0fa 	srli	r4,r3,3
    e610:	8822d0fa 	srli	r17,r17,3
    e614:	1806977a 	slli	r3,r3,29
    e618:	2080022c 	andhi	r2,r4,8
    e61c:	1c62b03a 	or	r17,r3,r17
    e620:	10000726 	beq	r2,zero,e640 <__subdf3+0x804>
    e624:	2812d0fa 	srli	r9,r5,3
    e628:	4880022c 	andhi	r2,r9,8
    e62c:	1000041e 	bne	r2,zero,e640 <__subdf3+0x804>
    e630:	300cd0fa 	srli	r6,r6,3
    e634:	2804977a 	slli	r2,r5,29
    e638:	4809883a 	mov	r4,r9
    e63c:	11a2b03a 	or	r17,r2,r6
    e640:	8806d77a 	srli	r3,r17,29
    e644:	200890fa 	slli	r4,r4,3
    e648:	882290fa 	slli	r17,r17,3
    e64c:	3825883a 	mov	r18,r7
    e650:	1906b03a 	or	r3,r3,r4
    e654:	0401ffc4 	movi	r16,2047
    e658:	003e1906 	br	dec0 <__subdf3+0x84>
    e65c:	000b883a 	mov	r5,zero
    e660:	0005883a 	mov	r2,zero
    e664:	003e2e06 	br	df20 <__subdf3+0xe4>
    e668:	0401ffc4 	movi	r16,2047
    e66c:	003e1406 	br	dec0 <__subdf3+0x84>
    e670:	0005883a 	mov	r2,zero
    e674:	003f7506 	br	e44c <__subdf3+0x610>
    e678:	0005883a 	mov	r2,zero
    e67c:	0009883a 	mov	r4,zero
    e680:	003e7806 	br	e064 <__subdf3+0x228>
    e684:	123ff804 	addi	r8,r2,-32
    e688:	01000804 	movi	r4,32
    e68c:	1a10d83a 	srl	r8,r3,r8
    e690:	11002526 	beq	r2,r4,e728 <__subdf3+0x8ec>
    e694:	01001004 	movi	r4,64
    e698:	2085c83a 	sub	r2,r4,r2
    e69c:	1884983a 	sll	r2,r3,r2
    e6a0:	1444b03a 	or	r2,r2,r17
    e6a4:	1004c03a 	cmpne	r2,r2,zero
    e6a8:	40a2b03a 	or	r17,r8,r2
    e6ac:	0005883a 	mov	r2,zero
    e6b0:	003f1606 	br	e30c <__subdf3+0x4d0>
    e6b4:	02000434 	movhi	r8,16
    e6b8:	0009883a 	mov	r4,zero
    e6bc:	423fffc4 	addi	r8,r8,-1
    e6c0:	00bfffc4 	movi	r2,-1
    e6c4:	0401ffc4 	movi	r16,2047
    e6c8:	003e6606 	br	e064 <__subdf3+0x228>
    e6cc:	1c62b03a 	or	r17,r3,r17
    e6d0:	8822c03a 	cmpne	r17,r17,zero
    e6d4:	0005883a 	mov	r2,zero
    e6d8:	003f9906 	br	e540 <__subdf3+0x704>
    e6dc:	2807883a 	mov	r3,r5
    e6e0:	3023883a 	mov	r17,r6
    e6e4:	0401ffc4 	movi	r16,2047
    e6e8:	003df506 	br	dec0 <__subdf3+0x84>
    e6ec:	2807883a 	mov	r3,r5
    e6f0:	3023883a 	mov	r17,r6
    e6f4:	003df206 	br	dec0 <__subdf3+0x84>
    e6f8:	123ff804 	addi	r8,r2,-32
    e6fc:	01000804 	movi	r4,32
    e700:	1a10d83a 	srl	r8,r3,r8
    e704:	11000a26 	beq	r2,r4,e730 <__subdf3+0x8f4>
    e708:	01001004 	movi	r4,64
    e70c:	2085c83a 	sub	r2,r4,r2
    e710:	1884983a 	sll	r2,r3,r2
    e714:	1444b03a 	or	r2,r2,r17
    e718:	1004c03a 	cmpne	r2,r2,zero
    e71c:	40a2b03a 	or	r17,r8,r2
    e720:	0005883a 	mov	r2,zero
    e724:	003f8606 	br	e540 <__subdf3+0x704>
    e728:	0005883a 	mov	r2,zero
    e72c:	003fdc06 	br	e6a0 <__subdf3+0x864>
    e730:	0005883a 	mov	r2,zero
    e734:	003ff706 	br	e714 <__subdf3+0x8d8>

0000e738 <__fixdfsi>:
    e738:	280cd53a 	srli	r6,r5,20
    e73c:	00c00434 	movhi	r3,16
    e740:	18ffffc4 	addi	r3,r3,-1
    e744:	3181ffcc 	andi	r6,r6,2047
    e748:	01c0ff84 	movi	r7,1022
    e74c:	28c6703a 	and	r3,r5,r3
    e750:	280ad7fa 	srli	r5,r5,31
    e754:	3980120e 	bge	r7,r6,e7a0 <__fixdfsi+0x68>
    e758:	00810744 	movi	r2,1053
    e75c:	11800c16 	blt	r2,r6,e790 <__fixdfsi+0x58>
    e760:	00810cc4 	movi	r2,1075
    e764:	1185c83a 	sub	r2,r2,r6
    e768:	01c007c4 	movi	r7,31
    e76c:	18c00434 	orhi	r3,r3,16
    e770:	38800d16 	blt	r7,r2,e7a8 <__fixdfsi+0x70>
    e774:	31befb44 	addi	r6,r6,-1043
    e778:	2084d83a 	srl	r2,r4,r2
    e77c:	1986983a 	sll	r3,r3,r6
    e780:	1884b03a 	or	r2,r3,r2
    e784:	28000726 	beq	r5,zero,e7a4 <__fixdfsi+0x6c>
    e788:	0085c83a 	sub	r2,zero,r2
    e78c:	f800283a 	ret
    e790:	00a00034 	movhi	r2,32768
    e794:	10bfffc4 	addi	r2,r2,-1
    e798:	2885883a 	add	r2,r5,r2
    e79c:	f800283a 	ret
    e7a0:	0005883a 	mov	r2,zero
    e7a4:	f800283a 	ret
    e7a8:	008104c4 	movi	r2,1043
    e7ac:	1185c83a 	sub	r2,r2,r6
    e7b0:	1884d83a 	srl	r2,r3,r2
    e7b4:	003ff306 	br	e784 <__fixdfsi+0x4c>

0000e7b8 <__floatsidf>:
    e7b8:	defffd04 	addi	sp,sp,-12
    e7bc:	dfc00215 	stw	ra,8(sp)
    e7c0:	dc400115 	stw	r17,4(sp)
    e7c4:	dc000015 	stw	r16,0(sp)
    e7c8:	20002b26 	beq	r4,zero,e878 <__floatsidf+0xc0>
    e7cc:	2023883a 	mov	r17,r4
    e7d0:	2020d7fa 	srli	r16,r4,31
    e7d4:	20002d16 	blt	r4,zero,e88c <__floatsidf+0xd4>
    e7d8:	8809883a 	mov	r4,r17
    e7dc:	000e93c0 	call	e93c <__clzsi2>
    e7e0:	01410784 	movi	r5,1054
    e7e4:	288bc83a 	sub	r5,r5,r2
    e7e8:	01010cc4 	movi	r4,1075
    e7ec:	2149c83a 	sub	r4,r4,r5
    e7f0:	00c007c4 	movi	r3,31
    e7f4:	1900160e 	bge	r3,r4,e850 <__floatsidf+0x98>
    e7f8:	00c104c4 	movi	r3,1043
    e7fc:	1947c83a 	sub	r3,r3,r5
    e800:	88c6983a 	sll	r3,r17,r3
    e804:	00800434 	movhi	r2,16
    e808:	10bfffc4 	addi	r2,r2,-1
    e80c:	1886703a 	and	r3,r3,r2
    e810:	2941ffcc 	andi	r5,r5,2047
    e814:	800d883a 	mov	r6,r16
    e818:	0005883a 	mov	r2,zero
    e81c:	280a953a 	slli	r5,r5,20
    e820:	31803fcc 	andi	r6,r6,255
    e824:	01000434 	movhi	r4,16
    e828:	300c97fa 	slli	r6,r6,31
    e82c:	213fffc4 	addi	r4,r4,-1
    e830:	1906703a 	and	r3,r3,r4
    e834:	1946b03a 	or	r3,r3,r5
    e838:	1986b03a 	or	r3,r3,r6
    e83c:	dfc00217 	ldw	ra,8(sp)
    e840:	dc400117 	ldw	r17,4(sp)
    e844:	dc000017 	ldw	r16,0(sp)
    e848:	dec00304 	addi	sp,sp,12
    e84c:	f800283a 	ret
    e850:	00c002c4 	movi	r3,11
    e854:	1887c83a 	sub	r3,r3,r2
    e858:	88c6d83a 	srl	r3,r17,r3
    e85c:	8904983a 	sll	r2,r17,r4
    e860:	01000434 	movhi	r4,16
    e864:	213fffc4 	addi	r4,r4,-1
    e868:	2941ffcc 	andi	r5,r5,2047
    e86c:	1906703a 	and	r3,r3,r4
    e870:	800d883a 	mov	r6,r16
    e874:	003fe906 	br	e81c <__floatsidf+0x64>
    e878:	000d883a 	mov	r6,zero
    e87c:	000b883a 	mov	r5,zero
    e880:	0007883a 	mov	r3,zero
    e884:	0005883a 	mov	r2,zero
    e888:	003fe406 	br	e81c <__floatsidf+0x64>
    e88c:	0123c83a 	sub	r17,zero,r4
    e890:	003fd106 	br	e7d8 <__floatsidf+0x20>

0000e894 <__floatunsidf>:
    e894:	defffe04 	addi	sp,sp,-8
    e898:	dc000015 	stw	r16,0(sp)
    e89c:	dfc00115 	stw	ra,4(sp)
    e8a0:	2021883a 	mov	r16,r4
    e8a4:	20002226 	beq	r4,zero,e930 <__floatunsidf+0x9c>
    e8a8:	000e93c0 	call	e93c <__clzsi2>
    e8ac:	01010784 	movi	r4,1054
    e8b0:	2089c83a 	sub	r4,r4,r2
    e8b4:	01810cc4 	movi	r6,1075
    e8b8:	310dc83a 	sub	r6,r6,r4
    e8bc:	00c007c4 	movi	r3,31
    e8c0:	1980120e 	bge	r3,r6,e90c <__floatunsidf+0x78>
    e8c4:	00c104c4 	movi	r3,1043
    e8c8:	1907c83a 	sub	r3,r3,r4
    e8cc:	80ca983a 	sll	r5,r16,r3
    e8d0:	00800434 	movhi	r2,16
    e8d4:	10bfffc4 	addi	r2,r2,-1
    e8d8:	2101ffcc 	andi	r4,r4,2047
    e8dc:	0021883a 	mov	r16,zero
    e8e0:	288a703a 	and	r5,r5,r2
    e8e4:	2008953a 	slli	r4,r4,20
    e8e8:	00c00434 	movhi	r3,16
    e8ec:	18ffffc4 	addi	r3,r3,-1
    e8f0:	28c6703a 	and	r3,r5,r3
    e8f4:	8005883a 	mov	r2,r16
    e8f8:	1906b03a 	or	r3,r3,r4
    e8fc:	dfc00117 	ldw	ra,4(sp)
    e900:	dc000017 	ldw	r16,0(sp)
    e904:	dec00204 	addi	sp,sp,8
    e908:	f800283a 	ret
    e90c:	00c002c4 	movi	r3,11
    e910:	188bc83a 	sub	r5,r3,r2
    e914:	814ad83a 	srl	r5,r16,r5
    e918:	00c00434 	movhi	r3,16
    e91c:	18ffffc4 	addi	r3,r3,-1
    e920:	81a0983a 	sll	r16,r16,r6
    e924:	2101ffcc 	andi	r4,r4,2047
    e928:	28ca703a 	and	r5,r5,r3
    e92c:	003fed06 	br	e8e4 <__floatunsidf+0x50>
    e930:	0009883a 	mov	r4,zero
    e934:	000b883a 	mov	r5,zero
    e938:	003fea06 	br	e8e4 <__floatunsidf+0x50>

0000e93c <__clzsi2>:
    e93c:	00bfffd4 	movui	r2,65535
    e940:	11000536 	bltu	r2,r4,e958 <__clzsi2+0x1c>
    e944:	00803fc4 	movi	r2,255
    e948:	11000f36 	bltu	r2,r4,e988 <__clzsi2+0x4c>
    e94c:	00800804 	movi	r2,32
    e950:	0007883a 	mov	r3,zero
    e954:	00000506 	br	e96c <__clzsi2+0x30>
    e958:	00804034 	movhi	r2,256
    e95c:	10bfffc4 	addi	r2,r2,-1
    e960:	11000c2e 	bgeu	r2,r4,e994 <__clzsi2+0x58>
    e964:	00800204 	movi	r2,8
    e968:	00c00604 	movi	r3,24
    e96c:	20c8d83a 	srl	r4,r4,r3
    e970:	00c00074 	movhi	r3,1
    e974:	18c68a04 	addi	r3,r3,6696
    e978:	1909883a 	add	r4,r3,r4
    e97c:	20c00003 	ldbu	r3,0(r4)
    e980:	10c5c83a 	sub	r2,r2,r3
    e984:	f800283a 	ret
    e988:	00800604 	movi	r2,24
    e98c:	00c00204 	movi	r3,8
    e990:	003ff606 	br	e96c <__clzsi2+0x30>
    e994:	00800404 	movi	r2,16
    e998:	1007883a 	mov	r3,r2
    e99c:	003ff306 	br	e96c <__clzsi2+0x30>

0000e9a0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    e9a0:	defffe04 	addi	sp,sp,-8
    e9a4:	dfc00115 	stw	ra,4(sp)
    e9a8:	df000015 	stw	fp,0(sp)
    e9ac:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    e9b0:	d0a00b17 	ldw	r2,-32724(gp)
    e9b4:	10000326 	beq	r2,zero,e9c4 <alt_get_errno+0x24>
    e9b8:	d0a00b17 	ldw	r2,-32724(gp)
    e9bc:	103ee83a 	callr	r2
    e9c0:	00000106 	br	e9c8 <alt_get_errno+0x28>
    e9c4:	d0a6d804 	addi	r2,gp,-25760
}
    e9c8:	e037883a 	mov	sp,fp
    e9cc:	dfc00117 	ldw	ra,4(sp)
    e9d0:	df000017 	ldw	fp,0(sp)
    e9d4:	dec00204 	addi	sp,sp,8
    e9d8:	f800283a 	ret

0000e9dc <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
    e9dc:	defffb04 	addi	sp,sp,-20
    e9e0:	dfc00415 	stw	ra,16(sp)
    e9e4:	df000315 	stw	fp,12(sp)
    e9e8:	df000304 	addi	fp,sp,12
    e9ec:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
    e9f0:	e0bfff17 	ldw	r2,-4(fp)
    e9f4:	10000616 	blt	r2,zero,ea10 <close+0x34>
    e9f8:	e0bfff17 	ldw	r2,-4(fp)
    e9fc:	10c00324 	muli	r3,r2,12
    ea00:	00800074 	movhi	r2,1
    ea04:	10890804 	addi	r2,r2,9248
    ea08:	1885883a 	add	r2,r3,r2
    ea0c:	00000106 	br	ea14 <close+0x38>
    ea10:	0005883a 	mov	r2,zero
    ea14:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
    ea18:	e0bffd17 	ldw	r2,-12(fp)
    ea1c:	10001926 	beq	r2,zero,ea84 <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
    ea20:	e0bffd17 	ldw	r2,-12(fp)
    ea24:	10800017 	ldw	r2,0(r2)
    ea28:	10800417 	ldw	r2,16(r2)
    ea2c:	10000626 	beq	r2,zero,ea48 <close+0x6c>
    ea30:	e0bffd17 	ldw	r2,-12(fp)
    ea34:	10800017 	ldw	r2,0(r2)
    ea38:	10800417 	ldw	r2,16(r2)
    ea3c:	e13ffd17 	ldw	r4,-12(fp)
    ea40:	103ee83a 	callr	r2
    ea44:	00000106 	br	ea4c <close+0x70>
    ea48:	0005883a 	mov	r2,zero
    ea4c:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
    ea50:	e13fff17 	ldw	r4,-4(fp)
    ea54:	000f09c0 	call	f09c <alt_release_fd>
    if (rval < 0)
    ea58:	e0bffe17 	ldw	r2,-8(fp)
    ea5c:	1000070e 	bge	r2,zero,ea7c <close+0xa0>
    {
      ALT_ERRNO = -rval;
    ea60:	000e9a00 	call	e9a0 <alt_get_errno>
    ea64:	1007883a 	mov	r3,r2
    ea68:	e0bffe17 	ldw	r2,-8(fp)
    ea6c:	0085c83a 	sub	r2,zero,r2
    ea70:	18800015 	stw	r2,0(r3)
      return -1;
    ea74:	00bfffc4 	movi	r2,-1
    ea78:	00000706 	br	ea98 <close+0xbc>
    }
    return 0;
    ea7c:	0005883a 	mov	r2,zero
    ea80:	00000506 	br	ea98 <close+0xbc>
  }
  else
  {
    ALT_ERRNO = EBADFD;
    ea84:	000e9a00 	call	e9a0 <alt_get_errno>
    ea88:	1007883a 	mov	r3,r2
    ea8c:	00801444 	movi	r2,81
    ea90:	18800015 	stw	r2,0(r3)
    return -1;
    ea94:	00bfffc4 	movi	r2,-1
  }
}
    ea98:	e037883a 	mov	sp,fp
    ea9c:	dfc00117 	ldw	ra,4(sp)
    eaa0:	df000017 	ldw	fp,0(sp)
    eaa4:	dec00204 	addi	sp,sp,8
    eaa8:	f800283a 	ret

0000eaac <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
    eaac:	defffc04 	addi	sp,sp,-16
    eab0:	df000315 	stw	fp,12(sp)
    eab4:	df000304 	addi	fp,sp,12
    eab8:	e13ffd15 	stw	r4,-12(fp)
    eabc:	e17ffe15 	stw	r5,-8(fp)
    eac0:	e1bfff15 	stw	r6,-4(fp)
  return len;
    eac4:	e0bfff17 	ldw	r2,-4(fp)
}
    eac8:	e037883a 	mov	sp,fp
    eacc:	df000017 	ldw	fp,0(sp)
    ead0:	dec00104 	addi	sp,sp,4
    ead4:	f800283a 	ret

0000ead8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    ead8:	defffe04 	addi	sp,sp,-8
    eadc:	dfc00115 	stw	ra,4(sp)
    eae0:	df000015 	stw	fp,0(sp)
    eae4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    eae8:	d0a00b17 	ldw	r2,-32724(gp)
    eaec:	10000326 	beq	r2,zero,eafc <alt_get_errno+0x24>
    eaf0:	d0a00b17 	ldw	r2,-32724(gp)
    eaf4:	103ee83a 	callr	r2
    eaf8:	00000106 	br	eb00 <alt_get_errno+0x28>
    eafc:	d0a6d804 	addi	r2,gp,-25760
}
    eb00:	e037883a 	mov	sp,fp
    eb04:	dfc00117 	ldw	ra,4(sp)
    eb08:	df000017 	ldw	fp,0(sp)
    eb0c:	dec00204 	addi	sp,sp,8
    eb10:	f800283a 	ret

0000eb14 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
    eb14:	defffb04 	addi	sp,sp,-20
    eb18:	dfc00415 	stw	ra,16(sp)
    eb1c:	df000315 	stw	fp,12(sp)
    eb20:	df000304 	addi	fp,sp,12
    eb24:	e13ffe15 	stw	r4,-8(fp)
    eb28:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    eb2c:	e0bffe17 	ldw	r2,-8(fp)
    eb30:	10000616 	blt	r2,zero,eb4c <fstat+0x38>
    eb34:	e0bffe17 	ldw	r2,-8(fp)
    eb38:	10c00324 	muli	r3,r2,12
    eb3c:	00800074 	movhi	r2,1
    eb40:	10890804 	addi	r2,r2,9248
    eb44:	1885883a 	add	r2,r3,r2
    eb48:	00000106 	br	eb50 <fstat+0x3c>
    eb4c:	0005883a 	mov	r2,zero
    eb50:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
    eb54:	e0bffd17 	ldw	r2,-12(fp)
    eb58:	10001026 	beq	r2,zero,eb9c <fstat+0x88>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
    eb5c:	e0bffd17 	ldw	r2,-12(fp)
    eb60:	10800017 	ldw	r2,0(r2)
    eb64:	10800817 	ldw	r2,32(r2)
    eb68:	10000726 	beq	r2,zero,eb88 <fstat+0x74>
    {
      return fd->dev->fstat(fd, st);
    eb6c:	e0bffd17 	ldw	r2,-12(fp)
    eb70:	10800017 	ldw	r2,0(r2)
    eb74:	10800817 	ldw	r2,32(r2)
    eb78:	e17fff17 	ldw	r5,-4(fp)
    eb7c:	e13ffd17 	ldw	r4,-12(fp)
    eb80:	103ee83a 	callr	r2
    eb84:	00000a06 	br	ebb0 <fstat+0x9c>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
    eb88:	e0bfff17 	ldw	r2,-4(fp)
    eb8c:	00c80004 	movi	r3,8192
    eb90:	10c00115 	stw	r3,4(r2)
      return 0;
    eb94:	0005883a 	mov	r2,zero
    eb98:	00000506 	br	ebb0 <fstat+0x9c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
    eb9c:	000ead80 	call	ead8 <alt_get_errno>
    eba0:	1007883a 	mov	r3,r2
    eba4:	00801444 	movi	r2,81
    eba8:	18800015 	stw	r2,0(r3)
    return -1;
    ebac:	00bfffc4 	movi	r2,-1
  }
}
    ebb0:	e037883a 	mov	sp,fp
    ebb4:	dfc00117 	ldw	ra,4(sp)
    ebb8:	df000017 	ldw	fp,0(sp)
    ebbc:	dec00204 	addi	sp,sp,8
    ebc0:	f800283a 	ret

0000ebc4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    ebc4:	defffe04 	addi	sp,sp,-8
    ebc8:	dfc00115 	stw	ra,4(sp)
    ebcc:	df000015 	stw	fp,0(sp)
    ebd0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    ebd4:	d0a00b17 	ldw	r2,-32724(gp)
    ebd8:	10000326 	beq	r2,zero,ebe8 <alt_get_errno+0x24>
    ebdc:	d0a00b17 	ldw	r2,-32724(gp)
    ebe0:	103ee83a 	callr	r2
    ebe4:	00000106 	br	ebec <alt_get_errno+0x28>
    ebe8:	d0a6d804 	addi	r2,gp,-25760
}
    ebec:	e037883a 	mov	sp,fp
    ebf0:	dfc00117 	ldw	ra,4(sp)
    ebf4:	df000017 	ldw	fp,0(sp)
    ebf8:	dec00204 	addi	sp,sp,8
    ebfc:	f800283a 	ret

0000ec00 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
    ec00:	deffed04 	addi	sp,sp,-76
    ec04:	dfc01215 	stw	ra,72(sp)
    ec08:	df001115 	stw	fp,68(sp)
    ec0c:	df001104 	addi	fp,sp,68
    ec10:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    ec14:	e0bfff17 	ldw	r2,-4(fp)
    ec18:	10000616 	blt	r2,zero,ec34 <isatty+0x34>
    ec1c:	e0bfff17 	ldw	r2,-4(fp)
    ec20:	10c00324 	muli	r3,r2,12
    ec24:	00800074 	movhi	r2,1
    ec28:	10890804 	addi	r2,r2,9248
    ec2c:	1885883a 	add	r2,r3,r2
    ec30:	00000106 	br	ec38 <isatty+0x38>
    ec34:	0005883a 	mov	r2,zero
    ec38:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
    ec3c:	e0bfef17 	ldw	r2,-68(fp)
    ec40:	10000e26 	beq	r2,zero,ec7c <isatty+0x7c>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
    ec44:	e0bfef17 	ldw	r2,-68(fp)
    ec48:	10800017 	ldw	r2,0(r2)
    ec4c:	10800817 	ldw	r2,32(r2)
    ec50:	1000021e 	bne	r2,zero,ec5c <isatty+0x5c>
    {
      return 1;
    ec54:	00800044 	movi	r2,1
    ec58:	00000d06 	br	ec90 <isatty+0x90>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
    ec5c:	e0bff004 	addi	r2,fp,-64
    ec60:	100b883a 	mov	r5,r2
    ec64:	e13fff17 	ldw	r4,-4(fp)
    ec68:	000eb140 	call	eb14 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
    ec6c:	e0bff117 	ldw	r2,-60(fp)
    ec70:	10880020 	cmpeqi	r2,r2,8192
    ec74:	10803fcc 	andi	r2,r2,255
    ec78:	00000506 	br	ec90 <isatty+0x90>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
    ec7c:	000ebc40 	call	ebc4 <alt_get_errno>
    ec80:	1007883a 	mov	r3,r2
    ec84:	00801444 	movi	r2,81
    ec88:	18800015 	stw	r2,0(r3)
    return 0;
    ec8c:	0005883a 	mov	r2,zero
  }
}
    ec90:	e037883a 	mov	sp,fp
    ec94:	dfc00117 	ldw	ra,4(sp)
    ec98:	df000017 	ldw	fp,0(sp)
    ec9c:	dec00204 	addi	sp,sp,8
    eca0:	f800283a 	ret

0000eca4 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
    eca4:	defffc04 	addi	sp,sp,-16
    eca8:	df000315 	stw	fp,12(sp)
    ecac:	df000304 	addi	fp,sp,12
    ecb0:	e13ffd15 	stw	r4,-12(fp)
    ecb4:	e17ffe15 	stw	r5,-8(fp)
    ecb8:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
    ecbc:	e0fffe17 	ldw	r3,-8(fp)
    ecc0:	e0bffd17 	ldw	r2,-12(fp)
    ecc4:	18800c26 	beq	r3,r2,ecf8 <alt_load_section+0x54>
  {
    while( to != end )
    ecc8:	00000806 	br	ecec <alt_load_section+0x48>
    {
      *to++ = *from++;
    eccc:	e0bffe17 	ldw	r2,-8(fp)
    ecd0:	10c00104 	addi	r3,r2,4
    ecd4:	e0fffe15 	stw	r3,-8(fp)
    ecd8:	e0fffd17 	ldw	r3,-12(fp)
    ecdc:	19000104 	addi	r4,r3,4
    ece0:	e13ffd15 	stw	r4,-12(fp)
    ece4:	18c00017 	ldw	r3,0(r3)
    ece8:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
    ecec:	e0fffe17 	ldw	r3,-8(fp)
    ecf0:	e0bfff17 	ldw	r2,-4(fp)
    ecf4:	18bff51e 	bne	r3,r2,eccc <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
    ecf8:	0001883a 	nop
    ecfc:	e037883a 	mov	sp,fp
    ed00:	df000017 	ldw	fp,0(sp)
    ed04:	dec00104 	addi	sp,sp,4
    ed08:	f800283a 	ret

0000ed0c <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
    ed0c:	defffe04 	addi	sp,sp,-8
    ed10:	dfc00115 	stw	ra,4(sp)
    ed14:	df000015 	stw	fp,0(sp)
    ed18:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
    ed1c:	01800074 	movhi	r6,1
    ed20:	318d9004 	addi	r6,r6,13888
    ed24:	01400074 	movhi	r5,1
    ed28:	2946d504 	addi	r5,r5,6996
    ed2c:	01000074 	movhi	r4,1
    ed30:	210d9004 	addi	r4,r4,13888
    ed34:	000eca40 	call	eca4 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
    ed38:	01800034 	movhi	r6,0
    ed3c:	31809104 	addi	r6,r6,580
    ed40:	01400034 	movhi	r5,0
    ed44:	29400804 	addi	r5,r5,32
    ed48:	01000034 	movhi	r4,0
    ed4c:	21000804 	addi	r4,r4,32
    ed50:	000eca40 	call	eca4 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
    ed54:	01800074 	movhi	r6,1
    ed58:	3186d504 	addi	r6,r6,6996
    ed5c:	01400074 	movhi	r5,1
    ed60:	2944f804 	addi	r5,r5,5088
    ed64:	01000074 	movhi	r4,1
    ed68:	2104f804 	addi	r4,r4,5088
    ed6c:	000eca40 	call	eca4 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
    ed70:	00102f40 	call	102f4 <alt_dcache_flush_all>
  alt_icache_flush_all();
    ed74:	00104b40 	call	104b4 <alt_icache_flush_all>
}
    ed78:	0001883a 	nop
    ed7c:	e037883a 	mov	sp,fp
    ed80:	dfc00117 	ldw	ra,4(sp)
    ed84:	df000017 	ldw	fp,0(sp)
    ed88:	dec00204 	addi	sp,sp,8
    ed8c:	f800283a 	ret

0000ed90 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    ed90:	defffe04 	addi	sp,sp,-8
    ed94:	dfc00115 	stw	ra,4(sp)
    ed98:	df000015 	stw	fp,0(sp)
    ed9c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    eda0:	d0a00b17 	ldw	r2,-32724(gp)
    eda4:	10000326 	beq	r2,zero,edb4 <alt_get_errno+0x24>
    eda8:	d0a00b17 	ldw	r2,-32724(gp)
    edac:	103ee83a 	callr	r2
    edb0:	00000106 	br	edb8 <alt_get_errno+0x28>
    edb4:	d0a6d804 	addi	r2,gp,-25760
}
    edb8:	e037883a 	mov	sp,fp
    edbc:	dfc00117 	ldw	ra,4(sp)
    edc0:	df000017 	ldw	fp,0(sp)
    edc4:	dec00204 	addi	sp,sp,8
    edc8:	f800283a 	ret

0000edcc <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
    edcc:	defff904 	addi	sp,sp,-28
    edd0:	dfc00615 	stw	ra,24(sp)
    edd4:	df000515 	stw	fp,20(sp)
    edd8:	df000504 	addi	fp,sp,20
    eddc:	e13ffd15 	stw	r4,-12(fp)
    ede0:	e17ffe15 	stw	r5,-8(fp)
    ede4:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
    ede8:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    edec:	e0bffd17 	ldw	r2,-12(fp)
    edf0:	10000616 	blt	r2,zero,ee0c <lseek+0x40>
    edf4:	e0bffd17 	ldw	r2,-12(fp)
    edf8:	10c00324 	muli	r3,r2,12
    edfc:	00800074 	movhi	r2,1
    ee00:	10890804 	addi	r2,r2,9248
    ee04:	1885883a 	add	r2,r3,r2
    ee08:	00000106 	br	ee10 <lseek+0x44>
    ee0c:	0005883a 	mov	r2,zero
    ee10:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
    ee14:	e0bffc17 	ldw	r2,-16(fp)
    ee18:	10001026 	beq	r2,zero,ee5c <lseek+0x90>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
    ee1c:	e0bffc17 	ldw	r2,-16(fp)
    ee20:	10800017 	ldw	r2,0(r2)
    ee24:	10800717 	ldw	r2,28(r2)
    ee28:	10000926 	beq	r2,zero,ee50 <lseek+0x84>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
    ee2c:	e0bffc17 	ldw	r2,-16(fp)
    ee30:	10800017 	ldw	r2,0(r2)
    ee34:	10800717 	ldw	r2,28(r2)
    ee38:	e1bfff17 	ldw	r6,-4(fp)
    ee3c:	e17ffe17 	ldw	r5,-8(fp)
    ee40:	e13ffc17 	ldw	r4,-16(fp)
    ee44:	103ee83a 	callr	r2
    ee48:	e0bffb15 	stw	r2,-20(fp)
    ee4c:	00000506 	br	ee64 <lseek+0x98>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
    ee50:	00bfde84 	movi	r2,-134
    ee54:	e0bffb15 	stw	r2,-20(fp)
    ee58:	00000206 	br	ee64 <lseek+0x98>
    }
  }
  else  
  {
    rc = -EBADFD;
    ee5c:	00bfebc4 	movi	r2,-81
    ee60:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
    ee64:	e0bffb17 	ldw	r2,-20(fp)
    ee68:	1000070e 	bge	r2,zero,ee88 <lseek+0xbc>
  {
    ALT_ERRNO = -rc;
    ee6c:	000ed900 	call	ed90 <alt_get_errno>
    ee70:	1007883a 	mov	r3,r2
    ee74:	e0bffb17 	ldw	r2,-20(fp)
    ee78:	0085c83a 	sub	r2,zero,r2
    ee7c:	18800015 	stw	r2,0(r3)
    rc = -1;
    ee80:	00bfffc4 	movi	r2,-1
    ee84:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
    ee88:	e0bffb17 	ldw	r2,-20(fp)
}
    ee8c:	e037883a 	mov	sp,fp
    ee90:	dfc00117 	ldw	ra,4(sp)
    ee94:	df000017 	ldw	fp,0(sp)
    ee98:	dec00204 	addi	sp,sp,8
    ee9c:	f800283a 	ret

0000eea0 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    eea0:	defffd04 	addi	sp,sp,-12
    eea4:	dfc00215 	stw	ra,8(sp)
    eea8:	df000115 	stw	fp,4(sp)
    eeac:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    eeb0:	0009883a 	mov	r4,zero
    eeb4:	000f3480 	call	f348 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
    eeb8:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
    eebc:	000f3800 	call	f380 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
    eec0:	01800074 	movhi	r6,1
    eec4:	3186cd04 	addi	r6,r6,6964
    eec8:	01400074 	movhi	r5,1
    eecc:	2946cd04 	addi	r5,r5,6964
    eed0:	01000074 	movhi	r4,1
    eed4:	2106cd04 	addi	r4,r4,6964
    eed8:	001084c0 	call	1084c <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
    eedc:	00103f40 	call	103f4 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
    eee0:	01000074 	movhi	r4,1
    eee4:	21011504 	addi	r4,r4,1108
    eee8:	001104c0 	call	1104c <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
    eeec:	d0a6dc17 	ldw	r2,-25744(gp)
    eef0:	d0e6dd17 	ldw	r3,-25740(gp)
    eef4:	d126de17 	ldw	r4,-25736(gp)
    eef8:	200d883a 	mov	r6,r4
    eefc:	180b883a 	mov	r5,r3
    ef00:	1009883a 	mov	r4,r2
    ef04:	00012d80 	call	12d8 <main>
    ef08:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
    ef0c:	01000044 	movi	r4,1
    ef10:	000e9dc0 	call	e9dc <close>
  exit (result);
    ef14:	e13fff17 	ldw	r4,-4(fp)
    ef18:	00110600 	call	11060 <exit>

0000ef1c <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
    ef1c:	defffe04 	addi	sp,sp,-8
    ef20:	df000115 	stw	fp,4(sp)
    ef24:	df000104 	addi	fp,sp,4
    ef28:	e13fff15 	stw	r4,-4(fp)
}
    ef2c:	0001883a 	nop
    ef30:	e037883a 	mov	sp,fp
    ef34:	df000017 	ldw	fp,0(sp)
    ef38:	dec00104 	addi	sp,sp,4
    ef3c:	f800283a 	ret

0000ef40 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
    ef40:	defffe04 	addi	sp,sp,-8
    ef44:	df000115 	stw	fp,4(sp)
    ef48:	df000104 	addi	fp,sp,4
    ef4c:	e13fff15 	stw	r4,-4(fp)
}
    ef50:	0001883a 	nop
    ef54:	e037883a 	mov	sp,fp
    ef58:	df000017 	ldw	fp,0(sp)
    ef5c:	dec00104 	addi	sp,sp,4
    ef60:	f800283a 	ret

0000ef64 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    ef64:	defffe04 	addi	sp,sp,-8
    ef68:	dfc00115 	stw	ra,4(sp)
    ef6c:	df000015 	stw	fp,0(sp)
    ef70:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    ef74:	d0a00b17 	ldw	r2,-32724(gp)
    ef78:	10000326 	beq	r2,zero,ef88 <alt_get_errno+0x24>
    ef7c:	d0a00b17 	ldw	r2,-32724(gp)
    ef80:	103ee83a 	callr	r2
    ef84:	00000106 	br	ef8c <alt_get_errno+0x28>
    ef88:	d0a6d804 	addi	r2,gp,-25760
}
    ef8c:	e037883a 	mov	sp,fp
    ef90:	dfc00117 	ldw	ra,4(sp)
    ef94:	df000017 	ldw	fp,0(sp)
    ef98:	dec00204 	addi	sp,sp,8
    ef9c:	f800283a 	ret

0000efa0 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
    efa0:	defff904 	addi	sp,sp,-28
    efa4:	dfc00615 	stw	ra,24(sp)
    efa8:	df000515 	stw	fp,20(sp)
    efac:	df000504 	addi	fp,sp,20
    efb0:	e13ffd15 	stw	r4,-12(fp)
    efb4:	e17ffe15 	stw	r5,-8(fp)
    efb8:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    efbc:	e0bffd17 	ldw	r2,-12(fp)
    efc0:	10000616 	blt	r2,zero,efdc <read+0x3c>
    efc4:	e0bffd17 	ldw	r2,-12(fp)
    efc8:	10c00324 	muli	r3,r2,12
    efcc:	00800074 	movhi	r2,1
    efd0:	10890804 	addi	r2,r2,9248
    efd4:	1885883a 	add	r2,r3,r2
    efd8:	00000106 	br	efe0 <read+0x40>
    efdc:	0005883a 	mov	r2,zero
    efe0:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
    efe4:	e0bffb17 	ldw	r2,-20(fp)
    efe8:	10002226 	beq	r2,zero,f074 <read+0xd4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
    efec:	e0bffb17 	ldw	r2,-20(fp)
    eff0:	10800217 	ldw	r2,8(r2)
    eff4:	108000cc 	andi	r2,r2,3
    eff8:	10800060 	cmpeqi	r2,r2,1
    effc:	1000181e 	bne	r2,zero,f060 <read+0xc0>
        (fd->dev->read))
    f000:	e0bffb17 	ldw	r2,-20(fp)
    f004:	10800017 	ldw	r2,0(r2)
    f008:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
    f00c:	10001426 	beq	r2,zero,f060 <read+0xc0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
    f010:	e0bffb17 	ldw	r2,-20(fp)
    f014:	10800017 	ldw	r2,0(r2)
    f018:	10800517 	ldw	r2,20(r2)
    f01c:	e0ffff17 	ldw	r3,-4(fp)
    f020:	180d883a 	mov	r6,r3
    f024:	e17ffe17 	ldw	r5,-8(fp)
    f028:	e13ffb17 	ldw	r4,-20(fp)
    f02c:	103ee83a 	callr	r2
    f030:	e0bffc15 	stw	r2,-16(fp)
    f034:	e0bffc17 	ldw	r2,-16(fp)
    f038:	1000070e 	bge	r2,zero,f058 <read+0xb8>
        {
          ALT_ERRNO = -rval;
    f03c:	000ef640 	call	ef64 <alt_get_errno>
    f040:	1007883a 	mov	r3,r2
    f044:	e0bffc17 	ldw	r2,-16(fp)
    f048:	0085c83a 	sub	r2,zero,r2
    f04c:	18800015 	stw	r2,0(r3)
          return -1;
    f050:	00bfffc4 	movi	r2,-1
    f054:	00000c06 	br	f088 <read+0xe8>
        }
        return rval;
    f058:	e0bffc17 	ldw	r2,-16(fp)
    f05c:	00000a06 	br	f088 <read+0xe8>
      }
      else
      {
        ALT_ERRNO = EACCES;
    f060:	000ef640 	call	ef64 <alt_get_errno>
    f064:	1007883a 	mov	r3,r2
    f068:	00800344 	movi	r2,13
    f06c:	18800015 	stw	r2,0(r3)
    f070:	00000406 	br	f084 <read+0xe4>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
    f074:	000ef640 	call	ef64 <alt_get_errno>
    f078:	1007883a 	mov	r3,r2
    f07c:	00801444 	movi	r2,81
    f080:	18800015 	stw	r2,0(r3)
  }
  return -1;
    f084:	00bfffc4 	movi	r2,-1
}
    f088:	e037883a 	mov	sp,fp
    f08c:	dfc00117 	ldw	ra,4(sp)
    f090:	df000017 	ldw	fp,0(sp)
    f094:	dec00204 	addi	sp,sp,8
    f098:	f800283a 	ret

0000f09c <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
    f09c:	defffe04 	addi	sp,sp,-8
    f0a0:	df000115 	stw	fp,4(sp)
    f0a4:	df000104 	addi	fp,sp,4
    f0a8:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
    f0ac:	e0bfff17 	ldw	r2,-4(fp)
    f0b0:	108000d0 	cmplti	r2,r2,3
    f0b4:	10000d1e 	bne	r2,zero,f0ec <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
    f0b8:	00800074 	movhi	r2,1
    f0bc:	10890804 	addi	r2,r2,9248
    f0c0:	e0ffff17 	ldw	r3,-4(fp)
    f0c4:	18c00324 	muli	r3,r3,12
    f0c8:	10c5883a 	add	r2,r2,r3
    f0cc:	10800204 	addi	r2,r2,8
    f0d0:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
    f0d4:	00800074 	movhi	r2,1
    f0d8:	10890804 	addi	r2,r2,9248
    f0dc:	e0ffff17 	ldw	r3,-4(fp)
    f0e0:	18c00324 	muli	r3,r3,12
    f0e4:	10c5883a 	add	r2,r2,r3
    f0e8:	10000015 	stw	zero,0(r2)
  }
}
    f0ec:	0001883a 	nop
    f0f0:	e037883a 	mov	sp,fp
    f0f4:	df000017 	ldw	fp,0(sp)
    f0f8:	dec00104 	addi	sp,sp,4
    f0fc:	f800283a 	ret

0000f100 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
    f100:	defff904 	addi	sp,sp,-28
    f104:	df000615 	stw	fp,24(sp)
    f108:	df000604 	addi	fp,sp,24
    f10c:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    f110:	0005303a 	rdctl	r2,status
    f114:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    f118:	e0fffe17 	ldw	r3,-8(fp)
    f11c:	00bfff84 	movi	r2,-2
    f120:	1884703a 	and	r2,r3,r2
    f124:	1001703a 	wrctl	status,r2
  
  return context;
    f128:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
    f12c:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
    f130:	d0a00c17 	ldw	r2,-32720(gp)
    f134:	10c000c4 	addi	r3,r2,3
    f138:	00bfff04 	movi	r2,-4
    f13c:	1884703a 	and	r2,r3,r2
    f140:	d0a00c15 	stw	r2,-32720(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
    f144:	d0e00c17 	ldw	r3,-32720(gp)
    f148:	e0bfff17 	ldw	r2,-4(fp)
    f14c:	1887883a 	add	r3,r3,r2
    f150:	00804034 	movhi	r2,256
    f154:	10800004 	addi	r2,r2,0
    f158:	10c0062e 	bgeu	r2,r3,f174 <sbrk+0x74>
    f15c:	e0bffb17 	ldw	r2,-20(fp)
    f160:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    f164:	e0bffa17 	ldw	r2,-24(fp)
    f168:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
    f16c:	00bfffc4 	movi	r2,-1
    f170:	00000b06 	br	f1a0 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
    f174:	d0a00c17 	ldw	r2,-32720(gp)
    f178:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
    f17c:	d0e00c17 	ldw	r3,-32720(gp)
    f180:	e0bfff17 	ldw	r2,-4(fp)
    f184:	1885883a 	add	r2,r3,r2
    f188:	d0a00c15 	stw	r2,-32720(gp)
    f18c:	e0bffb17 	ldw	r2,-20(fp)
    f190:	e0bffc15 	stw	r2,-16(fp)
    f194:	e0bffc17 	ldw	r2,-16(fp)
    f198:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
    f19c:	e0bffd17 	ldw	r2,-12(fp)
} 
    f1a0:	e037883a 	mov	sp,fp
    f1a4:	df000017 	ldw	fp,0(sp)
    f1a8:	dec00104 	addi	sp,sp,4
    f1ac:	f800283a 	ret

0000f1b0 <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
    f1b0:	defffd04 	addi	sp,sp,-12
    f1b4:	dfc00215 	stw	ra,8(sp)
    f1b8:	df000115 	stw	fp,4(sp)
    f1bc:	df000104 	addi	fp,sp,4
    f1c0:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
    f1c4:	e13fff17 	ldw	r4,-4(fp)
    f1c8:	001019c0 	call	1019c <alt_busy_sleep>
}
    f1cc:	e037883a 	mov	sp,fp
    f1d0:	dfc00117 	ldw	ra,4(sp)
    f1d4:	df000017 	ldw	fp,0(sp)
    f1d8:	dec00204 	addi	sp,sp,8
    f1dc:	f800283a 	ret

0000f1e0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    f1e0:	defffe04 	addi	sp,sp,-8
    f1e4:	dfc00115 	stw	ra,4(sp)
    f1e8:	df000015 	stw	fp,0(sp)
    f1ec:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    f1f0:	d0a00b17 	ldw	r2,-32724(gp)
    f1f4:	10000326 	beq	r2,zero,f204 <alt_get_errno+0x24>
    f1f8:	d0a00b17 	ldw	r2,-32724(gp)
    f1fc:	103ee83a 	callr	r2
    f200:	00000106 	br	f208 <alt_get_errno+0x28>
    f204:	d0a6d804 	addi	r2,gp,-25760
}
    f208:	e037883a 	mov	sp,fp
    f20c:	dfc00117 	ldw	ra,4(sp)
    f210:	df000017 	ldw	fp,0(sp)
    f214:	dec00204 	addi	sp,sp,8
    f218:	f800283a 	ret

0000f21c <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
    f21c:	defff904 	addi	sp,sp,-28
    f220:	dfc00615 	stw	ra,24(sp)
    f224:	df000515 	stw	fp,20(sp)
    f228:	df000504 	addi	fp,sp,20
    f22c:	e13ffd15 	stw	r4,-12(fp)
    f230:	e17ffe15 	stw	r5,-8(fp)
    f234:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    f238:	e0bffd17 	ldw	r2,-12(fp)
    f23c:	10000616 	blt	r2,zero,f258 <write+0x3c>
    f240:	e0bffd17 	ldw	r2,-12(fp)
    f244:	10c00324 	muli	r3,r2,12
    f248:	00800074 	movhi	r2,1
    f24c:	10890804 	addi	r2,r2,9248
    f250:	1885883a 	add	r2,r3,r2
    f254:	00000106 	br	f25c <write+0x40>
    f258:	0005883a 	mov	r2,zero
    f25c:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
    f260:	e0bffb17 	ldw	r2,-20(fp)
    f264:	10002126 	beq	r2,zero,f2ec <write+0xd0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
    f268:	e0bffb17 	ldw	r2,-20(fp)
    f26c:	10800217 	ldw	r2,8(r2)
    f270:	108000cc 	andi	r2,r2,3
    f274:	10001826 	beq	r2,zero,f2d8 <write+0xbc>
    f278:	e0bffb17 	ldw	r2,-20(fp)
    f27c:	10800017 	ldw	r2,0(r2)
    f280:	10800617 	ldw	r2,24(r2)
    f284:	10001426 	beq	r2,zero,f2d8 <write+0xbc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
    f288:	e0bffb17 	ldw	r2,-20(fp)
    f28c:	10800017 	ldw	r2,0(r2)
    f290:	10800617 	ldw	r2,24(r2)
    f294:	e0ffff17 	ldw	r3,-4(fp)
    f298:	180d883a 	mov	r6,r3
    f29c:	e17ffe17 	ldw	r5,-8(fp)
    f2a0:	e13ffb17 	ldw	r4,-20(fp)
    f2a4:	103ee83a 	callr	r2
    f2a8:	e0bffc15 	stw	r2,-16(fp)
    f2ac:	e0bffc17 	ldw	r2,-16(fp)
    f2b0:	1000070e 	bge	r2,zero,f2d0 <write+0xb4>
      {
        ALT_ERRNO = -rval;
    f2b4:	000f1e00 	call	f1e0 <alt_get_errno>
    f2b8:	1007883a 	mov	r3,r2
    f2bc:	e0bffc17 	ldw	r2,-16(fp)
    f2c0:	0085c83a 	sub	r2,zero,r2
    f2c4:	18800015 	stw	r2,0(r3)
        return -1;
    f2c8:	00bfffc4 	movi	r2,-1
    f2cc:	00000c06 	br	f300 <write+0xe4>
      }
      return rval;
    f2d0:	e0bffc17 	ldw	r2,-16(fp)
    f2d4:	00000a06 	br	f300 <write+0xe4>
    }
    else
    {
      ALT_ERRNO = EACCES;
    f2d8:	000f1e00 	call	f1e0 <alt_get_errno>
    f2dc:	1007883a 	mov	r3,r2
    f2e0:	00800344 	movi	r2,13
    f2e4:	18800015 	stw	r2,0(r3)
    f2e8:	00000406 	br	f2fc <write+0xe0>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
    f2ec:	000f1e00 	call	f1e0 <alt_get_errno>
    f2f0:	1007883a 	mov	r3,r2
    f2f4:	00801444 	movi	r2,81
    f2f8:	18800015 	stw	r2,0(r3)
  }
  return -1;
    f2fc:	00bfffc4 	movi	r2,-1
}
    f300:	e037883a 	mov	sp,fp
    f304:	dfc00117 	ldw	ra,4(sp)
    f308:	df000017 	ldw	fp,0(sp)
    f30c:	dec00204 	addi	sp,sp,8
    f310:	f800283a 	ret

0000f314 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
    f314:	defffd04 	addi	sp,sp,-12
    f318:	dfc00215 	stw	ra,8(sp)
    f31c:	df000115 	stw	fp,4(sp)
    f320:	df000104 	addi	fp,sp,4
    f324:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
    f328:	d1600804 	addi	r5,gp,-32736
    f32c:	e13fff17 	ldw	r4,-4(fp)
    f330:	00103500 	call	10350 <alt_dev_llist_insert>
}
    f334:	e037883a 	mov	sp,fp
    f338:	dfc00117 	ldw	ra,4(sp)
    f33c:	df000017 	ldw	fp,0(sp)
    f340:	dec00204 	addi	sp,sp,8
    f344:	f800283a 	ret

0000f348 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
    f348:	defffd04 	addi	sp,sp,-12
    f34c:	dfc00215 	stw	ra,8(sp)
    f350:	df000115 	stw	fp,4(sp)
    f354:	df000104 	addi	fp,sp,4
    f358:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2_0, nios2_gen2_0);
    f35c:	0010cc00 	call	10cc0 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
    f360:	00800044 	movi	r2,1
    f364:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
    f368:	0001883a 	nop
    f36c:	e037883a 	mov	sp,fp
    f370:	dfc00117 	ldw	ra,4(sp)
    f374:	df000017 	ldw	fp,0(sp)
    f378:	dec00204 	addi	sp,sp,8
    f37c:	f800283a 	ret

0000f380 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
    f380:	defffe04 	addi	sp,sp,-8
    f384:	dfc00115 	stw	ra,4(sp)
    f388:	df000015 	stw	fp,0(sp)
    f38c:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( PROFILETIMER, ProfileTimer);
    f390:	00804034 	movhi	r2,256
    f394:	10840004 	addi	r2,r2,4096
    f398:	d0a6df15 	stw	r2,-25732(gp)
    f39c:	0080bef4 	movhi	r2,763
    f3a0:	10bc2004 	addi	r2,r2,-3968
    f3a4:	d0a6e015 	stw	r2,-25728(gp)
    ALTERA_AVALON_TIMER_INIT ( SYSTIMER, Systimer);
    f3a8:	01c0fa04 	movi	r7,1000
    f3ac:	01800104 	movi	r6,4
    f3b0:	000b883a 	mov	r5,zero
    f3b4:	01004034 	movhi	r4,256
    f3b8:	21040804 	addi	r4,r4,4128
    f3bc:	000fedc0 	call	fedc <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
    f3c0:	000d883a 	mov	r6,zero
    f3c4:	000b883a 	mov	r5,zero
    f3c8:	01000074 	movhi	r4,1
    f3cc:	21097204 	addi	r4,r4,9672
    f3d0:	000f5600 	call	f560 <altera_avalon_jtag_uart_init>
    f3d4:	01000074 	movhi	r4,1
    f3d8:	21096804 	addi	r4,r4,9632
    f3dc:	000f3140 	call	f314 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID, sysid);
    f3e0:	0001883a 	nop
}
    f3e4:	0001883a 	nop
    f3e8:	e037883a 	mov	sp,fp
    f3ec:	dfc00117 	ldw	ra,4(sp)
    f3f0:	df000017 	ldw	fp,0(sp)
    f3f4:	dec00204 	addi	sp,sp,8
    f3f8:	f800283a 	ret

0000f3fc <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
    f3fc:	defffa04 	addi	sp,sp,-24
    f400:	dfc00515 	stw	ra,20(sp)
    f404:	df000415 	stw	fp,16(sp)
    f408:	df000404 	addi	fp,sp,16
    f40c:	e13ffd15 	stw	r4,-12(fp)
    f410:	e17ffe15 	stw	r5,-8(fp)
    f414:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    f418:	e0bffd17 	ldw	r2,-12(fp)
    f41c:	10800017 	ldw	r2,0(r2)
    f420:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
    f424:	e0bffc17 	ldw	r2,-16(fp)
    f428:	10c00a04 	addi	r3,r2,40
    f42c:	e0bffd17 	ldw	r2,-12(fp)
    f430:	10800217 	ldw	r2,8(r2)
    f434:	100f883a 	mov	r7,r2
    f438:	e1bfff17 	ldw	r6,-4(fp)
    f43c:	e17ffe17 	ldw	r5,-8(fp)
    f440:	1809883a 	mov	r4,r3
    f444:	000fa240 	call	fa24 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
    f448:	e037883a 	mov	sp,fp
    f44c:	dfc00117 	ldw	ra,4(sp)
    f450:	df000017 	ldw	fp,0(sp)
    f454:	dec00204 	addi	sp,sp,8
    f458:	f800283a 	ret

0000f45c <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
    f45c:	defffa04 	addi	sp,sp,-24
    f460:	dfc00515 	stw	ra,20(sp)
    f464:	df000415 	stw	fp,16(sp)
    f468:	df000404 	addi	fp,sp,16
    f46c:	e13ffd15 	stw	r4,-12(fp)
    f470:	e17ffe15 	stw	r5,-8(fp)
    f474:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    f478:	e0bffd17 	ldw	r2,-12(fp)
    f47c:	10800017 	ldw	r2,0(r2)
    f480:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
    f484:	e0bffc17 	ldw	r2,-16(fp)
    f488:	10c00a04 	addi	r3,r2,40
    f48c:	e0bffd17 	ldw	r2,-12(fp)
    f490:	10800217 	ldw	r2,8(r2)
    f494:	100f883a 	mov	r7,r2
    f498:	e1bfff17 	ldw	r6,-4(fp)
    f49c:	e17ffe17 	ldw	r5,-8(fp)
    f4a0:	1809883a 	mov	r4,r3
    f4a4:	000fc400 	call	fc40 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
    f4a8:	e037883a 	mov	sp,fp
    f4ac:	dfc00117 	ldw	ra,4(sp)
    f4b0:	df000017 	ldw	fp,0(sp)
    f4b4:	dec00204 	addi	sp,sp,8
    f4b8:	f800283a 	ret

0000f4bc <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
    f4bc:	defffc04 	addi	sp,sp,-16
    f4c0:	dfc00315 	stw	ra,12(sp)
    f4c4:	df000215 	stw	fp,8(sp)
    f4c8:	df000204 	addi	fp,sp,8
    f4cc:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    f4d0:	e0bfff17 	ldw	r2,-4(fp)
    f4d4:	10800017 	ldw	r2,0(r2)
    f4d8:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
    f4dc:	e0bffe17 	ldw	r2,-8(fp)
    f4e0:	10c00a04 	addi	r3,r2,40
    f4e4:	e0bfff17 	ldw	r2,-4(fp)
    f4e8:	10800217 	ldw	r2,8(r2)
    f4ec:	100b883a 	mov	r5,r2
    f4f0:	1809883a 	mov	r4,r3
    f4f4:	000f8cc0 	call	f8cc <altera_avalon_jtag_uart_close>
}
    f4f8:	e037883a 	mov	sp,fp
    f4fc:	dfc00117 	ldw	ra,4(sp)
    f500:	df000017 	ldw	fp,0(sp)
    f504:	dec00204 	addi	sp,sp,8
    f508:	f800283a 	ret

0000f50c <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
    f50c:	defffa04 	addi	sp,sp,-24
    f510:	dfc00515 	stw	ra,20(sp)
    f514:	df000415 	stw	fp,16(sp)
    f518:	df000404 	addi	fp,sp,16
    f51c:	e13ffd15 	stw	r4,-12(fp)
    f520:	e17ffe15 	stw	r5,-8(fp)
    f524:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
    f528:	e0bffd17 	ldw	r2,-12(fp)
    f52c:	10800017 	ldw	r2,0(r2)
    f530:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
    f534:	e0bffc17 	ldw	r2,-16(fp)
    f538:	10800a04 	addi	r2,r2,40
    f53c:	e1bfff17 	ldw	r6,-4(fp)
    f540:	e17ffe17 	ldw	r5,-8(fp)
    f544:	1009883a 	mov	r4,r2
    f548:	000f9340 	call	f934 <altera_avalon_jtag_uart_ioctl>
}
    f54c:	e037883a 	mov	sp,fp
    f550:	dfc00117 	ldw	ra,4(sp)
    f554:	df000017 	ldw	fp,0(sp)
    f558:	dec00204 	addi	sp,sp,8
    f55c:	f800283a 	ret

0000f560 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
    f560:	defffa04 	addi	sp,sp,-24
    f564:	dfc00515 	stw	ra,20(sp)
    f568:	df000415 	stw	fp,16(sp)
    f56c:	df000404 	addi	fp,sp,16
    f570:	e13ffd15 	stw	r4,-12(fp)
    f574:	e17ffe15 	stw	r5,-8(fp)
    f578:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    f57c:	e0bffd17 	ldw	r2,-12(fp)
    f580:	00c00044 	movi	r3,1
    f584:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
    f588:	e0bffd17 	ldw	r2,-12(fp)
    f58c:	10800017 	ldw	r2,0(r2)
    f590:	10800104 	addi	r2,r2,4
    f594:	1007883a 	mov	r3,r2
    f598:	e0bffd17 	ldw	r2,-12(fp)
    f59c:	10800817 	ldw	r2,32(r2)
    f5a0:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
    f5a4:	e0bffe17 	ldw	r2,-8(fp)
    f5a8:	e0ffff17 	ldw	r3,-4(fp)
    f5ac:	d8000015 	stw	zero,0(sp)
    f5b0:	e1fffd17 	ldw	r7,-12(fp)
    f5b4:	01800074 	movhi	r6,1
    f5b8:	31bd8804 	addi	r6,r6,-2528
    f5bc:	180b883a 	mov	r5,r3
    f5c0:	1009883a 	mov	r4,r2
    f5c4:	00104e80 	call	104e8 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
    f5c8:	e0bffd17 	ldw	r2,-12(fp)
    f5cc:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
    f5d0:	e0bffd17 	ldw	r2,-12(fp)
    f5d4:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
    f5d8:	d0e6e217 	ldw	r3,-25720(gp)
    f5dc:	e1fffd17 	ldw	r7,-12(fp)
    f5e0:	01800074 	movhi	r6,1
    f5e4:	31be0b04 	addi	r6,r6,-2004
    f5e8:	180b883a 	mov	r5,r3
    f5ec:	1009883a 	mov	r4,r2
    f5f0:	00100700 	call	10070 <alt_alarm_start>
    f5f4:	1000040e 	bge	r2,zero,f608 <altera_avalon_jtag_uart_init+0xa8>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
    f5f8:	e0fffd17 	ldw	r3,-12(fp)
    f5fc:	00a00034 	movhi	r2,32768
    f600:	10bfffc4 	addi	r2,r2,-1
    f604:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
    f608:	0001883a 	nop
    f60c:	e037883a 	mov	sp,fp
    f610:	dfc00117 	ldw	ra,4(sp)
    f614:	df000017 	ldw	fp,0(sp)
    f618:	dec00204 	addi	sp,sp,8
    f61c:	f800283a 	ret

0000f620 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
    f620:	defff804 	addi	sp,sp,-32
    f624:	df000715 	stw	fp,28(sp)
    f628:	df000704 	addi	fp,sp,28
    f62c:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
    f630:	e0bfff17 	ldw	r2,-4(fp)
    f634:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
    f638:	e0bffb17 	ldw	r2,-20(fp)
    f63c:	10800017 	ldw	r2,0(r2)
    f640:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    f644:	e0bffc17 	ldw	r2,-16(fp)
    f648:	10800104 	addi	r2,r2,4
    f64c:	10800037 	ldwio	r2,0(r2)
    f650:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
    f654:	e0bffd17 	ldw	r2,-12(fp)
    f658:	1080c00c 	andi	r2,r2,768
    f65c:	10006d26 	beq	r2,zero,f814 <altera_avalon_jtag_uart_irq+0x1f4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
    f660:	e0bffd17 	ldw	r2,-12(fp)
    f664:	1080400c 	andi	r2,r2,256
    f668:	10003526 	beq	r2,zero,f740 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
    f66c:	00800074 	movhi	r2,1
    f670:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    f674:	e0bffb17 	ldw	r2,-20(fp)
    f678:	10800a17 	ldw	r2,40(r2)
    f67c:	10800044 	addi	r2,r2,1
    f680:	1081ffcc 	andi	r2,r2,2047
    f684:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
    f688:	e0bffb17 	ldw	r2,-20(fp)
    f68c:	10c00b17 	ldw	r3,44(r2)
    f690:	e0bffe17 	ldw	r2,-8(fp)
    f694:	18801526 	beq	r3,r2,f6ec <altera_avalon_jtag_uart_irq+0xcc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
    f698:	e0bffc17 	ldw	r2,-16(fp)
    f69c:	10800037 	ldwio	r2,0(r2)
    f6a0:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
    f6a4:	e0bff917 	ldw	r2,-28(fp)
    f6a8:	10a0000c 	andi	r2,r2,32768
    f6ac:	10001126 	beq	r2,zero,f6f4 <altera_avalon_jtag_uart_irq+0xd4>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    f6b0:	e0bffb17 	ldw	r2,-20(fp)
    f6b4:	10800a17 	ldw	r2,40(r2)
    f6b8:	e0fff917 	ldw	r3,-28(fp)
    f6bc:	1809883a 	mov	r4,r3
    f6c0:	e0fffb17 	ldw	r3,-20(fp)
    f6c4:	1885883a 	add	r2,r3,r2
    f6c8:	10800e04 	addi	r2,r2,56
    f6cc:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    f6d0:	e0bffb17 	ldw	r2,-20(fp)
    f6d4:	10800a17 	ldw	r2,40(r2)
    f6d8:	10800044 	addi	r2,r2,1
    f6dc:	10c1ffcc 	andi	r3,r2,2047
    f6e0:	e0bffb17 	ldw	r2,-20(fp)
    f6e4:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
    f6e8:	003fe206 	br	f674 <altera_avalon_jtag_uart_irq+0x54>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
    f6ec:	0001883a 	nop
    f6f0:	00000106 	br	f6f8 <altera_avalon_jtag_uart_irq+0xd8>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
    f6f4:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
    f6f8:	e0bff917 	ldw	r2,-28(fp)
    f6fc:	10bfffec 	andhi	r2,r2,65535
    f700:	10000f26 	beq	r2,zero,f740 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    f704:	e0bffb17 	ldw	r2,-20(fp)
    f708:	10c00817 	ldw	r3,32(r2)
    f70c:	00bfff84 	movi	r2,-2
    f710:	1886703a 	and	r3,r3,r2
    f714:	e0bffb17 	ldw	r2,-20(fp)
    f718:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
    f71c:	e0bffc17 	ldw	r2,-16(fp)
    f720:	10800104 	addi	r2,r2,4
    f724:	1007883a 	mov	r3,r2
    f728:	e0bffb17 	ldw	r2,-20(fp)
    f72c:	10800817 	ldw	r2,32(r2)
    f730:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    f734:	e0bffc17 	ldw	r2,-16(fp)
    f738:	10800104 	addi	r2,r2,4
    f73c:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    f740:	e0bffd17 	ldw	r2,-12(fp)
    f744:	1080800c 	andi	r2,r2,512
    f748:	103fbe26 	beq	r2,zero,f644 <altera_avalon_jtag_uart_irq+0x24>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
    f74c:	e0bffd17 	ldw	r2,-12(fp)
    f750:	1004d43a 	srli	r2,r2,16
    f754:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
    f758:	00001406 	br	f7ac <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
    f75c:	e0bffc17 	ldw	r2,-16(fp)
    f760:	e0fffb17 	ldw	r3,-20(fp)
    f764:	18c00d17 	ldw	r3,52(r3)
    f768:	e13ffb17 	ldw	r4,-20(fp)
    f76c:	20c7883a 	add	r3,r4,r3
    f770:	18c20e04 	addi	r3,r3,2104
    f774:	18c00003 	ldbu	r3,0(r3)
    f778:	18c03fcc 	andi	r3,r3,255
    f77c:	18c0201c 	xori	r3,r3,128
    f780:	18ffe004 	addi	r3,r3,-128
    f784:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    f788:	e0bffb17 	ldw	r2,-20(fp)
    f78c:	10800d17 	ldw	r2,52(r2)
    f790:	10800044 	addi	r2,r2,1
    f794:	10c1ffcc 	andi	r3,r2,2047
    f798:	e0bffb17 	ldw	r2,-20(fp)
    f79c:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
    f7a0:	e0bffa17 	ldw	r2,-24(fp)
    f7a4:	10bfffc4 	addi	r2,r2,-1
    f7a8:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
    f7ac:	e0bffa17 	ldw	r2,-24(fp)
    f7b0:	10000526 	beq	r2,zero,f7c8 <altera_avalon_jtag_uart_irq+0x1a8>
    f7b4:	e0bffb17 	ldw	r2,-20(fp)
    f7b8:	10c00d17 	ldw	r3,52(r2)
    f7bc:	e0bffb17 	ldw	r2,-20(fp)
    f7c0:	10800c17 	ldw	r2,48(r2)
    f7c4:	18bfe51e 	bne	r3,r2,f75c <altera_avalon_jtag_uart_irq+0x13c>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
    f7c8:	e0bffa17 	ldw	r2,-24(fp)
    f7cc:	103f9d26 	beq	r2,zero,f644 <altera_avalon_jtag_uart_irq+0x24>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
    f7d0:	e0bffb17 	ldw	r2,-20(fp)
    f7d4:	10c00817 	ldw	r3,32(r2)
    f7d8:	00bfff44 	movi	r2,-3
    f7dc:	1886703a 	and	r3,r3,r2
    f7e0:	e0bffb17 	ldw	r2,-20(fp)
    f7e4:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    f7e8:	e0bffb17 	ldw	r2,-20(fp)
    f7ec:	10800017 	ldw	r2,0(r2)
    f7f0:	10800104 	addi	r2,r2,4
    f7f4:	1007883a 	mov	r3,r2
    f7f8:	e0bffb17 	ldw	r2,-20(fp)
    f7fc:	10800817 	ldw	r2,32(r2)
    f800:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    f804:	e0bffc17 	ldw	r2,-16(fp)
    f808:	10800104 	addi	r2,r2,4
    f80c:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
    f810:	003f8c06 	br	f644 <altera_avalon_jtag_uart_irq+0x24>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
    f814:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
    f818:	0001883a 	nop
    f81c:	e037883a 	mov	sp,fp
    f820:	df000017 	ldw	fp,0(sp)
    f824:	dec00104 	addi	sp,sp,4
    f828:	f800283a 	ret

0000f82c <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
    f82c:	defff804 	addi	sp,sp,-32
    f830:	df000715 	stw	fp,28(sp)
    f834:	df000704 	addi	fp,sp,28
    f838:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
    f83c:	e0bffb17 	ldw	r2,-20(fp)
    f840:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
    f844:	e0bff917 	ldw	r2,-28(fp)
    f848:	10800017 	ldw	r2,0(r2)
    f84c:	10800104 	addi	r2,r2,4
    f850:	10800037 	ldwio	r2,0(r2)
    f854:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
    f858:	e0bffa17 	ldw	r2,-24(fp)
    f85c:	1081000c 	andi	r2,r2,1024
    f860:	10000b26 	beq	r2,zero,f890 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
    f864:	e0bff917 	ldw	r2,-28(fp)
    f868:	10800017 	ldw	r2,0(r2)
    f86c:	10800104 	addi	r2,r2,4
    f870:	1007883a 	mov	r3,r2
    f874:	e0bff917 	ldw	r2,-28(fp)
    f878:	10800817 	ldw	r2,32(r2)
    f87c:	10810014 	ori	r2,r2,1024
    f880:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
    f884:	e0bff917 	ldw	r2,-28(fp)
    f888:	10000915 	stw	zero,36(r2)
    f88c:	00000a06 	br	f8b8 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
    f890:	e0bff917 	ldw	r2,-28(fp)
    f894:	10c00917 	ldw	r3,36(r2)
    f898:	00a00034 	movhi	r2,32768
    f89c:	10bfff04 	addi	r2,r2,-4
    f8a0:	10c00536 	bltu	r2,r3,f8b8 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
    f8a4:	e0bff917 	ldw	r2,-28(fp)
    f8a8:	10800917 	ldw	r2,36(r2)
    f8ac:	10c00044 	addi	r3,r2,1
    f8b0:	e0bff917 	ldw	r2,-28(fp)
    f8b4:	10c00915 	stw	r3,36(r2)
    f8b8:	d0a6e217 	ldw	r2,-25720(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
    f8bc:	e037883a 	mov	sp,fp
    f8c0:	df000017 	ldw	fp,0(sp)
    f8c4:	dec00104 	addi	sp,sp,4
    f8c8:	f800283a 	ret

0000f8cc <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
    f8cc:	defffd04 	addi	sp,sp,-12
    f8d0:	df000215 	stw	fp,8(sp)
    f8d4:	df000204 	addi	fp,sp,8
    f8d8:	e13ffe15 	stw	r4,-8(fp)
    f8dc:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
    f8e0:	00000506 	br	f8f8 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
    f8e4:	e0bfff17 	ldw	r2,-4(fp)
    f8e8:	1090000c 	andi	r2,r2,16384
    f8ec:	10000226 	beq	r2,zero,f8f8 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
    f8f0:	00bffd44 	movi	r2,-11
    f8f4:	00000b06 	br	f924 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
    f8f8:	e0bffe17 	ldw	r2,-8(fp)
    f8fc:	10c00d17 	ldw	r3,52(r2)
    f900:	e0bffe17 	ldw	r2,-8(fp)
    f904:	10800c17 	ldw	r2,48(r2)
    f908:	18800526 	beq	r3,r2,f920 <altera_avalon_jtag_uart_close+0x54>
    f90c:	e0bffe17 	ldw	r2,-8(fp)
    f910:	10c00917 	ldw	r3,36(r2)
    f914:	e0bffe17 	ldw	r2,-8(fp)
    f918:	10800117 	ldw	r2,4(r2)
    f91c:	18bff136 	bltu	r3,r2,f8e4 <altera_avalon_jtag_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
    f920:	0005883a 	mov	r2,zero
}
    f924:	e037883a 	mov	sp,fp
    f928:	df000017 	ldw	fp,0(sp)
    f92c:	dec00104 	addi	sp,sp,4
    f930:	f800283a 	ret

0000f934 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
    f934:	defffa04 	addi	sp,sp,-24
    f938:	df000515 	stw	fp,20(sp)
    f93c:	df000504 	addi	fp,sp,20
    f940:	e13ffd15 	stw	r4,-12(fp)
    f944:	e17ffe15 	stw	r5,-8(fp)
    f948:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
    f94c:	00bff9c4 	movi	r2,-25
    f950:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
    f954:	e0bffe17 	ldw	r2,-8(fp)
    f958:	10da8060 	cmpeqi	r3,r2,27137
    f95c:	1800031e 	bne	r3,zero,f96c <altera_avalon_jtag_uart_ioctl+0x38>
    f960:	109a80a0 	cmpeqi	r2,r2,27138
    f964:	1000181e 	bne	r2,zero,f9c8 <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
    f968:	00002906 	br	fa10 <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
    f96c:	e0bffd17 	ldw	r2,-12(fp)
    f970:	10c00117 	ldw	r3,4(r2)
    f974:	00a00034 	movhi	r2,32768
    f978:	10bfffc4 	addi	r2,r2,-1
    f97c:	18802126 	beq	r3,r2,fa04 <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
    f980:	e0bfff17 	ldw	r2,-4(fp)
    f984:	10800017 	ldw	r2,0(r2)
    f988:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
    f98c:	e0bffc17 	ldw	r2,-16(fp)
    f990:	10800090 	cmplti	r2,r2,2
    f994:	1000061e 	bne	r2,zero,f9b0 <altera_avalon_jtag_uart_ioctl+0x7c>
    f998:	e0fffc17 	ldw	r3,-16(fp)
    f99c:	00a00034 	movhi	r2,32768
    f9a0:	10bfffc4 	addi	r2,r2,-1
    f9a4:	18800226 	beq	r3,r2,f9b0 <altera_avalon_jtag_uart_ioctl+0x7c>
    f9a8:	e0bffc17 	ldw	r2,-16(fp)
    f9ac:	00000206 	br	f9b8 <altera_avalon_jtag_uart_ioctl+0x84>
    f9b0:	00a00034 	movhi	r2,32768
    f9b4:	10bfff84 	addi	r2,r2,-2
    f9b8:	e0fffd17 	ldw	r3,-12(fp)
    f9bc:	18800115 	stw	r2,4(r3)
      rc = 0;
    f9c0:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
    f9c4:	00000f06 	br	fa04 <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
    f9c8:	e0bffd17 	ldw	r2,-12(fp)
    f9cc:	10c00117 	ldw	r3,4(r2)
    f9d0:	00a00034 	movhi	r2,32768
    f9d4:	10bfffc4 	addi	r2,r2,-1
    f9d8:	18800c26 	beq	r3,r2,fa0c <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
    f9dc:	e0bffd17 	ldw	r2,-12(fp)
    f9e0:	10c00917 	ldw	r3,36(r2)
    f9e4:	e0bffd17 	ldw	r2,-12(fp)
    f9e8:	10800117 	ldw	r2,4(r2)
    f9ec:	1885803a 	cmpltu	r2,r3,r2
    f9f0:	10c03fcc 	andi	r3,r2,255
    f9f4:	e0bfff17 	ldw	r2,-4(fp)
    f9f8:	10c00015 	stw	r3,0(r2)
      rc = 0;
    f9fc:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
    fa00:	00000206 	br	fa0c <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
    fa04:	0001883a 	nop
    fa08:	00000106 	br	fa10 <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
    fa0c:	0001883a 	nop

  default:
    break;
  }

  return rc;
    fa10:	e0bffb17 	ldw	r2,-20(fp)
}
    fa14:	e037883a 	mov	sp,fp
    fa18:	df000017 	ldw	fp,0(sp)
    fa1c:	dec00104 	addi	sp,sp,4
    fa20:	f800283a 	ret

0000fa24 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
    fa24:	defff304 	addi	sp,sp,-52
    fa28:	dfc00c15 	stw	ra,48(sp)
    fa2c:	df000b15 	stw	fp,44(sp)
    fa30:	df000b04 	addi	fp,sp,44
    fa34:	e13ffc15 	stw	r4,-16(fp)
    fa38:	e17ffd15 	stw	r5,-12(fp)
    fa3c:	e1bffe15 	stw	r6,-8(fp)
    fa40:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
    fa44:	e0bffd17 	ldw	r2,-12(fp)
    fa48:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
    fa4c:	00004706 	br	fb6c <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
    fa50:	e0bffc17 	ldw	r2,-16(fp)
    fa54:	10800a17 	ldw	r2,40(r2)
    fa58:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
    fa5c:	e0bffc17 	ldw	r2,-16(fp)
    fa60:	10800b17 	ldw	r2,44(r2)
    fa64:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
    fa68:	e0fff717 	ldw	r3,-36(fp)
    fa6c:	e0bff817 	ldw	r2,-32(fp)
    fa70:	18800536 	bltu	r3,r2,fa88 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
    fa74:	e0fff717 	ldw	r3,-36(fp)
    fa78:	e0bff817 	ldw	r2,-32(fp)
    fa7c:	1885c83a 	sub	r2,r3,r2
    fa80:	e0bff615 	stw	r2,-40(fp)
    fa84:	00000406 	br	fa98 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
    fa88:	00c20004 	movi	r3,2048
    fa8c:	e0bff817 	ldw	r2,-32(fp)
    fa90:	1885c83a 	sub	r2,r3,r2
    fa94:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
    fa98:	e0bff617 	ldw	r2,-40(fp)
    fa9c:	10001e26 	beq	r2,zero,fb18 <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
    faa0:	e0fffe17 	ldw	r3,-8(fp)
    faa4:	e0bff617 	ldw	r2,-40(fp)
    faa8:	1880022e 	bgeu	r3,r2,fab4 <altera_avalon_jtag_uart_read+0x90>
        n = space;
    faac:	e0bffe17 	ldw	r2,-8(fp)
    fab0:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
    fab4:	e0bffc17 	ldw	r2,-16(fp)
    fab8:	10c00e04 	addi	r3,r2,56
    fabc:	e0bff817 	ldw	r2,-32(fp)
    fac0:	1885883a 	add	r2,r3,r2
    fac4:	e1bff617 	ldw	r6,-40(fp)
    fac8:	100b883a 	mov	r5,r2
    facc:	e13ff517 	ldw	r4,-44(fp)
    fad0:	0007d540 	call	7d54 <memcpy>
      ptr   += n;
    fad4:	e0fff517 	ldw	r3,-44(fp)
    fad8:	e0bff617 	ldw	r2,-40(fp)
    fadc:	1885883a 	add	r2,r3,r2
    fae0:	e0bff515 	stw	r2,-44(fp)
      space -= n;
    fae4:	e0fffe17 	ldw	r3,-8(fp)
    fae8:	e0bff617 	ldw	r2,-40(fp)
    faec:	1885c83a 	sub	r2,r3,r2
    faf0:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    faf4:	e0fff817 	ldw	r3,-32(fp)
    faf8:	e0bff617 	ldw	r2,-40(fp)
    fafc:	1885883a 	add	r2,r3,r2
    fb00:	10c1ffcc 	andi	r3,r2,2047
    fb04:	e0bffc17 	ldw	r2,-16(fp)
    fb08:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
    fb0c:	e0bffe17 	ldw	r2,-8(fp)
    fb10:	00bfcf16 	blt	zero,r2,fa50 <altera_avalon_jtag_uart_read+0x2c>
    fb14:	00000106 	br	fb1c <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
    fb18:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
    fb1c:	e0fff517 	ldw	r3,-44(fp)
    fb20:	e0bffd17 	ldw	r2,-12(fp)
    fb24:	1880141e 	bne	r3,r2,fb78 <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
    fb28:	e0bfff17 	ldw	r2,-4(fp)
    fb2c:	1090000c 	andi	r2,r2,16384
    fb30:	1000131e 	bne	r2,zero,fb80 <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
    fb34:	0001883a 	nop
    fb38:	e0bffc17 	ldw	r2,-16(fp)
    fb3c:	10c00a17 	ldw	r3,40(r2)
    fb40:	e0bff717 	ldw	r2,-36(fp)
    fb44:	1880051e 	bne	r3,r2,fb5c <altera_avalon_jtag_uart_read+0x138>
    fb48:	e0bffc17 	ldw	r2,-16(fp)
    fb4c:	10c00917 	ldw	r3,36(r2)
    fb50:	e0bffc17 	ldw	r2,-16(fp)
    fb54:	10800117 	ldw	r2,4(r2)
    fb58:	18bff736 	bltu	r3,r2,fb38 <altera_avalon_jtag_uart_read+0x114>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
    fb5c:	e0bffc17 	ldw	r2,-16(fp)
    fb60:	10c00a17 	ldw	r3,40(r2)
    fb64:	e0bff717 	ldw	r2,-36(fp)
    fb68:	18800726 	beq	r3,r2,fb88 <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
    fb6c:	e0bffe17 	ldw	r2,-8(fp)
    fb70:	00bfb716 	blt	zero,r2,fa50 <altera_avalon_jtag_uart_read+0x2c>
    fb74:	00000506 	br	fb8c <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
    fb78:	0001883a 	nop
    fb7c:	00000306 	br	fb8c <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
    fb80:	0001883a 	nop
    fb84:	00000106 	br	fb8c <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
    fb88:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
    fb8c:	e0fff517 	ldw	r3,-44(fp)
    fb90:	e0bffd17 	ldw	r2,-12(fp)
    fb94:	18801826 	beq	r3,r2,fbf8 <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    fb98:	0005303a 	rdctl	r2,status
    fb9c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    fba0:	e0fffb17 	ldw	r3,-20(fp)
    fba4:	00bfff84 	movi	r2,-2
    fba8:	1884703a 	and	r2,r3,r2
    fbac:	1001703a 	wrctl	status,r2
  
  return context;
    fbb0:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
    fbb4:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    fbb8:	e0bffc17 	ldw	r2,-16(fp)
    fbbc:	10800817 	ldw	r2,32(r2)
    fbc0:	10c00054 	ori	r3,r2,1
    fbc4:	e0bffc17 	ldw	r2,-16(fp)
    fbc8:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    fbcc:	e0bffc17 	ldw	r2,-16(fp)
    fbd0:	10800017 	ldw	r2,0(r2)
    fbd4:	10800104 	addi	r2,r2,4
    fbd8:	1007883a 	mov	r3,r2
    fbdc:	e0bffc17 	ldw	r2,-16(fp)
    fbe0:	10800817 	ldw	r2,32(r2)
    fbe4:	18800035 	stwio	r2,0(r3)
    fbe8:	e0bffa17 	ldw	r2,-24(fp)
    fbec:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    fbf0:	e0bff917 	ldw	r2,-28(fp)
    fbf4:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
    fbf8:	e0fff517 	ldw	r3,-44(fp)
    fbfc:	e0bffd17 	ldw	r2,-12(fp)
    fc00:	18800426 	beq	r3,r2,fc14 <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
    fc04:	e0fff517 	ldw	r3,-44(fp)
    fc08:	e0bffd17 	ldw	r2,-12(fp)
    fc0c:	1885c83a 	sub	r2,r3,r2
    fc10:	00000606 	br	fc2c <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
    fc14:	e0bfff17 	ldw	r2,-4(fp)
    fc18:	1090000c 	andi	r2,r2,16384
    fc1c:	10000226 	beq	r2,zero,fc28 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
    fc20:	00bffd44 	movi	r2,-11
    fc24:	00000106 	br	fc2c <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
    fc28:	00bffec4 	movi	r2,-5
}
    fc2c:	e037883a 	mov	sp,fp
    fc30:	dfc00117 	ldw	ra,4(sp)
    fc34:	df000017 	ldw	fp,0(sp)
    fc38:	dec00204 	addi	sp,sp,8
    fc3c:	f800283a 	ret

0000fc40 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
    fc40:	defff304 	addi	sp,sp,-52
    fc44:	dfc00c15 	stw	ra,48(sp)
    fc48:	df000b15 	stw	fp,44(sp)
    fc4c:	df000b04 	addi	fp,sp,44
    fc50:	e13ffc15 	stw	r4,-16(fp)
    fc54:	e17ffd15 	stw	r5,-12(fp)
    fc58:	e1bffe15 	stw	r6,-8(fp)
    fc5c:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
    fc60:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
    fc64:	e0bffd17 	ldw	r2,-12(fp)
    fc68:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
    fc6c:	00003706 	br	fd4c <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
    fc70:	e0bffc17 	ldw	r2,-16(fp)
    fc74:	10800c17 	ldw	r2,48(r2)
    fc78:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
    fc7c:	e0bffc17 	ldw	r2,-16(fp)
    fc80:	10800d17 	ldw	r2,52(r2)
    fc84:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
    fc88:	e0fff917 	ldw	r3,-28(fp)
    fc8c:	e0bff517 	ldw	r2,-44(fp)
    fc90:	1880062e 	bgeu	r3,r2,fcac <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
    fc94:	e0fff517 	ldw	r3,-44(fp)
    fc98:	e0bff917 	ldw	r2,-28(fp)
    fc9c:	1885c83a 	sub	r2,r3,r2
    fca0:	10bfffc4 	addi	r2,r2,-1
    fca4:	e0bff615 	stw	r2,-40(fp)
    fca8:	00000b06 	br	fcd8 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
    fcac:	e0bff517 	ldw	r2,-44(fp)
    fcb0:	10000526 	beq	r2,zero,fcc8 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
    fcb4:	00c20004 	movi	r3,2048
    fcb8:	e0bff917 	ldw	r2,-28(fp)
    fcbc:	1885c83a 	sub	r2,r3,r2
    fcc0:	e0bff615 	stw	r2,-40(fp)
    fcc4:	00000406 	br	fcd8 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
    fcc8:	00c1ffc4 	movi	r3,2047
    fccc:	e0bff917 	ldw	r2,-28(fp)
    fcd0:	1885c83a 	sub	r2,r3,r2
    fcd4:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
    fcd8:	e0bff617 	ldw	r2,-40(fp)
    fcdc:	10001e26 	beq	r2,zero,fd58 <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
    fce0:	e0fffe17 	ldw	r3,-8(fp)
    fce4:	e0bff617 	ldw	r2,-40(fp)
    fce8:	1880022e 	bgeu	r3,r2,fcf4 <altera_avalon_jtag_uart_write+0xb4>
        n = count;
    fcec:	e0bffe17 	ldw	r2,-8(fp)
    fcf0:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
    fcf4:	e0bffc17 	ldw	r2,-16(fp)
    fcf8:	10c20e04 	addi	r3,r2,2104
    fcfc:	e0bff917 	ldw	r2,-28(fp)
    fd00:	1885883a 	add	r2,r3,r2
    fd04:	e1bff617 	ldw	r6,-40(fp)
    fd08:	e17ffd17 	ldw	r5,-12(fp)
    fd0c:	1009883a 	mov	r4,r2
    fd10:	0007d540 	call	7d54 <memcpy>
      ptr   += n;
    fd14:	e0fffd17 	ldw	r3,-12(fp)
    fd18:	e0bff617 	ldw	r2,-40(fp)
    fd1c:	1885883a 	add	r2,r3,r2
    fd20:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
    fd24:	e0fffe17 	ldw	r3,-8(fp)
    fd28:	e0bff617 	ldw	r2,-40(fp)
    fd2c:	1885c83a 	sub	r2,r3,r2
    fd30:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    fd34:	e0fff917 	ldw	r3,-28(fp)
    fd38:	e0bff617 	ldw	r2,-40(fp)
    fd3c:	1885883a 	add	r2,r3,r2
    fd40:	10c1ffcc 	andi	r3,r2,2047
    fd44:	e0bffc17 	ldw	r2,-16(fp)
    fd48:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
    fd4c:	e0bffe17 	ldw	r2,-8(fp)
    fd50:	00bfc716 	blt	zero,r2,fc70 <altera_avalon_jtag_uart_write+0x30>
    fd54:	00000106 	br	fd5c <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
    fd58:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    fd5c:	0005303a 	rdctl	r2,status
    fd60:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    fd64:	e0fffb17 	ldw	r3,-20(fp)
    fd68:	00bfff84 	movi	r2,-2
    fd6c:	1884703a 	and	r2,r3,r2
    fd70:	1001703a 	wrctl	status,r2
  
  return context;
    fd74:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
    fd78:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
    fd7c:	e0bffc17 	ldw	r2,-16(fp)
    fd80:	10800817 	ldw	r2,32(r2)
    fd84:	10c00094 	ori	r3,r2,2
    fd88:	e0bffc17 	ldw	r2,-16(fp)
    fd8c:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    fd90:	e0bffc17 	ldw	r2,-16(fp)
    fd94:	10800017 	ldw	r2,0(r2)
    fd98:	10800104 	addi	r2,r2,4
    fd9c:	1007883a 	mov	r3,r2
    fda0:	e0bffc17 	ldw	r2,-16(fp)
    fda4:	10800817 	ldw	r2,32(r2)
    fda8:	18800035 	stwio	r2,0(r3)
    fdac:	e0bffa17 	ldw	r2,-24(fp)
    fdb0:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    fdb4:	e0bff817 	ldw	r2,-32(fp)
    fdb8:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    fdbc:	e0bffe17 	ldw	r2,-8(fp)
    fdc0:	0080100e 	bge	zero,r2,fe04 <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
    fdc4:	e0bfff17 	ldw	r2,-4(fp)
    fdc8:	1090000c 	andi	r2,r2,16384
    fdcc:	1000101e 	bne	r2,zero,fe10 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
    fdd0:	0001883a 	nop
    fdd4:	e0bffc17 	ldw	r2,-16(fp)
    fdd8:	10c00d17 	ldw	r3,52(r2)
    fddc:	e0bff517 	ldw	r2,-44(fp)
    fde0:	1880051e 	bne	r3,r2,fdf8 <altera_avalon_jtag_uart_write+0x1b8>
    fde4:	e0bffc17 	ldw	r2,-16(fp)
    fde8:	10c00917 	ldw	r3,36(r2)
    fdec:	e0bffc17 	ldw	r2,-16(fp)
    fdf0:	10800117 	ldw	r2,4(r2)
    fdf4:	18bff736 	bltu	r3,r2,fdd4 <altera_avalon_jtag_uart_write+0x194>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
    fdf8:	e0bffc17 	ldw	r2,-16(fp)
    fdfc:	10800917 	ldw	r2,36(r2)
    fe00:	1000051e 	bne	r2,zero,fe18 <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
    fe04:	e0bffe17 	ldw	r2,-8(fp)
    fe08:	00bfd016 	blt	zero,r2,fd4c <altera_avalon_jtag_uart_write+0x10c>
    fe0c:	00000306 	br	fe1c <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
    fe10:	0001883a 	nop
    fe14:	00000106 	br	fe1c <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
    fe18:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
    fe1c:	e0fffd17 	ldw	r3,-12(fp)
    fe20:	e0bff717 	ldw	r2,-36(fp)
    fe24:	18800426 	beq	r3,r2,fe38 <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
    fe28:	e0fffd17 	ldw	r3,-12(fp)
    fe2c:	e0bff717 	ldw	r2,-36(fp)
    fe30:	1885c83a 	sub	r2,r3,r2
    fe34:	00000606 	br	fe50 <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
    fe38:	e0bfff17 	ldw	r2,-4(fp)
    fe3c:	1090000c 	andi	r2,r2,16384
    fe40:	10000226 	beq	r2,zero,fe4c <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
    fe44:	00bffd44 	movi	r2,-11
    fe48:	00000106 	br	fe50 <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
    fe4c:	00bffec4 	movi	r2,-5
}
    fe50:	e037883a 	mov	sp,fp
    fe54:	dfc00117 	ldw	ra,4(sp)
    fe58:	df000017 	ldw	fp,0(sp)
    fe5c:	dec00204 	addi	sp,sp,8
    fe60:	f800283a 	ret

0000fe64 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
    fe64:	defffa04 	addi	sp,sp,-24
    fe68:	dfc00515 	stw	ra,20(sp)
    fe6c:	df000415 	stw	fp,16(sp)
    fe70:	df000404 	addi	fp,sp,16
    fe74:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
    fe78:	0007883a 	mov	r3,zero
    fe7c:	e0bfff17 	ldw	r2,-4(fp)
    fe80:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
    fe84:	e0bfff17 	ldw	r2,-4(fp)
    fe88:	10800104 	addi	r2,r2,4
    fe8c:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    fe90:	0005303a 	rdctl	r2,status
    fe94:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    fe98:	e0fffd17 	ldw	r3,-12(fp)
    fe9c:	00bfff84 	movi	r2,-2
    fea0:	1884703a 	and	r2,r3,r2
    fea4:	1001703a 	wrctl	status,r2
  
  return context;
    fea8:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
    feac:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
    feb0:	0010bb80 	call	10bb8 <alt_tick>
    feb4:	e0bffc17 	ldw	r2,-16(fp)
    feb8:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    febc:	e0bffe17 	ldw	r2,-8(fp)
    fec0:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
    fec4:	0001883a 	nop
    fec8:	e037883a 	mov	sp,fp
    fecc:	dfc00117 	ldw	ra,4(sp)
    fed0:	df000017 	ldw	fp,0(sp)
    fed4:	dec00204 	addi	sp,sp,8
    fed8:	f800283a 	ret

0000fedc <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
    fedc:	defff804 	addi	sp,sp,-32
    fee0:	dfc00715 	stw	ra,28(sp)
    fee4:	df000615 	stw	fp,24(sp)
    fee8:	df000604 	addi	fp,sp,24
    feec:	e13ffc15 	stw	r4,-16(fp)
    fef0:	e17ffd15 	stw	r5,-12(fp)
    fef4:	e1bffe15 	stw	r6,-8(fp)
    fef8:	e1ffff15 	stw	r7,-4(fp)
    fefc:	e0bfff17 	ldw	r2,-4(fp)
    ff00:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
    ff04:	d0a6e217 	ldw	r2,-25720(gp)
    ff08:	1000021e 	bne	r2,zero,ff14 <alt_avalon_timer_sc_init+0x38>
  {
    _alt_tick_rate = nticks;
    ff0c:	e0bffb17 	ldw	r2,-20(fp)
    ff10:	d0a6e215 	stw	r2,-25720(gp)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
    ff14:	e0bffc17 	ldw	r2,-16(fp)
    ff18:	10800104 	addi	r2,r2,4
    ff1c:	00c001c4 	movi	r3,7
    ff20:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
    ff24:	d8000015 	stw	zero,0(sp)
    ff28:	e1fffc17 	ldw	r7,-16(fp)
    ff2c:	01800074 	movhi	r6,1
    ff30:	31bf9904 	addi	r6,r6,-412
    ff34:	e17ffe17 	ldw	r5,-8(fp)
    ff38:	e13ffd17 	ldw	r4,-12(fp)
    ff3c:	00104e80 	call	104e8 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
    ff40:	0001883a 	nop
    ff44:	e037883a 	mov	sp,fp
    ff48:	dfc00117 	ldw	ra,4(sp)
    ff4c:	df000017 	ldw	fp,0(sp)
    ff50:	dec00204 	addi	sp,sp,8
    ff54:	f800283a 	ret

0000ff58 <alt_timestamp_start>:
 * The return value of this function is 0 upon sucess and -1 if in timestamp
 * device has not been registered. 
 */

int alt_timestamp_start(void)
{
    ff58:	defffe04 	addi	sp,sp,-8
    ff5c:	df000115 	stw	fp,4(sp)
    ff60:	df000104 	addi	fp,sp,4
  void* base = altera_avalon_timer_ts_base;
    ff64:	d0a6df17 	ldw	r2,-25732(gp)
    ff68:	e0bfff15 	stw	r2,-4(fp)

  if (!altera_avalon_timer_ts_freq)
    ff6c:	d0a6e017 	ldw	r2,-25728(gp)
    ff70:	1000021e 	bne	r2,zero,ff7c <alt_timestamp_start+0x24>
  {
    return -1;
    ff74:	00bfffc4 	movi	r2,-1
    ff78:	00001106 	br	ffc0 <alt_timestamp_start+0x68>
        IOWR_ALTERA_AVALON_TIMER_PERIOD_1 (base, 0xFFFF);;
        IOWR_ALTERA_AVALON_TIMER_PERIOD_2 (base, 0xFFFF);
        IOWR_ALTERA_AVALON_TIMER_PERIOD_3 (base, 0xFFFF);
        IOWR_ALTERA_AVALON_TIMER_CONTROL (base, ALTERA_AVALON_TIMER_CONTROL_START_MSK);
    } else {
        IOWR_ALTERA_AVALON_TIMER_CONTROL (base,ALTERA_AVALON_TIMER_CONTROL_STOP_MSK);
    ff7c:	e0bfff17 	ldw	r2,-4(fp)
    ff80:	10800104 	addi	r2,r2,4
    ff84:	00c00204 	movi	r3,8
    ff88:	10c00035 	stwio	r3,0(r2)
        IOWR_ALTERA_AVALON_TIMER_PERIODL (base, 0xFFFF);
    ff8c:	e0bfff17 	ldw	r2,-4(fp)
    ff90:	10800204 	addi	r2,r2,8
    ff94:	00ffffd4 	movui	r3,65535
    ff98:	10c00035 	stwio	r3,0(r2)
        IOWR_ALTERA_AVALON_TIMER_PERIODH (base, 0xFFFF);
    ff9c:	e0bfff17 	ldw	r2,-4(fp)
    ffa0:	10800304 	addi	r2,r2,12
    ffa4:	00ffffd4 	movui	r3,65535
    ffa8:	10c00035 	stwio	r3,0(r2)
        IOWR_ALTERA_AVALON_TIMER_CONTROL (base, ALTERA_AVALON_TIMER_CONTROL_START_MSK); 
    ffac:	e0bfff17 	ldw	r2,-4(fp)
    ffb0:	10800104 	addi	r2,r2,4
    ffb4:	00c00104 	movi	r3,4
    ffb8:	10c00035 	stwio	r3,0(r2)
    } 
  }
  return 0;
    ffbc:	0005883a 	mov	r2,zero
}
    ffc0:	e037883a 	mov	sp,fp
    ffc4:	df000017 	ldw	fp,0(sp)
    ffc8:	dec00104 	addi	sp,sp,4
    ffcc:	f800283a 	ret

0000ffd0 <alt_timestamp>:
 * The returned timestamp counts up from the last time the period register
 * was reset. 
 */

alt_timestamp_type alt_timestamp(void)
{
    ffd0:	defffc04 	addi	sp,sp,-16
    ffd4:	df000315 	stw	fp,12(sp)
    ffd8:	df000304 	addi	fp,sp,12

  void* base = altera_avalon_timer_ts_base;
    ffdc:	d0a6df17 	ldw	r2,-25732(gp)
    ffe0:	e0bffd15 	stw	r2,-12(fp)

  if (!altera_avalon_timer_ts_freq)
    ffe4:	d0a6e017 	ldw	r2,-25728(gp)
    ffe8:	1000021e 	bne	r2,zero,fff4 <alt_timestamp+0x24>
  {
#if (ALT_TIMESTAMP_COUNTER_SIZE == 64)
        return 0xFFFFFFFFFFFFFFFFULL;
#else
        return 0xFFFFFFFF;
    ffec:	00bfffc4 	movi	r2,-1
    fff0:	00001306 	br	10040 <alt_timestamp+0x70>
        alt_timestamp_type snap_2 = IORD_ALTERA_AVALON_TIMER_SNAP_2(base) & ALTERA_AVALON_TIMER_SNAP_2_MSK;
        alt_timestamp_type snap_3 = IORD_ALTERA_AVALON_TIMER_SNAP_3(base) & ALTERA_AVALON_TIMER_SNAP_3_MSK;
        
        return (0xFFFFFFFFFFFFFFFFULL - ( (snap_3 << 48) | (snap_2 << 32) | (snap_1 << 16) | (snap_0) ));
#else
        IOWR_ALTERA_AVALON_TIMER_SNAPL (base, 0);
    fff4:	e0bffd17 	ldw	r2,-12(fp)
    fff8:	10800404 	addi	r2,r2,16
    fffc:	0007883a 	mov	r3,zero
   10000:	10c00035 	stwio	r3,0(r2)
        alt_timestamp_type lower = IORD_ALTERA_AVALON_TIMER_SNAPL(base) & ALTERA_AVALON_TIMER_SNAPL_MSK;
   10004:	e0bffd17 	ldw	r2,-12(fp)
   10008:	10800404 	addi	r2,r2,16
   1000c:	10800037 	ldwio	r2,0(r2)
   10010:	10bfffcc 	andi	r2,r2,65535
   10014:	e0bffe15 	stw	r2,-8(fp)
        alt_timestamp_type upper = IORD_ALTERA_AVALON_TIMER_SNAPH(base) & ALTERA_AVALON_TIMER_SNAPH_MSK;
   10018:	e0bffd17 	ldw	r2,-12(fp)
   1001c:	10800504 	addi	r2,r2,20
   10020:	10800037 	ldwio	r2,0(r2)
   10024:	10bfffcc 	andi	r2,r2,65535
   10028:	e0bfff15 	stw	r2,-4(fp)
        
        return (0xFFFFFFFF - ((upper << 16) | lower)); 
   1002c:	e0bfff17 	ldw	r2,-4(fp)
   10030:	1006943a 	slli	r3,r2,16
   10034:	e0bffe17 	ldw	r2,-8(fp)
   10038:	1884b03a 	or	r2,r3,r2
   1003c:	0084303a 	nor	r2,zero,r2
#endif
  }
}
   10040:	e037883a 	mov	sp,fp
   10044:	df000017 	ldw	fp,0(sp)
   10048:	dec00104 	addi	sp,sp,4
   1004c:	f800283a 	ret

00010050 <alt_timestamp_freq>:
 * Return the number of timestamp ticks per second. This will be 0 if no
 * timestamp device has been registered.
 */

alt_u32 alt_timestamp_freq(void)
{
   10050:	deffff04 	addi	sp,sp,-4
   10054:	df000015 	stw	fp,0(sp)
   10058:	d839883a 	mov	fp,sp
  return altera_avalon_timer_ts_freq;
   1005c:	d0a6e017 	ldw	r2,-25728(gp)
}
   10060:	e037883a 	mov	sp,fp
   10064:	df000017 	ldw	fp,0(sp)
   10068:	dec00104 	addi	sp,sp,4
   1006c:	f800283a 	ret

00010070 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
   10070:	defff504 	addi	sp,sp,-44
   10074:	df000a15 	stw	fp,40(sp)
   10078:	df000a04 	addi	fp,sp,40
   1007c:	e13ffc15 	stw	r4,-16(fp)
   10080:	e17ffd15 	stw	r5,-12(fp)
   10084:	e1bffe15 	stw	r6,-8(fp)
   10088:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
   1008c:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   10090:	d0a6e217 	ldw	r2,-25720(gp)
  
  if (alt_ticks_per_second ())
   10094:	10003c26 	beq	r2,zero,10188 <alt_alarm_start+0x118>
  {
    if (alarm)
   10098:	e0bffc17 	ldw	r2,-16(fp)
   1009c:	10003826 	beq	r2,zero,10180 <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
   100a0:	e0bffc17 	ldw	r2,-16(fp)
   100a4:	e0fffe17 	ldw	r3,-8(fp)
   100a8:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
   100ac:	e0bffc17 	ldw	r2,-16(fp)
   100b0:	e0ffff17 	ldw	r3,-4(fp)
   100b4:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   100b8:	0005303a 	rdctl	r2,status
   100bc:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   100c0:	e0fff917 	ldw	r3,-28(fp)
   100c4:	00bfff84 	movi	r2,-2
   100c8:	1884703a 	and	r2,r3,r2
   100cc:	1001703a 	wrctl	status,r2
  
  return context;
   100d0:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
   100d4:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
   100d8:	d0a6e317 	ldw	r2,-25716(gp)
      
      current_nticks = alt_nticks();
   100dc:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
   100e0:	e0fffd17 	ldw	r3,-12(fp)
   100e4:	e0bff617 	ldw	r2,-40(fp)
   100e8:	1885883a 	add	r2,r3,r2
   100ec:	10c00044 	addi	r3,r2,1
   100f0:	e0bffc17 	ldw	r2,-16(fp)
   100f4:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
   100f8:	e0bffc17 	ldw	r2,-16(fp)
   100fc:	10c00217 	ldw	r3,8(r2)
   10100:	e0bff617 	ldw	r2,-40(fp)
   10104:	1880042e 	bgeu	r3,r2,10118 <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
   10108:	e0bffc17 	ldw	r2,-16(fp)
   1010c:	00c00044 	movi	r3,1
   10110:	10c00405 	stb	r3,16(r2)
   10114:	00000206 	br	10120 <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
   10118:	e0bffc17 	ldw	r2,-16(fp)
   1011c:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
   10120:	e0bffc17 	ldw	r2,-16(fp)
   10124:	d0e00e04 	addi	r3,gp,-32712
   10128:	e0fffa15 	stw	r3,-24(fp)
   1012c:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   10130:	e0bffb17 	ldw	r2,-20(fp)
   10134:	e0fffa17 	ldw	r3,-24(fp)
   10138:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   1013c:	e0bffa17 	ldw	r2,-24(fp)
   10140:	10c00017 	ldw	r3,0(r2)
   10144:	e0bffb17 	ldw	r2,-20(fp)
   10148:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   1014c:	e0bffa17 	ldw	r2,-24(fp)
   10150:	10800017 	ldw	r2,0(r2)
   10154:	e0fffb17 	ldw	r3,-20(fp)
   10158:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   1015c:	e0bffa17 	ldw	r2,-24(fp)
   10160:	e0fffb17 	ldw	r3,-20(fp)
   10164:	10c00015 	stw	r3,0(r2)
   10168:	e0bff817 	ldw	r2,-32(fp)
   1016c:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   10170:	e0bff717 	ldw	r2,-36(fp)
   10174:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
   10178:	0005883a 	mov	r2,zero
   1017c:	00000306 	br	1018c <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
   10180:	00bffa84 	movi	r2,-22
   10184:	00000106 	br	1018c <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
   10188:	00bfde84 	movi	r2,-134
  }
}
   1018c:	e037883a 	mov	sp,fp
   10190:	df000017 	ldw	fp,0(sp)
   10194:	dec00104 	addi	sp,sp,4
   10198:	f800283a 	ret

0001019c <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
   1019c:	defffa04 	addi	sp,sp,-24
   101a0:	dfc00515 	stw	ra,20(sp)
   101a4:	df000415 	stw	fp,16(sp)
   101a8:	df000404 	addi	fp,sp,16
   101ac:	e13fff15 	stw	r4,-4(fp)
  {
    cycles_per_loop = 9;
  }
  else  
  {
    cycles_per_loop = 3;
   101b0:	008000c4 	movi	r2,3
   101b4:	e0bffd15 	stw	r2,-12(fp)
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
   101b8:	e0fffd17 	ldw	r3,-12(fp)
   101bc:	008003f4 	movhi	r2,15
   101c0:	10909004 	addi	r2,r2,16960
   101c4:	1885383a 	mul	r2,r3,r2
   101c8:	100b883a 	mov	r5,r2
   101cc:	0100bef4 	movhi	r4,763
   101d0:	213c2004 	addi	r4,r4,-3968
   101d4:	00021500 	call	2150 <__udivsi3>
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
   101d8:	100b883a 	mov	r5,r2
   101dc:	01200034 	movhi	r4,32768
   101e0:	213fffc4 	addi	r4,r4,-1
   101e4:	00021500 	call	2150 <__udivsi3>
   101e8:	100b883a 	mov	r5,r2
   101ec:	e13fff17 	ldw	r4,-4(fp)
   101f0:	00021500 	call	2150 <__udivsi3>
   101f4:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
   101f8:	e0bffe17 	ldw	r2,-8(fp)
   101fc:	10002a26 	beq	r2,zero,102a8 <alt_busy_sleep+0x10c>
  {
    for(i=0;i<big_loops;i++)
   10200:	e03ffc15 	stw	zero,-16(fp)
   10204:	00001706 	br	10264 <alt_busy_sleep+0xc8>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
   10208:	00a00034 	movhi	r2,32768
   1020c:	10bfffc4 	addi	r2,r2,-1
   10210:	10bfffc4 	addi	r2,r2,-1
   10214:	103ffe1e 	bne	r2,zero,10210 <alt_busy_sleep+0x74>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
   10218:	e0fffd17 	ldw	r3,-12(fp)
   1021c:	008003f4 	movhi	r2,15
   10220:	10909004 	addi	r2,r2,16960
   10224:	1885383a 	mul	r2,r3,r2
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
   10228:	100b883a 	mov	r5,r2
   1022c:	0100bef4 	movhi	r4,763
   10230:	213c2004 	addi	r4,r4,-3968
   10234:	00021500 	call	2150 <__udivsi3>
   10238:	100b883a 	mov	r5,r2
   1023c:	01200034 	movhi	r4,32768
   10240:	213fffc4 	addi	r4,r4,-1
   10244:	00021500 	call	2150 <__udivsi3>
   10248:	1007883a 	mov	r3,r2
   1024c:	e0bfff17 	ldw	r2,-4(fp)
   10250:	10c5c83a 	sub	r2,r2,r3
   10254:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
   10258:	e0bffc17 	ldw	r2,-16(fp)
   1025c:	10800044 	addi	r2,r2,1
   10260:	e0bffc15 	stw	r2,-16(fp)
   10264:	e0fffc17 	ldw	r3,-16(fp)
   10268:	e0bffe17 	ldw	r2,-8(fp)
   1026c:	18bfe616 	blt	r3,r2,10208 <alt_busy_sleep+0x6c>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
   10270:	e0fffd17 	ldw	r3,-12(fp)
   10274:	008003f4 	movhi	r2,15
   10278:	10909004 	addi	r2,r2,16960
   1027c:	1885383a 	mul	r2,r3,r2
   10280:	100b883a 	mov	r5,r2
   10284:	0100bef4 	movhi	r4,763
   10288:	213c2004 	addi	r4,r4,-3968
   1028c:	00021500 	call	2150 <__udivsi3>
   10290:	1007883a 	mov	r3,r2
   10294:	e0bfff17 	ldw	r2,-4(fp)
   10298:	1885383a 	mul	r2,r3,r2
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
   1029c:	10bfffc4 	addi	r2,r2,-1
   102a0:	103ffe1e 	bne	r2,zero,1029c <alt_busy_sleep+0x100>
   102a4:	00000d06 	br	102dc <alt_busy_sleep+0x140>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
   102a8:	e0fffd17 	ldw	r3,-12(fp)
   102ac:	008003f4 	movhi	r2,15
   102b0:	10909004 	addi	r2,r2,16960
   102b4:	1885383a 	mul	r2,r3,r2
   102b8:	100b883a 	mov	r5,r2
   102bc:	0100bef4 	movhi	r4,763
   102c0:	213c2004 	addi	r4,r4,-3968
   102c4:	00021500 	call	2150 <__udivsi3>
   102c8:	1007883a 	mov	r3,r2
   102cc:	e0bfff17 	ldw	r2,-4(fp)
   102d0:	1885383a 	mul	r2,r3,r2
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
   102d4:	10bfffc4 	addi	r2,r2,-1
   102d8:	00bffe16 	blt	zero,r2,102d4 <alt_busy_sleep+0x138>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
   102dc:	0005883a 	mov	r2,zero
}
   102e0:	e037883a 	mov	sp,fp
   102e4:	dfc00117 	ldw	ra,4(sp)
   102e8:	df000017 	ldw	fp,0(sp)
   102ec:	dec00204 	addi	sp,sp,8
   102f0:	f800283a 	ret

000102f4 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   102f4:	deffff04 	addi	sp,sp,-4
   102f8:	df000015 	stw	fp,0(sp)
   102fc:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   10300:	0001883a 	nop
   10304:	e037883a 	mov	sp,fp
   10308:	df000017 	ldw	fp,0(sp)
   1030c:	dec00104 	addi	sp,sp,4
   10310:	f800283a 	ret

00010314 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   10314:	defffe04 	addi	sp,sp,-8
   10318:	dfc00115 	stw	ra,4(sp)
   1031c:	df000015 	stw	fp,0(sp)
   10320:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   10324:	d0a00b17 	ldw	r2,-32724(gp)
   10328:	10000326 	beq	r2,zero,10338 <alt_get_errno+0x24>
   1032c:	d0a00b17 	ldw	r2,-32724(gp)
   10330:	103ee83a 	callr	r2
   10334:	00000106 	br	1033c <alt_get_errno+0x28>
   10338:	d0a6d804 	addi	r2,gp,-25760
}
   1033c:	e037883a 	mov	sp,fp
   10340:	dfc00117 	ldw	ra,4(sp)
   10344:	df000017 	ldw	fp,0(sp)
   10348:	dec00204 	addi	sp,sp,8
   1034c:	f800283a 	ret

00010350 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
   10350:	defffa04 	addi	sp,sp,-24
   10354:	dfc00515 	stw	ra,20(sp)
   10358:	df000415 	stw	fp,16(sp)
   1035c:	df000404 	addi	fp,sp,16
   10360:	e13ffe15 	stw	r4,-8(fp)
   10364:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
   10368:	e0bffe17 	ldw	r2,-8(fp)
   1036c:	10000326 	beq	r2,zero,1037c <alt_dev_llist_insert+0x2c>
   10370:	e0bffe17 	ldw	r2,-8(fp)
   10374:	10800217 	ldw	r2,8(r2)
   10378:	1000061e 	bne	r2,zero,10394 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
   1037c:	00103140 	call	10314 <alt_get_errno>
   10380:	1007883a 	mov	r3,r2
   10384:	00800584 	movi	r2,22
   10388:	18800015 	stw	r2,0(r3)
    return -EINVAL;
   1038c:	00bffa84 	movi	r2,-22
   10390:	00001306 	br	103e0 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
   10394:	e0bffe17 	ldw	r2,-8(fp)
   10398:	e0ffff17 	ldw	r3,-4(fp)
   1039c:	e0fffc15 	stw	r3,-16(fp)
   103a0:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   103a4:	e0bffd17 	ldw	r2,-12(fp)
   103a8:	e0fffc17 	ldw	r3,-16(fp)
   103ac:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   103b0:	e0bffc17 	ldw	r2,-16(fp)
   103b4:	10c00017 	ldw	r3,0(r2)
   103b8:	e0bffd17 	ldw	r2,-12(fp)
   103bc:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   103c0:	e0bffc17 	ldw	r2,-16(fp)
   103c4:	10800017 	ldw	r2,0(r2)
   103c8:	e0fffd17 	ldw	r3,-12(fp)
   103cc:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   103d0:	e0bffc17 	ldw	r2,-16(fp)
   103d4:	e0fffd17 	ldw	r3,-12(fp)
   103d8:	10c00015 	stw	r3,0(r2)

  return 0;  
   103dc:	0005883a 	mov	r2,zero
}
   103e0:	e037883a 	mov	sp,fp
   103e4:	dfc00117 	ldw	ra,4(sp)
   103e8:	df000017 	ldw	fp,0(sp)
   103ec:	dec00204 	addi	sp,sp,8
   103f0:	f800283a 	ret

000103f4 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
   103f4:	defffd04 	addi	sp,sp,-12
   103f8:	dfc00215 	stw	ra,8(sp)
   103fc:	df000115 	stw	fp,4(sp)
   10400:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   10404:	00800074 	movhi	r2,1
   10408:	1084f704 	addi	r2,r2,5084
   1040c:	e0bfff15 	stw	r2,-4(fp)
   10410:	00000606 	br	1042c <_do_ctors+0x38>
        (*ctor) (); 
   10414:	e0bfff17 	ldw	r2,-4(fp)
   10418:	10800017 	ldw	r2,0(r2)
   1041c:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   10420:	e0bfff17 	ldw	r2,-4(fp)
   10424:	10bfff04 	addi	r2,r2,-4
   10428:	e0bfff15 	stw	r2,-4(fp)
   1042c:	e0ffff17 	ldw	r3,-4(fp)
   10430:	00800074 	movhi	r2,1
   10434:	1084f804 	addi	r2,r2,5088
   10438:	18bff62e 	bgeu	r3,r2,10414 <_do_ctors+0x20>
        (*ctor) (); 
}
   1043c:	0001883a 	nop
   10440:	e037883a 	mov	sp,fp
   10444:	dfc00117 	ldw	ra,4(sp)
   10448:	df000017 	ldw	fp,0(sp)
   1044c:	dec00204 	addi	sp,sp,8
   10450:	f800283a 	ret

00010454 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
   10454:	defffd04 	addi	sp,sp,-12
   10458:	dfc00215 	stw	ra,8(sp)
   1045c:	df000115 	stw	fp,4(sp)
   10460:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   10464:	00800074 	movhi	r2,1
   10468:	1084f704 	addi	r2,r2,5084
   1046c:	e0bfff15 	stw	r2,-4(fp)
   10470:	00000606 	br	1048c <_do_dtors+0x38>
        (*dtor) (); 
   10474:	e0bfff17 	ldw	r2,-4(fp)
   10478:	10800017 	ldw	r2,0(r2)
   1047c:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   10480:	e0bfff17 	ldw	r2,-4(fp)
   10484:	10bfff04 	addi	r2,r2,-4
   10488:	e0bfff15 	stw	r2,-4(fp)
   1048c:	e0ffff17 	ldw	r3,-4(fp)
   10490:	00800074 	movhi	r2,1
   10494:	1084f804 	addi	r2,r2,5088
   10498:	18bff62e 	bgeu	r3,r2,10474 <_do_dtors+0x20>
        (*dtor) (); 
}
   1049c:	0001883a 	nop
   104a0:	e037883a 	mov	sp,fp
   104a4:	dfc00117 	ldw	ra,4(sp)
   104a8:	df000017 	ldw	fp,0(sp)
   104ac:	dec00204 	addi	sp,sp,8
   104b0:	f800283a 	ret

000104b4 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   104b4:	defffe04 	addi	sp,sp,-8
   104b8:	dfc00115 	stw	ra,4(sp)
   104bc:	df000015 	stw	fp,0(sp)
   104c0:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
   104c4:	01440004 	movi	r5,4096
   104c8:	0009883a 	mov	r4,zero
   104cc:	0010f200 	call	10f20 <alt_icache_flush>
#endif
}
   104d0:	0001883a 	nop
   104d4:	e037883a 	mov	sp,fp
   104d8:	dfc00117 	ldw	ra,4(sp)
   104dc:	df000017 	ldw	fp,0(sp)
   104e0:	dec00204 	addi	sp,sp,8
   104e4:	f800283a 	ret

000104e8 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   104e8:	defff904 	addi	sp,sp,-28
   104ec:	dfc00615 	stw	ra,24(sp)
   104f0:	df000515 	stw	fp,20(sp)
   104f4:	df000504 	addi	fp,sp,20
   104f8:	e13ffc15 	stw	r4,-16(fp)
   104fc:	e17ffd15 	stw	r5,-12(fp)
   10500:	e1bffe15 	stw	r6,-8(fp)
   10504:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
   10508:	e0800217 	ldw	r2,8(fp)
   1050c:	d8800015 	stw	r2,0(sp)
   10510:	e1ffff17 	ldw	r7,-4(fp)
   10514:	e1bffe17 	ldw	r6,-8(fp)
   10518:	e17ffd17 	ldw	r5,-12(fp)
   1051c:	e13ffc17 	ldw	r4,-16(fp)
   10520:	00106980 	call	10698 <alt_iic_isr_register>
}  
   10524:	e037883a 	mov	sp,fp
   10528:	dfc00117 	ldw	ra,4(sp)
   1052c:	df000017 	ldw	fp,0(sp)
   10530:	dec00204 	addi	sp,sp,8
   10534:	f800283a 	ret

00010538 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
   10538:	defff904 	addi	sp,sp,-28
   1053c:	df000615 	stw	fp,24(sp)
   10540:	df000604 	addi	fp,sp,24
   10544:	e13ffe15 	stw	r4,-8(fp)
   10548:	e17fff15 	stw	r5,-4(fp)
   1054c:	e0bfff17 	ldw	r2,-4(fp)
   10550:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   10554:	0005303a 	rdctl	r2,status
   10558:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1055c:	e0fffb17 	ldw	r3,-20(fp)
   10560:	00bfff84 	movi	r2,-2
   10564:	1884703a 	and	r2,r3,r2
   10568:	1001703a 	wrctl	status,r2
  
  return context;
   1056c:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   10570:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
   10574:	00c00044 	movi	r3,1
   10578:	e0bffa17 	ldw	r2,-24(fp)
   1057c:	1884983a 	sll	r2,r3,r2
   10580:	1007883a 	mov	r3,r2
   10584:	d0a6e117 	ldw	r2,-25724(gp)
   10588:	1884b03a 	or	r2,r3,r2
   1058c:	d0a6e115 	stw	r2,-25724(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   10590:	d0a6e117 	ldw	r2,-25724(gp)
   10594:	100170fa 	wrctl	ienable,r2
   10598:	e0bffc17 	ldw	r2,-16(fp)
   1059c:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   105a0:	e0bffd17 	ldw	r2,-12(fp)
   105a4:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   105a8:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
   105ac:	0001883a 	nop
}
   105b0:	e037883a 	mov	sp,fp
   105b4:	df000017 	ldw	fp,0(sp)
   105b8:	dec00104 	addi	sp,sp,4
   105bc:	f800283a 	ret

000105c0 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
   105c0:	defff904 	addi	sp,sp,-28
   105c4:	df000615 	stw	fp,24(sp)
   105c8:	df000604 	addi	fp,sp,24
   105cc:	e13ffe15 	stw	r4,-8(fp)
   105d0:	e17fff15 	stw	r5,-4(fp)
   105d4:	e0bfff17 	ldw	r2,-4(fp)
   105d8:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   105dc:	0005303a 	rdctl	r2,status
   105e0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   105e4:	e0fffb17 	ldw	r3,-20(fp)
   105e8:	00bfff84 	movi	r2,-2
   105ec:	1884703a 	and	r2,r3,r2
   105f0:	1001703a 	wrctl	status,r2
  
  return context;
   105f4:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   105f8:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
   105fc:	00c00044 	movi	r3,1
   10600:	e0bffa17 	ldw	r2,-24(fp)
   10604:	1884983a 	sll	r2,r3,r2
   10608:	0084303a 	nor	r2,zero,r2
   1060c:	1007883a 	mov	r3,r2
   10610:	d0a6e117 	ldw	r2,-25724(gp)
   10614:	1884703a 	and	r2,r3,r2
   10618:	d0a6e115 	stw	r2,-25724(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   1061c:	d0a6e117 	ldw	r2,-25724(gp)
   10620:	100170fa 	wrctl	ienable,r2
   10624:	e0bffc17 	ldw	r2,-16(fp)
   10628:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1062c:	e0bffd17 	ldw	r2,-12(fp)
   10630:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   10634:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
   10638:	0001883a 	nop
}
   1063c:	e037883a 	mov	sp,fp
   10640:	df000017 	ldw	fp,0(sp)
   10644:	dec00104 	addi	sp,sp,4
   10648:	f800283a 	ret

0001064c <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
   1064c:	defffc04 	addi	sp,sp,-16
   10650:	df000315 	stw	fp,12(sp)
   10654:	df000304 	addi	fp,sp,12
   10658:	e13ffe15 	stw	r4,-8(fp)
   1065c:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
   10660:	000530fa 	rdctl	r2,ienable
   10664:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
   10668:	00c00044 	movi	r3,1
   1066c:	e0bfff17 	ldw	r2,-4(fp)
   10670:	1884983a 	sll	r2,r3,r2
   10674:	1007883a 	mov	r3,r2
   10678:	e0bffd17 	ldw	r2,-12(fp)
   1067c:	1884703a 	and	r2,r3,r2
   10680:	1004c03a 	cmpne	r2,r2,zero
   10684:	10803fcc 	andi	r2,r2,255
}
   10688:	e037883a 	mov	sp,fp
   1068c:	df000017 	ldw	fp,0(sp)
   10690:	dec00104 	addi	sp,sp,4
   10694:	f800283a 	ret

00010698 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   10698:	defff504 	addi	sp,sp,-44
   1069c:	dfc00a15 	stw	ra,40(sp)
   106a0:	df000915 	stw	fp,36(sp)
   106a4:	df000904 	addi	fp,sp,36
   106a8:	e13ffc15 	stw	r4,-16(fp)
   106ac:	e17ffd15 	stw	r5,-12(fp)
   106b0:	e1bffe15 	stw	r6,-8(fp)
   106b4:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
   106b8:	00bffa84 	movi	r2,-22
   106bc:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
   106c0:	e0bffd17 	ldw	r2,-12(fp)
   106c4:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
   106c8:	e0bff817 	ldw	r2,-32(fp)
   106cc:	10800808 	cmpgei	r2,r2,32
   106d0:	1000271e 	bne	r2,zero,10770 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   106d4:	0005303a 	rdctl	r2,status
   106d8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   106dc:	e0fffb17 	ldw	r3,-20(fp)
   106e0:	00bfff84 	movi	r2,-2
   106e4:	1884703a 	and	r2,r3,r2
   106e8:	1001703a 	wrctl	status,r2
  
  return context;
   106ec:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
   106f0:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
   106f4:	00800074 	movhi	r2,1
   106f8:	10946f04 	addi	r2,r2,20924
   106fc:	e0fff817 	ldw	r3,-32(fp)
   10700:	180690fa 	slli	r3,r3,3
   10704:	10c5883a 	add	r2,r2,r3
   10708:	e0fffe17 	ldw	r3,-8(fp)
   1070c:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
   10710:	00800074 	movhi	r2,1
   10714:	10946f04 	addi	r2,r2,20924
   10718:	e0fff817 	ldw	r3,-32(fp)
   1071c:	180690fa 	slli	r3,r3,3
   10720:	10c5883a 	add	r2,r2,r3
   10724:	10800104 	addi	r2,r2,4
   10728:	e0ffff17 	ldw	r3,-4(fp)
   1072c:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
   10730:	e0bffe17 	ldw	r2,-8(fp)
   10734:	10000526 	beq	r2,zero,1074c <alt_iic_isr_register+0xb4>
   10738:	e0bff817 	ldw	r2,-32(fp)
   1073c:	100b883a 	mov	r5,r2
   10740:	e13ffc17 	ldw	r4,-16(fp)
   10744:	00105380 	call	10538 <alt_ic_irq_enable>
   10748:	00000406 	br	1075c <alt_iic_isr_register+0xc4>
   1074c:	e0bff817 	ldw	r2,-32(fp)
   10750:	100b883a 	mov	r5,r2
   10754:	e13ffc17 	ldw	r4,-16(fp)
   10758:	00105c00 	call	105c0 <alt_ic_irq_disable>
   1075c:	e0bff715 	stw	r2,-36(fp)
   10760:	e0bffa17 	ldw	r2,-24(fp)
   10764:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   10768:	e0bff917 	ldw	r2,-28(fp)
   1076c:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
   10770:	e0bff717 	ldw	r2,-36(fp)
}
   10774:	e037883a 	mov	sp,fp
   10778:	dfc00117 	ldw	ra,4(sp)
   1077c:	df000017 	ldw	fp,0(sp)
   10780:	dec00204 	addi	sp,sp,8
   10784:	f800283a 	ret

00010788 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
   10788:	defff904 	addi	sp,sp,-28
   1078c:	dfc00615 	stw	ra,24(sp)
   10790:	df000515 	stw	fp,20(sp)
   10794:	df000504 	addi	fp,sp,20
   10798:	e13ffc15 	stw	r4,-16(fp)
   1079c:	e17ffd15 	stw	r5,-12(fp)
   107a0:	e1bffe15 	stw	r6,-8(fp)
   107a4:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
   107a8:	e1bfff17 	ldw	r6,-4(fp)
   107ac:	e17ffe17 	ldw	r5,-8(fp)
   107b0:	e13ffd17 	ldw	r4,-12(fp)
   107b4:	00109c80 	call	109c8 <open>
   107b8:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
   107bc:	e0bffb17 	ldw	r2,-20(fp)
   107c0:	10001c16 	blt	r2,zero,10834 <alt_open_fd+0xac>
  {
    fd->dev      = alt_fd_list[old].dev;
   107c4:	00800074 	movhi	r2,1
   107c8:	10890804 	addi	r2,r2,9248
   107cc:	e0fffb17 	ldw	r3,-20(fp)
   107d0:	18c00324 	muli	r3,r3,12
   107d4:	10c5883a 	add	r2,r2,r3
   107d8:	10c00017 	ldw	r3,0(r2)
   107dc:	e0bffc17 	ldw	r2,-16(fp)
   107e0:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
   107e4:	00800074 	movhi	r2,1
   107e8:	10890804 	addi	r2,r2,9248
   107ec:	e0fffb17 	ldw	r3,-20(fp)
   107f0:	18c00324 	muli	r3,r3,12
   107f4:	10c5883a 	add	r2,r2,r3
   107f8:	10800104 	addi	r2,r2,4
   107fc:	10c00017 	ldw	r3,0(r2)
   10800:	e0bffc17 	ldw	r2,-16(fp)
   10804:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
   10808:	00800074 	movhi	r2,1
   1080c:	10890804 	addi	r2,r2,9248
   10810:	e0fffb17 	ldw	r3,-20(fp)
   10814:	18c00324 	muli	r3,r3,12
   10818:	10c5883a 	add	r2,r2,r3
   1081c:	10800204 	addi	r2,r2,8
   10820:	10c00017 	ldw	r3,0(r2)
   10824:	e0bffc17 	ldw	r2,-16(fp)
   10828:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
   1082c:	e13ffb17 	ldw	r4,-20(fp)
   10830:	000f09c0 	call	f09c <alt_release_fd>
  }
} 
   10834:	0001883a 	nop
   10838:	e037883a 	mov	sp,fp
   1083c:	dfc00117 	ldw	ra,4(sp)
   10840:	df000017 	ldw	fp,0(sp)
   10844:	dec00204 	addi	sp,sp,8
   10848:	f800283a 	ret

0001084c <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
   1084c:	defffb04 	addi	sp,sp,-20
   10850:	dfc00415 	stw	ra,16(sp)
   10854:	df000315 	stw	fp,12(sp)
   10858:	df000304 	addi	fp,sp,12
   1085c:	e13ffd15 	stw	r4,-12(fp)
   10860:	e17ffe15 	stw	r5,-8(fp)
   10864:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
   10868:	01c07fc4 	movi	r7,511
   1086c:	01800044 	movi	r6,1
   10870:	e17ffd17 	ldw	r5,-12(fp)
   10874:	01000074 	movhi	r4,1
   10878:	21090b04 	addi	r4,r4,9260
   1087c:	00107880 	call	10788 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
   10880:	01c07fc4 	movi	r7,511
   10884:	000d883a 	mov	r6,zero
   10888:	e17ffe17 	ldw	r5,-8(fp)
   1088c:	01000074 	movhi	r4,1
   10890:	21090804 	addi	r4,r4,9248
   10894:	00107880 	call	10788 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
   10898:	01c07fc4 	movi	r7,511
   1089c:	01800044 	movi	r6,1
   108a0:	e17fff17 	ldw	r5,-4(fp)
   108a4:	01000074 	movhi	r4,1
   108a8:	21090e04 	addi	r4,r4,9272
   108ac:	00107880 	call	10788 <alt_open_fd>
}  
   108b0:	0001883a 	nop
   108b4:	e037883a 	mov	sp,fp
   108b8:	dfc00117 	ldw	ra,4(sp)
   108bc:	df000017 	ldw	fp,0(sp)
   108c0:	dec00204 	addi	sp,sp,8
   108c4:	f800283a 	ret

000108c8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   108c8:	defffe04 	addi	sp,sp,-8
   108cc:	dfc00115 	stw	ra,4(sp)
   108d0:	df000015 	stw	fp,0(sp)
   108d4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   108d8:	d0a00b17 	ldw	r2,-32724(gp)
   108dc:	10000326 	beq	r2,zero,108ec <alt_get_errno+0x24>
   108e0:	d0a00b17 	ldw	r2,-32724(gp)
   108e4:	103ee83a 	callr	r2
   108e8:	00000106 	br	108f0 <alt_get_errno+0x28>
   108ec:	d0a6d804 	addi	r2,gp,-25760
}
   108f0:	e037883a 	mov	sp,fp
   108f4:	dfc00117 	ldw	ra,4(sp)
   108f8:	df000017 	ldw	fp,0(sp)
   108fc:	dec00204 	addi	sp,sp,8
   10900:	f800283a 	ret

00010904 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
   10904:	defffd04 	addi	sp,sp,-12
   10908:	df000215 	stw	fp,8(sp)
   1090c:	df000204 	addi	fp,sp,8
   10910:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
   10914:	e0bfff17 	ldw	r2,-4(fp)
   10918:	10800217 	ldw	r2,8(r2)
   1091c:	10d00034 	orhi	r3,r2,16384
   10920:	e0bfff17 	ldw	r2,-4(fp)
   10924:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   10928:	e03ffe15 	stw	zero,-8(fp)
   1092c:	00001d06 	br	109a4 <alt_file_locked+0xa0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   10930:	00800074 	movhi	r2,1
   10934:	10890804 	addi	r2,r2,9248
   10938:	e0fffe17 	ldw	r3,-8(fp)
   1093c:	18c00324 	muli	r3,r3,12
   10940:	10c5883a 	add	r2,r2,r3
   10944:	10c00017 	ldw	r3,0(r2)
   10948:	e0bfff17 	ldw	r2,-4(fp)
   1094c:	10800017 	ldw	r2,0(r2)
   10950:	1880111e 	bne	r3,r2,10998 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   10954:	00800074 	movhi	r2,1
   10958:	10890804 	addi	r2,r2,9248
   1095c:	e0fffe17 	ldw	r3,-8(fp)
   10960:	18c00324 	muli	r3,r3,12
   10964:	10c5883a 	add	r2,r2,r3
   10968:	10800204 	addi	r2,r2,8
   1096c:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   10970:	1000090e 	bge	r2,zero,10998 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
   10974:	e0bffe17 	ldw	r2,-8(fp)
   10978:	10c00324 	muli	r3,r2,12
   1097c:	00800074 	movhi	r2,1
   10980:	10890804 	addi	r2,r2,9248
   10984:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   10988:	e0bfff17 	ldw	r2,-4(fp)
   1098c:	18800226 	beq	r3,r2,10998 <alt_file_locked+0x94>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
   10990:	00bffcc4 	movi	r2,-13
   10994:	00000806 	br	109b8 <alt_file_locked+0xb4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   10998:	e0bffe17 	ldw	r2,-8(fp)
   1099c:	10800044 	addi	r2,r2,1
   109a0:	e0bffe15 	stw	r2,-8(fp)
   109a4:	d0a00a17 	ldw	r2,-32728(gp)
   109a8:	1007883a 	mov	r3,r2
   109ac:	e0bffe17 	ldw	r2,-8(fp)
   109b0:	18bfdf2e 	bgeu	r3,r2,10930 <alt_file_locked+0x2c>
    }
  }
  
  /* The device is not locked */
 
  return 0;
   109b4:	0005883a 	mov	r2,zero
}
   109b8:	e037883a 	mov	sp,fp
   109bc:	df000017 	ldw	fp,0(sp)
   109c0:	dec00104 	addi	sp,sp,4
   109c4:	f800283a 	ret

000109c8 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
   109c8:	defff604 	addi	sp,sp,-40
   109cc:	dfc00915 	stw	ra,36(sp)
   109d0:	df000815 	stw	fp,32(sp)
   109d4:	df000804 	addi	fp,sp,32
   109d8:	e13ffd15 	stw	r4,-12(fp)
   109dc:	e17ffe15 	stw	r5,-8(fp)
   109e0:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
   109e4:	00bfffc4 	movi	r2,-1
   109e8:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
   109ec:	00bffb44 	movi	r2,-19
   109f0:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
   109f4:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
   109f8:	d1600804 	addi	r5,gp,-32736
   109fc:	e13ffd17 	ldw	r4,-12(fp)
   10a00:	0010ce40 	call	10ce4 <alt_find_dev>
   10a04:	e0bff815 	stw	r2,-32(fp)
   10a08:	e0bff817 	ldw	r2,-32(fp)
   10a0c:	1000051e 	bne	r2,zero,10a24 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
   10a10:	e13ffd17 	ldw	r4,-12(fp)
   10a14:	0010d740 	call	10d74 <alt_find_file>
   10a18:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
   10a1c:	00800044 	movi	r2,1
   10a20:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
   10a24:	e0bff817 	ldw	r2,-32(fp)
   10a28:	10002926 	beq	r2,zero,10ad0 <open+0x108>
  {
    if ((index = alt_get_fd (dev)) < 0)
   10a2c:	e13ff817 	ldw	r4,-32(fp)
   10a30:	0010e7c0 	call	10e7c <alt_get_fd>
   10a34:	e0bff915 	stw	r2,-28(fp)
   10a38:	e0bff917 	ldw	r2,-28(fp)
   10a3c:	1000030e 	bge	r2,zero,10a4c <open+0x84>
    {
      status = index;
   10a40:	e0bff917 	ldw	r2,-28(fp)
   10a44:	e0bffa15 	stw	r2,-24(fp)
   10a48:	00002306 	br	10ad8 <open+0x110>
    }
    else
    {
      fd = &alt_fd_list[index];
   10a4c:	e0bff917 	ldw	r2,-28(fp)
   10a50:	10c00324 	muli	r3,r2,12
   10a54:	00800074 	movhi	r2,1
   10a58:	10890804 	addi	r2,r2,9248
   10a5c:	1885883a 	add	r2,r3,r2
   10a60:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
   10a64:	e0fffe17 	ldw	r3,-8(fp)
   10a68:	00900034 	movhi	r2,16384
   10a6c:	10bfffc4 	addi	r2,r2,-1
   10a70:	1886703a 	and	r3,r3,r2
   10a74:	e0bffc17 	ldw	r2,-16(fp)
   10a78:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
   10a7c:	e0bffb17 	ldw	r2,-20(fp)
   10a80:	1000051e 	bne	r2,zero,10a98 <open+0xd0>
   10a84:	e13ffc17 	ldw	r4,-16(fp)
   10a88:	00109040 	call	10904 <alt_file_locked>
   10a8c:	e0bffa15 	stw	r2,-24(fp)
   10a90:	e0bffa17 	ldw	r2,-24(fp)
   10a94:	10001016 	blt	r2,zero,10ad8 <open+0x110>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
   10a98:	e0bff817 	ldw	r2,-32(fp)
   10a9c:	10800317 	ldw	r2,12(r2)
   10aa0:	10000826 	beq	r2,zero,10ac4 <open+0xfc>
   10aa4:	e0bff817 	ldw	r2,-32(fp)
   10aa8:	10800317 	ldw	r2,12(r2)
   10aac:	e1ffff17 	ldw	r7,-4(fp)
   10ab0:	e1bffe17 	ldw	r6,-8(fp)
   10ab4:	e17ffd17 	ldw	r5,-12(fp)
   10ab8:	e13ffc17 	ldw	r4,-16(fp)
   10abc:	103ee83a 	callr	r2
   10ac0:	00000106 	br	10ac8 <open+0x100>
   10ac4:	0005883a 	mov	r2,zero
   10ac8:	e0bffa15 	stw	r2,-24(fp)
   10acc:	00000206 	br	10ad8 <open+0x110>
      }
    }
  }
  else
  {
    status = -ENODEV;
   10ad0:	00bffb44 	movi	r2,-19
   10ad4:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
   10ad8:	e0bffa17 	ldw	r2,-24(fp)
   10adc:	1000090e 	bge	r2,zero,10b04 <open+0x13c>
  {
    alt_release_fd (index);  
   10ae0:	e13ff917 	ldw	r4,-28(fp)
   10ae4:	000f09c0 	call	f09c <alt_release_fd>
    ALT_ERRNO = -status;
   10ae8:	00108c80 	call	108c8 <alt_get_errno>
   10aec:	1007883a 	mov	r3,r2
   10af0:	e0bffa17 	ldw	r2,-24(fp)
   10af4:	0085c83a 	sub	r2,zero,r2
   10af8:	18800015 	stw	r2,0(r3)
    return -1;
   10afc:	00bfffc4 	movi	r2,-1
   10b00:	00000106 	br	10b08 <open+0x140>
  }
  
  /* return the reference upon success */

  return index;
   10b04:	e0bff917 	ldw	r2,-28(fp)
}
   10b08:	e037883a 	mov	sp,fp
   10b0c:	dfc00117 	ldw	ra,4(sp)
   10b10:	df000017 	ldw	fp,0(sp)
   10b14:	dec00204 	addi	sp,sp,8
   10b18:	f800283a 	ret

00010b1c <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
   10b1c:	defffa04 	addi	sp,sp,-24
   10b20:	df000515 	stw	fp,20(sp)
   10b24:	df000504 	addi	fp,sp,20
   10b28:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   10b2c:	0005303a 	rdctl	r2,status
   10b30:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   10b34:	e0fffc17 	ldw	r3,-16(fp)
   10b38:	00bfff84 	movi	r2,-2
   10b3c:	1884703a 	and	r2,r3,r2
   10b40:	1001703a 	wrctl	status,r2
  
  return context;
   10b44:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
   10b48:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
   10b4c:	e0bfff17 	ldw	r2,-4(fp)
   10b50:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
   10b54:	e0bffd17 	ldw	r2,-12(fp)
   10b58:	10800017 	ldw	r2,0(r2)
   10b5c:	e0fffd17 	ldw	r3,-12(fp)
   10b60:	18c00117 	ldw	r3,4(r3)
   10b64:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
   10b68:	e0bffd17 	ldw	r2,-12(fp)
   10b6c:	10800117 	ldw	r2,4(r2)
   10b70:	e0fffd17 	ldw	r3,-12(fp)
   10b74:	18c00017 	ldw	r3,0(r3)
   10b78:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
   10b7c:	e0bffd17 	ldw	r2,-12(fp)
   10b80:	e0fffd17 	ldw	r3,-12(fp)
   10b84:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
   10b88:	e0bffd17 	ldw	r2,-12(fp)
   10b8c:	e0fffd17 	ldw	r3,-12(fp)
   10b90:	10c00015 	stw	r3,0(r2)
   10b94:	e0bffb17 	ldw	r2,-20(fp)
   10b98:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   10b9c:	e0bffe17 	ldw	r2,-8(fp)
   10ba0:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
   10ba4:	0001883a 	nop
   10ba8:	e037883a 	mov	sp,fp
   10bac:	df000017 	ldw	fp,0(sp)
   10bb0:	dec00104 	addi	sp,sp,4
   10bb4:	f800283a 	ret

00010bb8 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   10bb8:	defffb04 	addi	sp,sp,-20
   10bbc:	dfc00415 	stw	ra,16(sp)
   10bc0:	df000315 	stw	fp,12(sp)
   10bc4:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
   10bc8:	d0a00e17 	ldw	r2,-32712(gp)
   10bcc:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   10bd0:	d0a6e317 	ldw	r2,-25716(gp)
   10bd4:	10800044 	addi	r2,r2,1
   10bd8:	d0a6e315 	stw	r2,-25716(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   10bdc:	00002e06 	br	10c98 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
   10be0:	e0bffd17 	ldw	r2,-12(fp)
   10be4:	10800017 	ldw	r2,0(r2)
   10be8:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
   10bec:	e0bffd17 	ldw	r2,-12(fp)
   10bf0:	10800403 	ldbu	r2,16(r2)
   10bf4:	10803fcc 	andi	r2,r2,255
   10bf8:	10000426 	beq	r2,zero,10c0c <alt_tick+0x54>
   10bfc:	d0a6e317 	ldw	r2,-25716(gp)
   10c00:	1000021e 	bne	r2,zero,10c0c <alt_tick+0x54>
    {
      alarm->rollover = 0;
   10c04:	e0bffd17 	ldw	r2,-12(fp)
   10c08:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
   10c0c:	e0bffd17 	ldw	r2,-12(fp)
   10c10:	10800217 	ldw	r2,8(r2)
   10c14:	d0e6e317 	ldw	r3,-25716(gp)
   10c18:	18801d36 	bltu	r3,r2,10c90 <alt_tick+0xd8>
   10c1c:	e0bffd17 	ldw	r2,-12(fp)
   10c20:	10800403 	ldbu	r2,16(r2)
   10c24:	10803fcc 	andi	r2,r2,255
   10c28:	1000191e 	bne	r2,zero,10c90 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
   10c2c:	e0bffd17 	ldw	r2,-12(fp)
   10c30:	10800317 	ldw	r2,12(r2)
   10c34:	e0fffd17 	ldw	r3,-12(fp)
   10c38:	18c00517 	ldw	r3,20(r3)
   10c3c:	1809883a 	mov	r4,r3
   10c40:	103ee83a 	callr	r2
   10c44:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
   10c48:	e0bfff17 	ldw	r2,-4(fp)
   10c4c:	1000031e 	bne	r2,zero,10c5c <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
   10c50:	e13ffd17 	ldw	r4,-12(fp)
   10c54:	0010b1c0 	call	10b1c <alt_alarm_stop>
   10c58:	00000d06 	br	10c90 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
   10c5c:	e0bffd17 	ldw	r2,-12(fp)
   10c60:	10c00217 	ldw	r3,8(r2)
   10c64:	e0bfff17 	ldw	r2,-4(fp)
   10c68:	1887883a 	add	r3,r3,r2
   10c6c:	e0bffd17 	ldw	r2,-12(fp)
   10c70:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
   10c74:	e0bffd17 	ldw	r2,-12(fp)
   10c78:	10c00217 	ldw	r3,8(r2)
   10c7c:	d0a6e317 	ldw	r2,-25716(gp)
   10c80:	1880032e 	bgeu	r3,r2,10c90 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
   10c84:	e0bffd17 	ldw	r2,-12(fp)
   10c88:	00c00044 	movi	r3,1
   10c8c:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
   10c90:	e0bffe17 	ldw	r2,-8(fp)
   10c94:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   10c98:	e0fffd17 	ldw	r3,-12(fp)
   10c9c:	d0a00e04 	addi	r2,gp,-32712
   10ca0:	18bfcf1e 	bne	r3,r2,10be0 <alt_tick+0x28>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
   10ca4:	0001883a 	nop
}
   10ca8:	0001883a 	nop
   10cac:	e037883a 	mov	sp,fp
   10cb0:	dfc00117 	ldw	ra,4(sp)
   10cb4:	df000017 	ldw	fp,0(sp)
   10cb8:	dec00204 	addi	sp,sp,8
   10cbc:	f800283a 	ret

00010cc0 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
   10cc0:	deffff04 	addi	sp,sp,-4
   10cc4:	df000015 	stw	fp,0(sp)
   10cc8:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
   10ccc:	000170fa 	wrctl	ienable,zero
}
   10cd0:	0001883a 	nop
   10cd4:	e037883a 	mov	sp,fp
   10cd8:	df000017 	ldw	fp,0(sp)
   10cdc:	dec00104 	addi	sp,sp,4
   10ce0:	f800283a 	ret

00010ce4 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   10ce4:	defffa04 	addi	sp,sp,-24
   10ce8:	dfc00515 	stw	ra,20(sp)
   10cec:	df000415 	stw	fp,16(sp)
   10cf0:	df000404 	addi	fp,sp,16
   10cf4:	e13ffe15 	stw	r4,-8(fp)
   10cf8:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
   10cfc:	e0bfff17 	ldw	r2,-4(fp)
   10d00:	10800017 	ldw	r2,0(r2)
   10d04:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
   10d08:	e13ffe17 	ldw	r4,-8(fp)
   10d0c:	0002bd40 	call	2bd4 <strlen>
   10d10:	10800044 	addi	r2,r2,1
   10d14:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   10d18:	00000d06 	br	10d50 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   10d1c:	e0bffc17 	ldw	r2,-16(fp)
   10d20:	10800217 	ldw	r2,8(r2)
   10d24:	e0fffd17 	ldw	r3,-12(fp)
   10d28:	180d883a 	mov	r6,r3
   10d2c:	e17ffe17 	ldw	r5,-8(fp)
   10d30:	1009883a 	mov	r4,r2
   10d34:	00110980 	call	11098 <memcmp>
   10d38:	1000021e 	bne	r2,zero,10d44 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
   10d3c:	e0bffc17 	ldw	r2,-16(fp)
   10d40:	00000706 	br	10d60 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
   10d44:	e0bffc17 	ldw	r2,-16(fp)
   10d48:	10800017 	ldw	r2,0(r2)
   10d4c:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   10d50:	e0fffc17 	ldw	r3,-16(fp)
   10d54:	e0bfff17 	ldw	r2,-4(fp)
   10d58:	18bff01e 	bne	r3,r2,10d1c <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
   10d5c:	0005883a 	mov	r2,zero
}
   10d60:	e037883a 	mov	sp,fp
   10d64:	dfc00117 	ldw	ra,4(sp)
   10d68:	df000017 	ldw	fp,0(sp)
   10d6c:	dec00204 	addi	sp,sp,8
   10d70:	f800283a 	ret

00010d74 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   10d74:	defffb04 	addi	sp,sp,-20
   10d78:	dfc00415 	stw	ra,16(sp)
   10d7c:	df000315 	stw	fp,12(sp)
   10d80:	df000304 	addi	fp,sp,12
   10d84:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
   10d88:	d0a00617 	ldw	r2,-32744(gp)
   10d8c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   10d90:	00003106 	br	10e58 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
   10d94:	e0bffd17 	ldw	r2,-12(fp)
   10d98:	10800217 	ldw	r2,8(r2)
   10d9c:	1009883a 	mov	r4,r2
   10da0:	0002bd40 	call	2bd4 <strlen>
   10da4:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
   10da8:	e0bffd17 	ldw	r2,-12(fp)
   10dac:	10c00217 	ldw	r3,8(r2)
   10db0:	e0bffe17 	ldw	r2,-8(fp)
   10db4:	10bfffc4 	addi	r2,r2,-1
   10db8:	1885883a 	add	r2,r3,r2
   10dbc:	10800003 	ldbu	r2,0(r2)
   10dc0:	10803fcc 	andi	r2,r2,255
   10dc4:	1080201c 	xori	r2,r2,128
   10dc8:	10bfe004 	addi	r2,r2,-128
   10dcc:	10800bd8 	cmpnei	r2,r2,47
   10dd0:	1000031e 	bne	r2,zero,10de0 <alt_find_file+0x6c>
    {
      len -= 1;
   10dd4:	e0bffe17 	ldw	r2,-8(fp)
   10dd8:	10bfffc4 	addi	r2,r2,-1
   10ddc:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   10de0:	e0bffe17 	ldw	r2,-8(fp)
   10de4:	e0ffff17 	ldw	r3,-4(fp)
   10de8:	1885883a 	add	r2,r3,r2
   10dec:	10800003 	ldbu	r2,0(r2)
   10df0:	10803fcc 	andi	r2,r2,255
   10df4:	1080201c 	xori	r2,r2,128
   10df8:	10bfe004 	addi	r2,r2,-128
   10dfc:	10800be0 	cmpeqi	r2,r2,47
   10e00:	1000081e 	bne	r2,zero,10e24 <alt_find_file+0xb0>
   10e04:	e0bffe17 	ldw	r2,-8(fp)
   10e08:	e0ffff17 	ldw	r3,-4(fp)
   10e0c:	1885883a 	add	r2,r3,r2
   10e10:	10800003 	ldbu	r2,0(r2)
   10e14:	10803fcc 	andi	r2,r2,255
   10e18:	1080201c 	xori	r2,r2,128
   10e1c:	10bfe004 	addi	r2,r2,-128
   10e20:	10000a1e 	bne	r2,zero,10e4c <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
   10e24:	e0bffd17 	ldw	r2,-12(fp)
   10e28:	10800217 	ldw	r2,8(r2)
   10e2c:	e0fffe17 	ldw	r3,-8(fp)
   10e30:	180d883a 	mov	r6,r3
   10e34:	e17fff17 	ldw	r5,-4(fp)
   10e38:	1009883a 	mov	r4,r2
   10e3c:	00110980 	call	11098 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   10e40:	1000021e 	bne	r2,zero,10e4c <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
   10e44:	e0bffd17 	ldw	r2,-12(fp)
   10e48:	00000706 	br	10e68 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
   10e4c:	e0bffd17 	ldw	r2,-12(fp)
   10e50:	10800017 	ldw	r2,0(r2)
   10e54:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   10e58:	e0fffd17 	ldw	r3,-12(fp)
   10e5c:	d0a00604 	addi	r2,gp,-32744
   10e60:	18bfcc1e 	bne	r3,r2,10d94 <alt_find_file+0x20>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
   10e64:	0005883a 	mov	r2,zero
}
   10e68:	e037883a 	mov	sp,fp
   10e6c:	dfc00117 	ldw	ra,4(sp)
   10e70:	df000017 	ldw	fp,0(sp)
   10e74:	dec00204 	addi	sp,sp,8
   10e78:	f800283a 	ret

00010e7c <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
   10e7c:	defffc04 	addi	sp,sp,-16
   10e80:	df000315 	stw	fp,12(sp)
   10e84:	df000304 	addi	fp,sp,12
   10e88:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
   10e8c:	00bffa04 	movi	r2,-24
   10e90:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   10e94:	e03ffd15 	stw	zero,-12(fp)
   10e98:	00001906 	br	10f00 <alt_get_fd+0x84>
  {
    if (!alt_fd_list[i].dev)
   10e9c:	00800074 	movhi	r2,1
   10ea0:	10890804 	addi	r2,r2,9248
   10ea4:	e0fffd17 	ldw	r3,-12(fp)
   10ea8:	18c00324 	muli	r3,r3,12
   10eac:	10c5883a 	add	r2,r2,r3
   10eb0:	10800017 	ldw	r2,0(r2)
   10eb4:	10000f1e 	bne	r2,zero,10ef4 <alt_get_fd+0x78>
    {
      alt_fd_list[i].dev = dev;
   10eb8:	00800074 	movhi	r2,1
   10ebc:	10890804 	addi	r2,r2,9248
   10ec0:	e0fffd17 	ldw	r3,-12(fp)
   10ec4:	18c00324 	muli	r3,r3,12
   10ec8:	10c5883a 	add	r2,r2,r3
   10ecc:	e0ffff17 	ldw	r3,-4(fp)
   10ed0:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
   10ed4:	d0e00a17 	ldw	r3,-32728(gp)
   10ed8:	e0bffd17 	ldw	r2,-12(fp)
   10edc:	1880020e 	bge	r3,r2,10ee8 <alt_get_fd+0x6c>
      {
        alt_max_fd = i;
   10ee0:	e0bffd17 	ldw	r2,-12(fp)
   10ee4:	d0a00a15 	stw	r2,-32728(gp)
      }
      rc = i;
   10ee8:	e0bffd17 	ldw	r2,-12(fp)
   10eec:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
   10ef0:	00000606 	br	10f0c <alt_get_fd+0x90>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   10ef4:	e0bffd17 	ldw	r2,-12(fp)
   10ef8:	10800044 	addi	r2,r2,1
   10efc:	e0bffd15 	stw	r2,-12(fp)
   10f00:	e0bffd17 	ldw	r2,-12(fp)
   10f04:	10800810 	cmplti	r2,r2,32
   10f08:	103fe41e 	bne	r2,zero,10e9c <alt_get_fd+0x20>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
   10f0c:	e0bffe17 	ldw	r2,-8(fp)
}
   10f10:	e037883a 	mov	sp,fp
   10f14:	df000017 	ldw	fp,0(sp)
   10f18:	dec00104 	addi	sp,sp,4
   10f1c:	f800283a 	ret

00010f20 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
   10f20:	defffb04 	addi	sp,sp,-20
   10f24:	df000415 	stw	fp,16(sp)
   10f28:	df000404 	addi	fp,sp,16
   10f2c:	e13ffe15 	stw	r4,-8(fp)
   10f30:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
   10f34:	e0bfff17 	ldw	r2,-4(fp)
   10f38:	10840070 	cmpltui	r2,r2,4097
   10f3c:	1000021e 	bne	r2,zero,10f48 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
   10f40:	00840004 	movi	r2,4096
   10f44:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
   10f48:	e0fffe17 	ldw	r3,-8(fp)
   10f4c:	e0bfff17 	ldw	r2,-4(fp)
   10f50:	1885883a 	add	r2,r3,r2
   10f54:	e0bffd15 	stw	r2,-12(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   10f58:	e0bffe17 	ldw	r2,-8(fp)
   10f5c:	e0bffc15 	stw	r2,-16(fp)
   10f60:	00000506 	br	10f78 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
   10f64:	e0bffc17 	ldw	r2,-16(fp)
   10f68:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   10f6c:	e0bffc17 	ldw	r2,-16(fp)
   10f70:	10800804 	addi	r2,r2,32
   10f74:	e0bffc15 	stw	r2,-16(fp)
   10f78:	e0fffc17 	ldw	r3,-16(fp)
   10f7c:	e0bffd17 	ldw	r2,-12(fp)
   10f80:	18bff836 	bltu	r3,r2,10f64 <alt_icache_flush+0x44>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
   10f84:	e0bffe17 	ldw	r2,-8(fp)
   10f88:	108007cc 	andi	r2,r2,31
   10f8c:	10000226 	beq	r2,zero,10f98 <alt_icache_flush+0x78>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
   10f90:	e0bffc17 	ldw	r2,-16(fp)
   10f94:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
   10f98:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
   10f9c:	0001883a 	nop
   10fa0:	e037883a 	mov	sp,fp
   10fa4:	df000017 	ldw	fp,0(sp)
   10fa8:	dec00104 	addi	sp,sp,4
   10fac:	f800283a 	ret

00010fb0 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
   10fb0:	defffe04 	addi	sp,sp,-8
   10fb4:	df000115 	stw	fp,4(sp)
   10fb8:	df000104 	addi	fp,sp,4
   10fbc:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
   10fc0:	e0bfff17 	ldw	r2,-4(fp)
   10fc4:	10bffe84 	addi	r2,r2,-6
   10fc8:	10c00428 	cmpgeui	r3,r2,16
   10fcc:	18001a1e 	bne	r3,zero,11038 <alt_exception_cause_generated_bad_addr+0x88>
   10fd0:	100690ba 	slli	r3,r2,2
   10fd4:	00800074 	movhi	r2,1
   10fd8:	1083fa04 	addi	r2,r2,4072
   10fdc:	1885883a 	add	r2,r3,r2
   10fe0:	10800017 	ldw	r2,0(r2)
   10fe4:	1000683a 	jmp	r2
   10fe8:	00011028 	cmpgeui	zero,zero,1088
   10fec:	00011028 	cmpgeui	zero,zero,1088
   10ff0:	00011038 	rdprs	zero,zero,1088
   10ff4:	00011038 	rdprs	zero,zero,1088
   10ff8:	00011038 	rdprs	zero,zero,1088
   10ffc:	00011028 	cmpgeui	zero,zero,1088
   11000:	00011030 	cmpltui	zero,zero,1088
   11004:	00011038 	rdprs	zero,zero,1088
   11008:	00011028 	cmpgeui	zero,zero,1088
   1100c:	00011028 	cmpgeui	zero,zero,1088
   11010:	00011038 	rdprs	zero,zero,1088
   11014:	00011028 	cmpgeui	zero,zero,1088
   11018:	00011030 	cmpltui	zero,zero,1088
   1101c:	00011038 	rdprs	zero,zero,1088
   11020:	00011038 	rdprs	zero,zero,1088
   11024:	00011028 	cmpgeui	zero,zero,1088
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
   11028:	00800044 	movi	r2,1
   1102c:	00000306 	br	1103c <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
   11030:	0005883a 	mov	r2,zero
   11034:	00000106 	br	1103c <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
   11038:	0005883a 	mov	r2,zero
  }
}
   1103c:	e037883a 	mov	sp,fp
   11040:	df000017 	ldw	fp,0(sp)
   11044:	dec00104 	addi	sp,sp,4
   11048:	f800283a 	ret

0001104c <atexit>:
   1104c:	200b883a 	mov	r5,r4
   11050:	000f883a 	mov	r7,zero
   11054:	000d883a 	mov	r6,zero
   11058:	0009883a 	mov	r4,zero
   1105c:	00111141 	jmpi	11114 <__register_exitproc>

00011060 <exit>:
   11060:	defffe04 	addi	sp,sp,-8
   11064:	000b883a 	mov	r5,zero
   11068:	dc000015 	stw	r16,0(sp)
   1106c:	dfc00115 	stw	ra,4(sp)
   11070:	2021883a 	mov	r16,r4
   11074:	001122c0 	call	1122c <__call_exitprocs>
   11078:	00800074 	movhi	r2,1
   1107c:	108d8204 	addi	r2,r2,13832
   11080:	11000017 	ldw	r4,0(r2)
   11084:	20800f17 	ldw	r2,60(r4)
   11088:	10000126 	beq	r2,zero,11090 <exit+0x30>
   1108c:	103ee83a 	callr	r2
   11090:	8009883a 	mov	r4,r16
   11094:	00113ac0 	call	113ac <_exit>

00011098 <memcmp>:
   11098:	01c000c4 	movi	r7,3
   1109c:	3980192e 	bgeu	r7,r6,11104 <memcmp+0x6c>
   110a0:	2144b03a 	or	r2,r4,r5
   110a4:	11c4703a 	and	r2,r2,r7
   110a8:	10000f26 	beq	r2,zero,110e8 <memcmp+0x50>
   110ac:	20800003 	ldbu	r2,0(r4)
   110b0:	28c00003 	ldbu	r3,0(r5)
   110b4:	10c0151e 	bne	r2,r3,1110c <memcmp+0x74>
   110b8:	31bfff84 	addi	r6,r6,-2
   110bc:	01ffffc4 	movi	r7,-1
   110c0:	00000406 	br	110d4 <memcmp+0x3c>
   110c4:	20800003 	ldbu	r2,0(r4)
   110c8:	28c00003 	ldbu	r3,0(r5)
   110cc:	31bfffc4 	addi	r6,r6,-1
   110d0:	10c00e1e 	bne	r2,r3,1110c <memcmp+0x74>
   110d4:	21000044 	addi	r4,r4,1
   110d8:	29400044 	addi	r5,r5,1
   110dc:	31fff91e 	bne	r6,r7,110c4 <memcmp+0x2c>
   110e0:	0005883a 	mov	r2,zero
   110e4:	f800283a 	ret
   110e8:	20c00017 	ldw	r3,0(r4)
   110ec:	28800017 	ldw	r2,0(r5)
   110f0:	18bfee1e 	bne	r3,r2,110ac <memcmp+0x14>
   110f4:	31bfff04 	addi	r6,r6,-4
   110f8:	21000104 	addi	r4,r4,4
   110fc:	29400104 	addi	r5,r5,4
   11100:	39bff936 	bltu	r7,r6,110e8 <memcmp+0x50>
   11104:	303fe91e 	bne	r6,zero,110ac <memcmp+0x14>
   11108:	003ff506 	br	110e0 <memcmp+0x48>
   1110c:	10c5c83a 	sub	r2,r2,r3
   11110:	f800283a 	ret

00011114 <__register_exitproc>:
   11114:	defffa04 	addi	sp,sp,-24
   11118:	dc000315 	stw	r16,12(sp)
   1111c:	04000074 	movhi	r16,1
   11120:	840d8204 	addi	r16,r16,13832
   11124:	80c00017 	ldw	r3,0(r16)
   11128:	dc400415 	stw	r17,16(sp)
   1112c:	dfc00515 	stw	ra,20(sp)
   11130:	18805217 	ldw	r2,328(r3)
   11134:	2023883a 	mov	r17,r4
   11138:	10003726 	beq	r2,zero,11218 <__register_exitproc+0x104>
   1113c:	10c00117 	ldw	r3,4(r2)
   11140:	010007c4 	movi	r4,31
   11144:	20c00e16 	blt	r4,r3,11180 <__register_exitproc+0x6c>
   11148:	1a000044 	addi	r8,r3,1
   1114c:	8800221e 	bne	r17,zero,111d8 <__register_exitproc+0xc4>
   11150:	18c00084 	addi	r3,r3,2
   11154:	18c7883a 	add	r3,r3,r3
   11158:	18c7883a 	add	r3,r3,r3
   1115c:	12000115 	stw	r8,4(r2)
   11160:	10c7883a 	add	r3,r2,r3
   11164:	19400015 	stw	r5,0(r3)
   11168:	0005883a 	mov	r2,zero
   1116c:	dfc00517 	ldw	ra,20(sp)
   11170:	dc400417 	ldw	r17,16(sp)
   11174:	dc000317 	ldw	r16,12(sp)
   11178:	dec00604 	addi	sp,sp,24
   1117c:	f800283a 	ret
   11180:	00800034 	movhi	r2,0
   11184:	10888304 	addi	r2,r2,8716
   11188:	10002626 	beq	r2,zero,11224 <__register_exitproc+0x110>
   1118c:	01006404 	movi	r4,400
   11190:	d9400015 	stw	r5,0(sp)
   11194:	d9800115 	stw	r6,4(sp)
   11198:	d9c00215 	stw	r7,8(sp)
   1119c:	000220c0 	call	220c <malloc>
   111a0:	d9400017 	ldw	r5,0(sp)
   111a4:	d9800117 	ldw	r6,4(sp)
   111a8:	d9c00217 	ldw	r7,8(sp)
   111ac:	10001d26 	beq	r2,zero,11224 <__register_exitproc+0x110>
   111b0:	81000017 	ldw	r4,0(r16)
   111b4:	10000115 	stw	zero,4(r2)
   111b8:	02000044 	movi	r8,1
   111bc:	22405217 	ldw	r9,328(r4)
   111c0:	0007883a 	mov	r3,zero
   111c4:	12400015 	stw	r9,0(r2)
   111c8:	20805215 	stw	r2,328(r4)
   111cc:	10006215 	stw	zero,392(r2)
   111d0:	10006315 	stw	zero,396(r2)
   111d4:	883fde26 	beq	r17,zero,11150 <__register_exitproc+0x3c>
   111d8:	18c9883a 	add	r4,r3,r3
   111dc:	2109883a 	add	r4,r4,r4
   111e0:	1109883a 	add	r4,r2,r4
   111e4:	21802215 	stw	r6,136(r4)
   111e8:	01800044 	movi	r6,1
   111ec:	12406217 	ldw	r9,392(r2)
   111f0:	30cc983a 	sll	r6,r6,r3
   111f4:	4992b03a 	or	r9,r9,r6
   111f8:	12406215 	stw	r9,392(r2)
   111fc:	21c04215 	stw	r7,264(r4)
   11200:	01000084 	movi	r4,2
   11204:	893fd21e 	bne	r17,r4,11150 <__register_exitproc+0x3c>
   11208:	11006317 	ldw	r4,396(r2)
   1120c:	218cb03a 	or	r6,r4,r6
   11210:	11806315 	stw	r6,396(r2)
   11214:	003fce06 	br	11150 <__register_exitproc+0x3c>
   11218:	18805304 	addi	r2,r3,332
   1121c:	18805215 	stw	r2,328(r3)
   11220:	003fc606 	br	1113c <__register_exitproc+0x28>
   11224:	00bfffc4 	movi	r2,-1
   11228:	003fd006 	br	1116c <__register_exitproc+0x58>

0001122c <__call_exitprocs>:
   1122c:	defff504 	addi	sp,sp,-44
   11230:	df000915 	stw	fp,36(sp)
   11234:	dd400615 	stw	r21,24(sp)
   11238:	dc800315 	stw	r18,12(sp)
   1123c:	dfc00a15 	stw	ra,40(sp)
   11240:	ddc00815 	stw	r23,32(sp)
   11244:	dd800715 	stw	r22,28(sp)
   11248:	dd000515 	stw	r20,20(sp)
   1124c:	dcc00415 	stw	r19,16(sp)
   11250:	dc400215 	stw	r17,8(sp)
   11254:	dc000115 	stw	r16,4(sp)
   11258:	d9000015 	stw	r4,0(sp)
   1125c:	2839883a 	mov	fp,r5
   11260:	04800044 	movi	r18,1
   11264:	057fffc4 	movi	r21,-1
   11268:	00800074 	movhi	r2,1
   1126c:	108d8204 	addi	r2,r2,13832
   11270:	12000017 	ldw	r8,0(r2)
   11274:	45005217 	ldw	r20,328(r8)
   11278:	44c05204 	addi	r19,r8,328
   1127c:	a0001c26 	beq	r20,zero,112f0 <__call_exitprocs+0xc4>
   11280:	a0800117 	ldw	r2,4(r20)
   11284:	15ffffc4 	addi	r23,r2,-1
   11288:	b8000d16 	blt	r23,zero,112c0 <__call_exitprocs+0x94>
   1128c:	14000044 	addi	r16,r2,1
   11290:	8421883a 	add	r16,r16,r16
   11294:	8421883a 	add	r16,r16,r16
   11298:	84402004 	addi	r17,r16,128
   1129c:	a463883a 	add	r17,r20,r17
   112a0:	a421883a 	add	r16,r20,r16
   112a4:	e0001e26 	beq	fp,zero,11320 <__call_exitprocs+0xf4>
   112a8:	80804017 	ldw	r2,256(r16)
   112ac:	e0801c26 	beq	fp,r2,11320 <__call_exitprocs+0xf4>
   112b0:	bdffffc4 	addi	r23,r23,-1
   112b4:	843fff04 	addi	r16,r16,-4
   112b8:	8c7fff04 	addi	r17,r17,-4
   112bc:	bd7ff91e 	bne	r23,r21,112a4 <__call_exitprocs+0x78>
   112c0:	00800034 	movhi	r2,0
   112c4:	10888804 	addi	r2,r2,8736
   112c8:	10000926 	beq	r2,zero,112f0 <__call_exitprocs+0xc4>
   112cc:	a0800117 	ldw	r2,4(r20)
   112d0:	1000301e 	bne	r2,zero,11394 <__call_exitprocs+0x168>
   112d4:	a0800017 	ldw	r2,0(r20)
   112d8:	10003226 	beq	r2,zero,113a4 <__call_exitprocs+0x178>
   112dc:	a009883a 	mov	r4,r20
   112e0:	98800015 	stw	r2,0(r19)
   112e4:	00022200 	call	2220 <free>
   112e8:	9d000017 	ldw	r20,0(r19)
   112ec:	a03fe41e 	bne	r20,zero,11280 <__call_exitprocs+0x54>
   112f0:	dfc00a17 	ldw	ra,40(sp)
   112f4:	df000917 	ldw	fp,36(sp)
   112f8:	ddc00817 	ldw	r23,32(sp)
   112fc:	dd800717 	ldw	r22,28(sp)
   11300:	dd400617 	ldw	r21,24(sp)
   11304:	dd000517 	ldw	r20,20(sp)
   11308:	dcc00417 	ldw	r19,16(sp)
   1130c:	dc800317 	ldw	r18,12(sp)
   11310:	dc400217 	ldw	r17,8(sp)
   11314:	dc000117 	ldw	r16,4(sp)
   11318:	dec00b04 	addi	sp,sp,44
   1131c:	f800283a 	ret
   11320:	a0800117 	ldw	r2,4(r20)
   11324:	80c00017 	ldw	r3,0(r16)
   11328:	10bfffc4 	addi	r2,r2,-1
   1132c:	15c01426 	beq	r2,r23,11380 <__call_exitprocs+0x154>
   11330:	80000015 	stw	zero,0(r16)
   11334:	183fde26 	beq	r3,zero,112b0 <__call_exitprocs+0x84>
   11338:	95c8983a 	sll	r4,r18,r23
   1133c:	a0806217 	ldw	r2,392(r20)
   11340:	a5800117 	ldw	r22,4(r20)
   11344:	2084703a 	and	r2,r4,r2
   11348:	10000b26 	beq	r2,zero,11378 <__call_exitprocs+0x14c>
   1134c:	a0806317 	ldw	r2,396(r20)
   11350:	2088703a 	and	r4,r4,r2
   11354:	20000c1e 	bne	r4,zero,11388 <__call_exitprocs+0x15c>
   11358:	89400017 	ldw	r5,0(r17)
   1135c:	d9000017 	ldw	r4,0(sp)
   11360:	183ee83a 	callr	r3
   11364:	a0800117 	ldw	r2,4(r20)
   11368:	15bfbf1e 	bne	r2,r22,11268 <__call_exitprocs+0x3c>
   1136c:	98800017 	ldw	r2,0(r19)
   11370:	153fcf26 	beq	r2,r20,112b0 <__call_exitprocs+0x84>
   11374:	003fbc06 	br	11268 <__call_exitprocs+0x3c>
   11378:	183ee83a 	callr	r3
   1137c:	003ff906 	br	11364 <__call_exitprocs+0x138>
   11380:	a5c00115 	stw	r23,4(r20)
   11384:	003feb06 	br	11334 <__call_exitprocs+0x108>
   11388:	89000017 	ldw	r4,0(r17)
   1138c:	183ee83a 	callr	r3
   11390:	003ff406 	br	11364 <__call_exitprocs+0x138>
   11394:	a0800017 	ldw	r2,0(r20)
   11398:	a027883a 	mov	r19,r20
   1139c:	1029883a 	mov	r20,r2
   113a0:	003fb606 	br	1127c <__call_exitprocs+0x50>
   113a4:	0005883a 	mov	r2,zero
   113a8:	003ffb06 	br	11398 <__call_exitprocs+0x16c>

000113ac <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
   113ac:	defffd04 	addi	sp,sp,-12
   113b0:	df000215 	stw	fp,8(sp)
   113b4:	df000204 	addi	fp,sp,8
   113b8:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
   113bc:	0001883a 	nop
   113c0:	e0bfff17 	ldw	r2,-4(fp)
   113c4:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
   113c8:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   113cc:	10000226 	beq	r2,zero,113d8 <_exit+0x2c>
    ALT_SIM_FAIL();
   113d0:	002af070 	cmpltui	zero,zero,43969
   113d4:	00000106 	br	113dc <_exit+0x30>
  } else {
    ALT_SIM_PASS();
   113d8:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
   113dc:	003fff06 	br	113dc <_exit+0x30>
